// NOTE: we assume jQuery is already loaded on the page...

/* This code will load the metadata.json (generated by Frog) and use it to
 * decorate every page with the tags drop-down menu, generate a sidebar of
 * recent posts and a table of contents for every blog post -- Frog used to
 * generate these directly in the HTML, but this meant that every blog page
 * had to change when a new blog post was added...
 */


// ................................................................ TOC ....

// This section contains code to generate the table of contents side bar for
// blog posts.  It is inspired from https://github.com/teesloane/ootliner,
// with lots of adaptations.

function tocInit()
{
    /* In 'mini' mode, the headings are just dashes, so we save the actual
     * headings here, so we can restore them when in full mode. 
     */
    var headings = [];
    
    let toc = document.createElement("UL"); // the main <ul> of the toc.
    document.body.appendChild(toc);

    var applyStyling = (type) => 'toc_' + type.toLowerCase();

    // loop through the headings
    document.querySelectorAll("h1, h2, h3, h4, h5, h6").forEach(element => {
        let node = document.createElement("LI");
        node.setAttribute("class", "toc_entry " + applyStyling(element.tagName));
        node.onclick = () => element.scrollIntoView({ behavior: "smooth" });
        node.textContent = element.textContent;
        toc.appendChild(node);
        headings.push(element.textContent);
    });

    tocCloseMenu(toc, headings);        // start closed
    
    toc.addEventListener("mouseenter", () => tocOpenMenu(toc, headings));
    toc.addEventListener("mouseleave", () => tocCloseMenu(toc, headings));
}

function tocCloseMenu(toc, headings) {
    toc.classList = "toc_base toc_mini";
    tocDoTransition(toc, "mini", headings);
}

function tocOpenMenu(toc, headings) {
    toc.classList = "toc_base toc_full";
    tocDoTransition(toc, "full", headings);
}

function tocDoTransition(toc, mode, headings) {
    var items = Array.from(toc.children);
    var fmt = (element, dash) => { element.textContent = dash; };
    var hasH = (element, h) => element.classList.contains("toc_" + h);

    if (mode === "mini") {
        items.forEach(element => {
            element.classList.add("toc_h_mini");
            if (hasH(element, "h1") || hasH(element, "h2")) {
                fmt(element, "—");
            } else {
                fmt(element, "‐");
            }
        });
    }
    else if (mode === "full") {
        items.forEach((element, index) => {
            element.classList.remove("toc_h_mini");
            fmt(element, headings[index]);
        });
    }
}


// ............................................................... rest ....

function ago(date) {

    var ago2str = function(v, plural, singular) {
        if (v > 1.5) {
            return Math.round(v) + " " + plural + " ago";
        }
        else {
            return "a " + singular + " ago";
        }
    };

    var diff = Date.now() - date;

    if (diff > (11.5 * 30 * 24 * 3600 * 1000)) {
        var v = diff / (365 * 24 * 3600 * 1000);
        return ago2str(v, "years", "year");
    }
    else if (diff > (0.5 * 30 * 24 * 3600 * 1000)) {
        var v = diff / (30 * 24 * 3600 * 1000);
        return ago2str(v, "months", "month");
    }
    else if (diff > (6.5 * 24 * 3600 * 1000)) {
        var v = diff / (7 * 24 * 3600 * 1000);
        return ago2str(v, "weeks", "week");
    }
    else if (diff > (23.5 * 3600 * 1000)) {
        var v = diff / (24 * 3600 * 1000);
        return ago2str(v, "days", "day");
    }
    else {
        // this is a blog, don't care about smaller durations
        return "less than a day ago";
    }
}

tag_entry = function(tag) {
    return ('<a class="dropdown-item" href="' + tag.url +'">'
            + tag.name + '&nbsp<small>(' + tag.count + ')</small></a>');
};

post_entry = function(post) {
    return ('<a href="' + post.url + '">' + post.title
            + '</a><br><small class="date-and-tags">published '
            + ago(new Date(post.date * 1000))
            + '</small>');
}

function fill_sidebar(sb, posts, tagRank, max_posts_in_group)
{
    if (! sb.length) {
        return;                         // no sidebar was found
    }
    var me =  posts.find(function(e) { return e.url === window.location.pathname; });
    if (! me) {                         // non-post page
        return;
    }

    myTags = me.tags.slice(0);          // copy the tags
    myTags.sort(function (a, b) { return (tagRank[a] < tagRank[b]) ? -1 : 1; });

    var emitted = [me];
    myTags.forEach(function(tag) {
        var count = 0;
        posts.forEach(function(post) {
            if (count < max_posts_in_group
                && emitted.indexOf(post) === -1
                && post.tags.indexOf(tag) !== -1)
            {
                if (count === 0) {
                    sb.append('<h3 class="index-entry">More ' + tag + ' posts</h3>');
                }
                emitted.push(post);
                sb.append('<p>' + post_entry(post) + '</p>');
                count++;
            }
        });
    });

    // Add a recent posts

    var count = 0;
    posts.forEach(function(post) {
        if (count < max_posts_in_group
            && emitted.indexOf(post) === -1)
        {
            if (count === 0) {
                sb.append('<h3 class="index-entry">More Posts</h3>');
            }
            emitted.push(post);
            sb.append('<p>' + post_entry(post) + '</p>');
            count++;
        }
    });
}

function fill_tags_menu(tm, tags) {
    if (! tm) {
        return;
    }
    $.each(tags, function(index, tag) {
        tm.append('<li>' + tag_entry(tag) + '</li>');
    });
}

$(document).ready(function() {
    $.ajax({
        type: 'GET',
        url: '/metadata.json',
        success: function(result) {

            // Map each tag name to the number of posts with that tag.
            tagRank = {};
            result.tags.forEach(function(tag) { tagRank[tag.name] = tag.count; });
            // Ensure posts are more recent first, frog outputs them
            // oldest-to-newest
            result.posts.sort(function(a, b) { return (a.date > b.date) ? -1 : 1; });

            fill_tags_menu($('#tags-menu-content'), result.tags);
            fill_sidebar($('#sidebar-content'), result.posts, tagRank, 5);
        }
    });

    // Posts with a sidebar should also have a Table of Contents
    if ($('#sidebar-content').length) {
        tocInit();
    }
});
