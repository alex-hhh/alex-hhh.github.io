((3) 0 () 25 ((p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-03-09-arduino-inclinometer-improvements.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-01-14-equipment-usage-and-costs.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-08-05-racket-data-frame.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2017-11-14-bike-trainer.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2017-12-09-arduino-inclinometer.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2017-12-21-running-and-outdoor-temperature.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2017-09-21-marathon-training-2017-statistics.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-10-19-chess-game-using-racket-s-pasteboard-part-2.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-10-12-chess-game-using-racket-s-pasteboard.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-05-27-workout-editor.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-06-12-racket-map-widget.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-05-19-arduino-433mhz-receiver.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-03-20-interactive-overlays-with-the-racket-plot-package-update.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2017-09-15-introducing-activitylog2.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2019-02-09-data-visualization-dashboard.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2019-03-23-password-generator-gui.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-02-03-interactive-overlays-with-the-racket-plot-package.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-01-29-changing-built-in-racket-packages.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-11-21-an-enhanced-text-field-gui-control-for-racket.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2018-10-29-chess-game-using-racket-s-pasteboard-part-3.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2017-11-25-quantifying-fatigue.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2017-11-28-fatigue-and-running-form.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2019-02-14-racket-data-structures.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2019-03-05-password-generator.md" . windows) (p+ #"C:\\Users\\alexh\\Projects\\Blog\\_src\\posts\\2019-04-18-build-racket-packages-with-azure-pipelines.md" . windows)) () (h ! (equal) ((? . 0) f post (u . "Arduino Inclinometer Improvements") (? . 0) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/03/arduino-inclinometer-improvements.html" . windows) (u . "/2018/03/arduino-inclinometer-improvements.html") (u . "2018-03-09T18:07:27") (? . 16) (? . 12) (c (u . "arduino")) (u . "\n<p>After using the <a href=\"/2017/12/arduino-inclinometer.html\">inclinometer</a> for a while, it became apparent that the functionality was too basic. I extended it, so the unit tracks maximum pitch and roll values seen, displays the pitch and roll direction and can perform calibration on demand, so the unit does not have to acquire its orientation each time it is started up. I also built a better enclosure for it.</p>") #t (u . "\n<p>After using the <a href=\"/2017/12/arduino-inclinometer.html\">inclinometer</a> for a while, it became apparent that the functionality was too basic. I extended it, so the unit tracks maximum pitch and roll values seen, displays the pitch and roll direction and can perform calibration on demand, so the unit does not have to acquire its orientation each time it is started up. I also built a better enclosure for it.</p>\n<!-- more-->\n\n<div class=\"figure\"><img src=\"/img/a011/inclinometer-installed.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"source-code\">Source code</h2>\n\n<p>The source code for this project is available on <a href=\"https://github.com/alex-hhh/Arduino_Inclinometer\">GitHub</a>, a <a href=\"/2017/12/arduino-inclinometer.html\">previous blog post</a> describes the parts list and hardware connections, the required Arduino libraries and how to build the software. It might be a good idea to at least briefly read the previous blog post, as this one does not go into the details explained there.</p>\n\n<h2 id=\"new-enclosure\">New enclosure</h2>\n\n<p>I was not happy with the original enclosure that I used for this project, as it was too big for the actual board. I also, unwisely, soldered the buzzer onto the PCB assembly and the buzzer was too tall, so I had to cut out a bit of the box to make room for the buzzer. The end result was not very nice, so I decided to look for another enclosure.</p>\n\n<p>I spent a lot of time looking for plastic enclosures in electronics shops, but all the ones I found were either too big or too small. In the end, I found some mints in a tin box in a lolly shop, and the tin box was the exact size needed for my project. So the tin box only cost about $5.50 and I also got some mints.</p>\n\n<p>The new box fit perfectly the two new buttons (reset and calibrate) plus the PCB assembly and the buzzer, which I removed from the board and attached it to some wires, so the placement was more flexible.</p>\n\n<hr />\n\n<div id=\"myCarousel\" class=\"carousel slide\" data-ride=\"carousel\"><!-- Indicators--> \n <ol class=\"carousel-indicators\">\n  <li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"2\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"3\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"4\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"5\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"6\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"7\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"8\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"9\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"10\"></li></ol> <!-- Wrapper for slides--> \n <div class=\"carousel-inner\">\n  <div class=\"item active\"><img src=\"/img/a011/assembly-1.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-2.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-3.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-4.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-5.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-6.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-7.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-8.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-9.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-10.jpg\" alt=\"Accelerometer Assembly\" /></div> \n  <div class=\"item\"><img src=\"/img/a011/assembly-11.jpg\" alt=\"Accelerometer Assembly\" /></div></div> <!-- Left and right controls--> <a class=\"left carousel-control\" href=\"#myCarousel\" data-slide=\"prev\"><span class=\"glyphicon glyphicon-chevron-left\"></span> <span class=\"sr-only\">Previous</span></a> <a class=\"right carousel-control\" href=\"#myCarousel\" data-slide=\"next\"><span class=\"glyphicon glyphicon-chevron-right\"></span> <span class=\"sr-only\">Next</span></a></div>\n\n<h2 id=\"making-room-in-the-data-memory\">Making room in the data memory</h2>\n\n<p>The first version of the program used most of the available data memory on the Arduino Nano board, with only 311 bytes remaining for function calls and local variables:</p>\n\n<blockquote>\n <p>Sketch uses 19538 bytes (63%) of program storage space. Maximum is 30720 bytes.</p>\n <p>Global variables use 1737 bytes (84%) of dynamic memory, leaving 311 bytes for local variables. Maximum is 2048 bytes.</p>\n <p>Low memory available, stability problems may occur.</p></blockquote>\n\n<p>Before I could make any enhancements, which would use even more data memory, I had to free up some of this data memory. One thing I found out about the ATmega328P chip, which is what the Arduino Nano uses, is that string constants are stored in data space. For example, a simple <code>Serial.println(\"Hello\")</code>, uses 6 bytes of data space (the string &ldquo;Hello&rdquo; and the terminating 0). Six bytes might not seem much on a normal computer, but the ATmega328P chip only has 2048 bytes of data memory.</p>\n\n<p>The ATmega328P has a memory space to hold programs and a memory space to hold data. With my sketch, I had 11&prime;182 bytes of program space left and I looked for a way for it to store some data. The program space cannot be changed at runtime, so it can only hold constant data, but the strings are constants, so they could be stored there.</p>\n\n<p>The Arduino programing environment has the <a href=\"https://www.arduino.cc/reference/en/language/variables/utilities/progmem/\">PROGMEM</a> construct, which instructs the compiler to store the data in program memory. Unfortunately, this makes accessing the data more complicated, as the data stored in program memory cannot be accessed directly.</p>\n\n<p>To put the constant strings into program memory, each string has to be declared using <code>PROGMEM</code> and all the strings have to be put in a separate table, <code>string_table</code>, which is also declared using <code>PROGMEM</code>. To print out a string, first it has to be copied back into a local buffer (which is in data memory), using <code>strcpy_P</code>, than it can be used. I wrote the <code>oled_print_from_progmem</code> function which wraps all this process and can be used to display constant strings, it uses an index instead of the string directly, but I also defined convenient constants for these strings.</p>\n\n<div class=\"brush: C\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"n\">string_0</span><span class=\"p\">[]</span> <span class=\"n\">PROGMEM</span> <span class=\"o\">=</span> <span class=\"s\">\"Roll\"</span><span class=\"p\">;</span>\n<span class=\"k\">const</span> <span class=\"kt\">char</span> <span class=\"n\">string_1</span><span class=\"p\">[]</span> <span class=\"n\">PROGMEM</span> <span class=\"o\">=</span> <span class=\"s\">\"Pitch\"</span><span class=\"p\">;</span> <span class=\"c1\">// ... other strings ommited</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">char</span><span class=\"o\">*</span> <span class=\"k\">const</span> <span class=\"n\">string_table</span><span class=\"p\">[]</span> <span class=\"n\">PROGMEM</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"n\">string_0</span><span class=\"p\">,</span> <span class=\"n\">string_1</span><span class=\"p\">,</span> <span class=\"c1\">// ... other strings ommited</span>\n<span class=\"p\">};</span>\n\n<span class=\"c1\">// Name the string indices, for easy of use</span>\n<span class=\"cp\">#define ROLL_STR 0</span>\n<span class=\"cp\">#define PITCH_STR 1</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">oled_print_from_progmem</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">text_size</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">string_index</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">char</span> <span class=\"n\">buffer</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">];</span>\n    <span class=\"n\">oled</span><span class=\"p\">.</span><span class=\"n\">setTextSize</span><span class=\"p\">(</span><span class=\"n\">text_size</span><span class=\"p\">);</span>\n    <span class=\"n\">oled</span><span class=\"p\">.</span><span class=\"n\">setCursor</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">);</span>\n    <span class=\"n\">strcpy_P</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"kt\">char</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"n\">pgm_read_word</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"p\">(</span><span class=\"n\">string_table</span><span class=\"p\">[</span><span class=\"n\">string_index</span><span class=\"p\">])));</span>\n    <span class=\"n\">oled</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The strings where using the most of the memory, however, I also put the CRC constant table in PROGMEM, this is used by the CRC function that validates the calibration stored in EEPROM (this is described below).</p>\n\n<p>The end result is that, after adding functionality, and more data to the program, I still ended up 347 data memory available, compared with 311 bytes when I started:</p>\n\n<blockquote>\n <p>Sketch uses 21474 bytes (69%) of program storage space. Maximum is 30720 bytes.</p>\n <p>Global variables use 1701 bytes (83%) of dynamic memory, leaving 347 bytes for local variables. Maximum is 2048 bytes.</p>\n <p>Low memory available, stability problems may occur.</p></blockquote>\n\n<h2 id=\"updated-display-interface\">Updated display interface</h2>\n\n<p>The display of the unit was updated to show more information: the direction of the pitch and roll (up, down, left or right) is now displayed if the angle exceeds 1 degree, the maximum roll and pitch angles are also displayed. A &ldquo;hold max&rdquo; function will prevent the maximum angles to be updated, if that is the case, the max angles will blink.</p>\n\n<div class=\"figure\"><img src=\"/img/a011/display.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h3 id=\"obtaining-forward-backward-and-left-right-information-for-pitch-and-roll-angles\">Obtaining forward-backward and left-right information for pitch and roll angles</h3>\n\n<p>The previous code could calculate the roll and pitch angles, but it would not display the direction. That is, it might display a 2 degree roll but it would not show if it was left or right. For large angles, the direction is obvious for anyone who sits in the car, but for small angles, it is not. I extended the <code>calculate_pitch</code> function to return a negative angle if the vehicle is pitched up and a positive angle if it is pitched down. Similarly, the <code>calculate_roll</code> function was extended to return a negative angle for a left roll and a positive angle for a right roll. The display code was than updated to look at the sign of these angles and display the &ldquo;up&rdquo;, &ldquo;down&rdquo;, &ldquo;left&rdquo; and &ldquo;right&rdquo; strings, as appropriate.</p>\n\n<p>When using the <a href=\"https://en.wikipedia.org/wiki/Dot_product\">dot product</a> to calculate angles, the angles always come out as positive, but we can look at the individual components of the acceleration vector to determine the orientation:</p>\n\n<ul>\n <li>the X axis is the forward-backward axis, so if the X component of the vector  is positive, the &ldquo;down&rdquo; direction is pointing up, so the vehicle is pitched  upwards</li>\n <li>the Y axis is the left-right axis, so if the Y component of the vector is  positive, the &ldquo;down&rdquo; direction is pointing to the right, so the vehicle is  rolling to the right.</li></ul>\n\n<p>The updated code is shown below, <a href=\"/2017/12/arduino-inclinometer.html#calculating-pitch-and-roll\">this</a> section shows how the angles are actually calculated.</p>\n\n<div class=\"brush: C\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kt\">float</span> <span class=\"nf\">calculate_pitch</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">down</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">};</span>\n    <span class=\"kt\">float</span> <span class=\"n\">pitch_dir</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">};</span>\n    <span class=\"n\">vnormalize</span><span class=\"p\">(</span><span class=\"n\">pitch_dir</span><span class=\"p\">,</span> <span class=\"n\">pitch_dir</span><span class=\"p\">);</span>\n    <span class=\"kt\">float</span> <span class=\"n\">pitch</span> <span class=\"o\">=</span> <span class=\"n\">vdot</span><span class=\"p\">(</span><span class=\"n\">down</span><span class=\"p\">,</span> <span class=\"n\">pitch_dir</span><span class=\"p\">);</span>\n    <span class=\"kt\">float</span> <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">));</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pitch_dir</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">angle</span><span class=\"p\">;</span>                   <span class=\"c1\">// up</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">angle</span><span class=\"p\">;</span>                  <span class=\"c1\">// down</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">float</span> <span class=\"nf\">calculate_roll</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">down</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">};</span>\n    <span class=\"kt\">float</span> <span class=\"n\">roll_dir</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">};</span>\n    <span class=\"n\">vnormalize</span><span class=\"p\">(</span><span class=\"n\">roll_dir</span><span class=\"p\">,</span> <span class=\"n\">roll_dir</span><span class=\"p\">);</span>\n    <span class=\"kt\">float</span> <span class=\"n\">roll</span> <span class=\"o\">=</span> <span class=\"n\">vdot</span><span class=\"p\">(</span><span class=\"n\">down</span><span class=\"p\">,</span> <span class=\"n\">roll_dir</span><span class=\"p\">);</span>\n    <span class=\"kt\">float</span> <span class=\"n\">angle</span> <span class=\"o\">=</span> <span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"n\">roll</span><span class=\"p\">));</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">roll_dir</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"n\">angle</span><span class=\"p\">;</span>                  <span class=\"c1\">// right</span>\n    <span class=\"k\">else</span>\n        <span class=\"k\">return</span> <span class=\"n\">angle</span><span class=\"p\">;</span>                   <span class=\"c1\">// left</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"keep-track-of-the-maximum-pitch-and-roll-angle\">Keep track of the maximum pitch and roll angle</h3>\n\n<p>The unit will keep track of the maximum pitch and roll angles and will show these angles on the display. The angles can be in &ldquo;hold mode&rdquo; when they are not updated (in which case they will blink) and they can also be reset. Pressing the reset button for a short interval will toggle &ldquo;hold mode&rdquo; on and off. Pressing and holding the reset button for about a second will reset the max roll and pitch angles.</p>\n\n<p>Updating the maximum angles is simple, they are stored in the <code>max_pitch</code> and <code>max_roll</code> global variables and are updated in the <code>on_running</code> function based on the current pitch and roll angle (they are only updated if the <code>HOLD_MAX_FLAG</code> is not set):</p>\n\n<div class=\"brush: C\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kt\">float</span> <span class=\"n\">max_roll</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">float</span> <span class=\"n\">max_pitch</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">on_running</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// ... other on_running() code ommited</span>\n    \n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span> <span class=\"n\">IS_FLAG_SET</span><span class=\"p\">(</span><span class=\"n\">HOLD_MAX_FLAG</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_pitch</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">max_pitch</span> <span class=\"o\">=</span> <span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">roll</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_roll</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">max_roll</span> <span class=\"o\">=</span> <span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">roll</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The more interesting part is dealing with the reset button. The reset button is wired to pin 11 on the Arduino, using a pull up resistor. As a side note, I only found out about the internal Arduino pull up resistors after I soldered my own external resistors to the board, if I knew about them earlier it would have saved me the trouble of soldering my own resistors. The reset button is active low, meaning that a <code>digitalRead</code> for the pin will read 0 if the button is pressed and 1 if the button is released.</p>\n\n<p>Handling the reset button is done in the <code>handle_reset_button</code> function, which is called repeatedly as part of the <code>loop</code> function of the Arduino program.</p>\n\n<p>To check if the button has been held down for about one second, the <code>reset_hold_time</code> global variable is incremented by <code>delta_time</code> each time the button is found to be pressed. Each time the button is released, <code>reset_hold_time</code> is set back to 0, so that the reset time is only counted for a single long press of the reset button. When <code>reset_hold_time</code> exceeds <code>HOLD_INTERVAL</code>, the maximum pitch and roll angles are set back to 0. <code>delta_time</code> represents the amount of time passed since the last <code>loop</code> invocation, it is set in the <code>update_timer</code> function.</p>\n\n<p>When the button is released, that is, <code>digitalRead</code> reads a 1, the <code>HOLD_MAX_FLAG</code> is toggled, to enable or disable the update of the maximum roll and pitch angles. Before the flag is toggled, the code checks to see if the button was held down for a short period, by checking the value in <code>reset_hold_time</code>, this prevents accidental presses and helps with debouncing the signal from the button.</p>\n\n<div class=\"brush: C\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#define HOLD_INTERVAL (1000000) </span><span class=\"c1\">// microseconds</span>\n<span class=\"cp\">#define RESET_PIN 11</span>\n<span class=\"kt\">int32_t</span> <span class=\"n\">reset_hold_time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">handle_reset_button</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">digitalRead</span><span class=\"p\">(</span><span class=\"n\">RESET_PIN</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">reset_hold_time</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">HOLD_INTERVAL</span> <span class=\"o\">/</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">reset_hold_time</span> <span class=\"o\">&lt;</span> <span class=\"n\">HOLD_INTERVAL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">TOGGLE_FLAG</span><span class=\"p\">(</span><span class=\"n\">HOLD_MAX_FLAG</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">reset_hold_time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">reset_hold_time</span> <span class=\"o\">+=</span> <span class=\"n\">delta_time</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">reset_hold_time</span> <span class=\"o\">&gt;</span> <span class=\"n\">HOLD_INTERVAL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">max_pitch</span> <span class=\"o\">=</span> <span class=\"n\">max_roll</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n        <span class=\"n\">CLR_FLAG</span><span class=\"p\">(</span><span class=\"n\">HOLD_MAX_FLAG</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"on-demand-calibration\">On demand calibration</h3>\n\n<p>The inclinometer unit can be installed in any position inside a vehicle and can determine its own orientation. This simplifies the installation process, as the alternative would have been to install the accelerometer unit aligned with the forward direction of the car. In the first version of the software, the unit would determine its own orientation every time it is powered up, however this requires the vehicle to be on flat ground when the unit is powered up and this is not always possible.</p>\n\n<p>To avoid this situation, the new software will save the orientation matrix to EEPROM and restore it at power up. The unit will only enter calibration when the calibrate button is held down. The calibrate button is wired to pin 12 on the Arduino Nano board with a pull up resistor, just like the reset button. A similar technique is used to make sure the button is held down for one second before the unit enters calibration mode. The <code>handle_calibrate_button</code> works like the <code>handle_reset_button</code> function, but, since the calibrate button has no function when it is held down briefly, the resulting code is simpler.</p>\n\n<p>To enter calibration mode, the function will set the state of the program to <code>STATE_ACQUIRE_DOWN_DIRECTION</code>, which is the first calibration step, and will also reset the internal state of the program.</p>\n\n<div class=\"brush: C\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#define HOLD_INTERVAL (1000000) </span><span class=\"c1\">// microseconds</span>\n<span class=\"cp\">#define CALIBRATE_PIN 12</span>\n<span class=\"kt\">int32_t</span> <span class=\"n\">calibrate_hold_time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">handle_calibrate_button</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">digitalRead</span><span class=\"p\">(</span><span class=\"n\">CALIBRATE_PIN</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">calibrate_hold_time</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">calibrate_hold_time</span> <span class=\"o\">+=</span> <span class=\"n\">delta_time</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">calibrate_hold_time</span> <span class=\"o\">&gt;</span> <span class=\"n\">HOLD_INTERVAL</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">SET_STATE</span><span class=\"p\">(</span><span class=\"n\">STATE_ACQUIRE_DOWN_DIRECTION</span><span class=\"p\">);</span>\n        <span class=\"c1\">// reset the Z-Axis so it is acquired again</span>\n        <span class=\"n\">vzero</span><span class=\"p\">(</span><span class=\"n\">orientation</span><span class=\"p\">.</span><span class=\"n\">zaxis</span><span class=\"p\">);</span>\n        <span class=\"c1\">// Clear all state flags</span>\n        <span class=\"n\">CLR_FLAG</span><span class=\"p\">(</span><span class=\"n\">HOLD_MAX_FLAG</span><span class=\"p\">);</span>\n        <span class=\"n\">CLR_FLAG</span><span class=\"p\">(</span><span class=\"n\">PITCH_WARN_FLAG</span><span class=\"p\">);</span>\n        <span class=\"n\">CLR_FLAG</span><span class=\"p\">(</span><span class=\"n\">ROLL_WARN_FLAG</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The calibration data are the <code>xaxis</code>, <code>yaxis</code> and <code>zaxis</code> vectors determined from the calibration. These are saved to EEPROM at the end of calibration and restored when the unit is powered up. To prevent against data corruption, for example, when the unit looses power while writing new calibration data to EEPROM, the data is protected by a 16bit CRC checksum, and will only be used if it is valid.</p>\n\n<div class=\"brush: C\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#define EEPROM_CALIBRATION_ADDRESS (0)</span>\n\n<span class=\"k\">struct</span> <span class=\"n\">orientation_t</span> <span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">xaxis</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n    <span class=\"kt\">float</span> <span class=\"n\">yaxis</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n    <span class=\"kt\">float</span> <span class=\"n\">zaxis</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n<span class=\"p\">}</span> <span class=\"n\">orientation</span><span class=\"p\">;</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">save_calibration_to_eeprom</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">uint16_t</span> <span class=\"n\">crc</span> <span class=\"o\">=</span> <span class=\"n\">calculate_crc</span><span class=\"p\">((</span><span class=\"kt\">uint8_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"o\">&amp;</span><span class=\"n\">orientation</span><span class=\"p\">),</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">orientation</span><span class=\"p\">));</span>\n    <span class=\"n\">EEPROM</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">EEPROM_CALIBRATION_ADDRESS</span><span class=\"p\">,</span> <span class=\"n\">orientation</span><span class=\"p\">);</span>\n    <span class=\"n\">EEPROM</span><span class=\"p\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">EEPROM_CALIBRATION_ADDRESS</span> <span class=\"o\">+</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">orientation</span><span class=\"p\">),</span> <span class=\"n\">crc</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">restore_calibration_from_eeprom</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">uint16_t</span> <span class=\"n\">stored_crc</span><span class=\"p\">;</span>\n    <span class=\"n\">EEPROM</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">EEPROM_CALIBRATION_ADDRESS</span><span class=\"p\">,</span> <span class=\"n\">orientation</span><span class=\"p\">);</span>\n    <span class=\"n\">EEPROM</span><span class=\"p\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">EEPROM_CALIBRATION_ADDRESS</span> <span class=\"o\">+</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">orientation</span><span class=\"p\">),</span> <span class=\"n\">stored_crc</span><span class=\"p\">);</span>\n    <span class=\"kt\">uint16_t</span> <span class=\"n\">crc</span> <span class=\"o\">=</span> <span class=\"n\">calculate_crc</span><span class=\"p\">((</span><span class=\"kt\">uint8_t</span><span class=\"o\">*</span><span class=\"p\">)(</span><span class=\"o\">&amp;</span><span class=\"n\">orientation</span><span class=\"p\">),</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">orientation</span><span class=\"p\">));</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">crc</span> <span class=\"o\">==</span> <span class=\"n\">stored_crc</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">SET_STATE</span><span class=\"p\">(</span><span class=\"n\">STATE_RUNNING</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">vzero</span><span class=\"p\">(</span><span class=\"n\">orientation</span><span class=\"p\">.</span><span class=\"n\">zaxis</span><span class=\"p\">);</span> <span class=\"c1\">// reset the Z-Axis so it is acquired again</span>\n        <span class=\"n\">SET_STATE</span><span class=\"p\">(</span><span class=\"n\">STATE_ACQUIRE_DOWN_DIRECTION</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<div class=\"figure\"><img src=\"/img/a011/workbench.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This has been an interesting project for me. As an experienced software engineer, the software itself was not a big challenge, but soldering everything together and preparing the enclosure was something that I did for the first time. You can see that from the quality of my soldering and the enclosure cutouts, but I did gain some experience from doing it. On the software side, I was pleasantly surprised by the amount and complexity of the code that the Arduino environment can handle. When I first contemplated the project I thought, I would have to leave out the nice Arduino libraries and program everything as low level AVR code to access the hardware registers and use fixed point math for the vector and matrix calculations. However, this was not the case: the entire program is written using high level libraries and functions, which is very nice.</p>\n\n<p>The source code for this project is available on <a href=\"https://github.com/alex-hhh/Arduino_Inclinometer\">GitHub</a>, a <a href=\"/2017/12/arduino-inclinometer.html\">previous blog post</a> describes the parts list and hardware connections, the required Arduino libraries and how to build the software.</p>") (u . "/img/a011/thumb.png")) ((? . 1) f post (u . "Equipment Usage and Costs") (? . 1) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/01/equipment-usage-and-costs.html" . windows) (u . "/2018/01/equipment-usage-and-costs.html") (u . "2018-01-14T20:23:19") (? . 5) (? . 17) (c (u . "training data analysis")) (u . "\n<p>I paid $600 for my Garmin FR920 GPS watch, and since I got it, I bought six pairs of running shoes totaling $1124 and went to the swimming pool 153 times: at approximately $5 for a swim session, this is $765 spend on swimming. While the FR920 cost more than a single pair of running shoes or a single swimming session, it actually comes out as cheaper to own than the previous two.</p>") #t (u . "\n<p>I paid $600 for my Garmin FR920 GPS watch, and since I got it, I bought six pairs of running shoes totaling $1124 and went to the swimming pool 153 times: at approximately $5 for a swim session, this is $765 spend on swimming. While the FR920 cost more than a single pair of running shoes or a single swimming session, it actually comes out as cheaper to own than the previous two.</p>\n<!-- more-->\n\n<p>The <a href=\"/2017/09/introducing-activitylog2.html\">ActivityLog2</a> application can track equipment used in each training session, such as running shoes, GPS watch or bike. I use this feature mostly to track service reminders: when to replace running shoes or the chain on my bikes, but once in a while I export the usage data as a CSV file, load it up in Google Sheets and calculate <em>cost/use</em> values for the equipment I use. The <strong>cost/use</strong> metric is simply the cost of the equipment divided by the number of uses. I think this is a more relevant metric than simply the cost, since a piece of equipment that I use a lot is more worth while than a cheaper one that I don&rsquo;t use much.</p>\n\n<p>Using the cost/use metric, my <strong>Garmin FR920</strong> is the least expensive piece of equipment I own: I purchased one in November 2014 for $600 and I used it 772 times on running, swimming, biking and hiking sessions. The cost for each session comes out to be just $0.78. I plan to use my FR920 for at least another 6 months and, in that time, the cost/use will come down but at the same time, I will get another pair of running shoes and spend a lot more on swimming. The table below summarizes the cost/use for the FR920 versus running shoes or swimming sessions :</p>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td>Equipment</td>\n    <td style=\"text-align: right\">Cost / Session</td></tr></thead>\n  <tbody>\n   <tr>\n    <td>Garmin FR920</td>\n    <td style=\"text-align: right\">$0.78</td></tr>\n   <tr>\n    <td>Running Shoes</td>\n    <td style=\"text-align: right\">$2.66</td></tr>\n   <tr>\n    <td>Swimming Session</td>\n    <td style=\"text-align: right\">$5.00</td></tr></tbody></table></div>\n\n<p>I buy a new pair of <strong>running shoes</strong> after I use the old pair for about 750 - 800 km . Some time ago, I noticed that my knees started hurting once I ran more than 800 km on a pair of shoes, so now I try to replace them at 750 km. Looking at 11 pair of shoes I went through in the past 7 years, I pay on average $173 for a pair and use it about 65 times: the average cost for a running session is about $2.66.</p>\n\n<p>The <strong>bikes</strong> are probably the most expensive item even using the <em>cost/use</em> metric: my mid-range road bike (the <em>Azuri Imperia</em>), which I had for 7 years, still cost me $5.99. My TT bike (a <em>Specialized Shiv</em>) still cost $63.49, although I only had it for less than 2 years and used it only 63 times. Also, bikes are the only piece of equipment that I service regularly, so there is an additional cost of owning them, this cost is not included in these calculations. <strong>Power meters</strong> are another piece of equipment with a high <em>cost/use</em>, although less so than the bikes, probably because they cost less.</p>\n\n<p>The full usage and costs are listed below. <em>Azuri Imperia</em> and <em>Specialized Shiv</em> are my bikes (road and TT respectively), the <em>Vector</em> and <em>Vector 2</em> are power meters, one for each bike. The <em>Brooks</em> set of &ldquo;equipment&rdquo; are all running shoes. <em>Tacx Vortex</em> is a bike trainer. The rest of the equipment names should be self explanatory. The &ldquo;Retired?&rdquo; column shows equipment which I no longer use, for these the cost / use and cost / hour will remain fixed. For each equipment that is not retired, the cost / use and cost / hour will come down as the use count and hours used increase while the cost stays the same.</p>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td>Name</td>\n    <td style=\"text-align: center\">Retired?</td>\n    <td style=\"text-align: right\">Use Count</td>\n    <td style=\"text-align: right\">Hours Used</td>\n    <td style=\"text-align: right\">Cost (AUD)</td>\n    <td style=\"text-align: right\">Cost/Use</td>\n    <td style=\"text-align: right\">Cost/Hour</td></tr></thead>\n  <tbody>\n   <tr>\n    <td>Azuri Imperia</td>\n    <td style=\"text-align: center\"></td>\n    <td style=\"text-align: right\">375</td>\n    <td style=\"text-align: right\">558</td>\n    <td style=\"text-align: right\">$2,245.00</td>\n    <td style=\"text-align: right\">$5.99</td>\n    <td style=\"text-align: right\">$4.02</td></tr>\n   <tr>\n    <td>Specialized Shiv</td>\n    <td style=\"text-align: center\"></td>\n    <td style=\"text-align: right\">63</td>\n    <td style=\"text-align: right\">99</td>\n    <td style=\"text-align: right\">$4,000.00</td>\n    <td style=\"text-align: right\">$63.49</td>\n    <td style=\"text-align: right\">$40.33</td></tr>\n   <tr>\n    <td>Bike speed cadence</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">287</td>\n    <td style=\"text-align: right\">449</td>\n    <td style=\"text-align: right\">$100.00</td>\n    <td style=\"text-align: right\">$0.35</td>\n    <td style=\"text-align: right\">$0.22</td></tr>\n   <tr>\n    <td>FR&ndash;310 Footpod</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">285</td>\n    <td style=\"text-align: right\">309</td>\n    <td style=\"text-align: right\">$100.00</td>\n    <td style=\"text-align: right\">$0.35</td>\n    <td style=\"text-align: right\">$0.32</td></tr>\n   <tr>\n    <td>FR&ndash;310</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">651</td>\n    <td style=\"text-align: right\">852</td>\n    <td style=\"text-align: right\">$500.00</td>\n    <td style=\"text-align: right\">$0.77</td>\n    <td style=\"text-align: right\">$0.59</td></tr>\n   <tr>\n    <td>FR&ndash;920</td>\n    <td style=\"text-align: center\"></td>\n    <td style=\"text-align: right\">772</td>\n    <td style=\"text-align: right\">811</td>\n    <td style=\"text-align: right\">$600.00</td>\n    <td style=\"text-align: right\">$0.78</td>\n    <td style=\"text-align: right\">$0.74</td></tr>\n   <tr>\n    <td>Garmin Swim</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">167</td>\n    <td style=\"text-align: right\">155</td>\n    <td style=\"text-align: right\">$180.00</td>\n    <td style=\"text-align: right\">$1.08</td>\n    <td style=\"text-align: right\">$1.16</td></tr>\n   <tr>\n    <td>Vector power meter</td>\n    <td style=\"text-align: center\"></td>\n    <td style=\"text-align: right\">151</td>\n    <td style=\"text-align: right\">186</td>\n    <td style=\"text-align: right\">$1,200.00</td>\n    <td style=\"text-align: right\">$7.95</td>\n    <td style=\"text-align: right\">$6.45</td></tr>\n   <tr>\n    <td>Vector 2 power meter</td>\n    <td style=\"text-align: center\"></td>\n    <td style=\"text-align: right\">63</td>\n    <td style=\"text-align: right\">99</td>\n    <td style=\"text-align: right\">$1,800.00</td>\n    <td style=\"text-align: right\">$28.57</td>\n    <td style=\"text-align: right\">$18.15</td></tr>\n   <tr>\n    <td>Tacx Vortex trainer</td>\n    <td style=\"text-align: center\"></td>\n    <td style=\"text-align: right\">27</td>\n    <td style=\"text-align: right\">21</td>\n    <td style=\"text-align: right\">$550.00</td>\n    <td style=\"text-align: right\">$20.37</td>\n    <td style=\"text-align: right\">$26.52</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">69</td>\n    <td style=\"text-align: right\">72</td>\n    <td style=\"text-align: right\">$169.00</td>\n    <td style=\"text-align: right\">$2.45</td>\n    <td style=\"text-align: right\">$2.33</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">66</td>\n    <td style=\"text-align: right\">69</td>\n    <td style=\"text-align: right\">$170.00</td>\n    <td style=\"text-align: right\">$2.58</td>\n    <td style=\"text-align: right\">$2.46</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">73</td>\n    <td style=\"text-align: right\">75</td>\n    <td style=\"text-align: right\">$170.00</td>\n    <td style=\"text-align: right\">$2.33</td>\n    <td style=\"text-align: right\">$2.28</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">52</td>\n    <td style=\"text-align: right\">73</td>\n    <td style=\"text-align: right\">$170.00</td>\n    <td style=\"text-align: right\">$3.27</td>\n    <td style=\"text-align: right\">$2.33</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">76</td>\n    <td style=\"text-align: right\">81</td>\n    <td style=\"text-align: right\">$100.00</td>\n    <td style=\"text-align: right\">$1.32</td>\n    <td style=\"text-align: right\">$1.24</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">75</td>\n    <td style=\"text-align: right\">69</td>\n    <td style=\"text-align: right\">$170.00</td>\n    <td style=\"text-align: right\">$2.27</td>\n    <td style=\"text-align: right\">$2.45</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">76</td>\n    <td style=\"text-align: right\">68</td>\n    <td style=\"text-align: right\">$179.00</td>\n    <td style=\"text-align: right\">$2.36</td>\n    <td style=\"text-align: right\">$2.65</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">72</td>\n    <td style=\"text-align: right\">66</td>\n    <td style=\"text-align: right\">$179.00</td>\n    <td style=\"text-align: right\">$2.49</td>\n    <td style=\"text-align: right\">$2.72</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">73</td>\n    <td style=\"text-align: right\">69</td>\n    <td style=\"text-align: right\">$189.00</td>\n    <td style=\"text-align: right\">$2.59</td>\n    <td style=\"text-align: right\">$2.72</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\">yes</td>\n    <td style=\"text-align: right\">51</td>\n    <td style=\"text-align: right\">74</td>\n    <td style=\"text-align: right\">$187.00</td>\n    <td style=\"text-align: right\">$3.67</td>\n    <td style=\"text-align: right\">$2.53</td></tr>\n   <tr>\n    <td>Brooks running shoes</td>\n    <td style=\"text-align: center\"></td>\n    <td style=\"text-align: right\">33</td>\n    <td style=\"text-align: right\">29</td>\n    <td style=\"text-align: right\">$220.00</td>\n    <td style=\"text-align: right\">$6.67</td>\n    <td style=\"text-align: right\">$7.70</td></tr></tbody></table></div>") (u . "/img/a008/thumb.png")) ((? . 2) f post (u . "Racket Data Frame Package") (? . 2) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/08/racket-data-frame.html" . windows) (u . "/2018/08/racket-data-frame.html") (u . "2018-08-05T06:59:45") (? . 10) (? . 8) (c (u . "racket")) (u . "\n<p>A Racket implementation of a data frame structure, which allows efficient manipulation of data that is organized in rows and columns. It was originally written as part of the <a href=\"https://github.com/alex-hhh/ActivityLog2\">ActivityLog2</a> project, than moved into its own Racket package.</p>") #t (u . "\n<p>A Racket implementation of a data frame structure, which allows efficient manipulation of data that is organized in rows and columns. It was originally written as part of the <a href=\"https://github.com/alex-hhh/ActivityLog2\">ActivityLog2</a> project, than moved into its own Racket package.</p>\n<!-- more-->\n\n<p>You can install the package using <code>raco pkg install data-frame</code>, browse the <a href=\"http://docs.racket-lang.org/data-frame/index.html\">reference documentation</a> or visit the project page on <a href=\"https://github.com/alex-hhh/data-frame\">GitHub</a>. The examples below illustrate some more complex things that can be done with this package.</p>\n\n<p>The data-frame package was developed to help analyzing fitness data recorded by Garmin devices. A fitness device, such as a bike computer or a running watch, will usually record data at 1 second interval. Each recording will contain information about the speed, GPS position, heart rate, cadence, power and several other parameters. A 2 hour bike ride will contain 7200 such data points and each data point will contain up to about 40 measurements. Someone serious about training will record more than 200 such activities each year. The size of this data set requires some careful thought about how to keep data in memory so it can be analyzed and visualized efficiently, and the data frame representation came out of this requirement.</p>\n\n<h2 id=\"data-frame-object-overview\">Data frame object overview</h2>\n\n<p>The data in the data-frame object can be viewed as a 2 dimensional table with rows and columns. Each column is called a &ldquo;series&rdquo;, which consists of a name and the actual data. The package contains operations for selecting subsets of the data, both on rows and columns, efficient search and indexing, plus helper functions to calculate statistics values and generate various plots.</p>\n\n<p>The following examples are from the ActivityLog2 application and all use a data frame loaded for a session, however data can also be loaded into the data frame from SQL databases using <code>df-read/sql</code> or from CSV files using <code>df-read/csv</code>. The following prelude is assumed, which will load the data frame for session id 1816 from the default database:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"s2\">\"al-interactive.rkt\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">sid</span> <span class=\"mi\">1816</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">df</span> <span class=\"p\">(</span><span class=\"n\">sid-&gt;df</span> <span class=\"n\">sid</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>A simple way to get an overview of the contents of the data frame is the <code>df-describe</code> function, which shows all series in a data frame and some statistics values about each of them:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-describe</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">data-frame:</span> <span class=\"mi\">39</span> <span class=\"n\">series</span><span class=\"o\">,</span> <span class=\"mi\">4882</span> <span class=\"n\">items</span>\n<span class=\"n\">properties:</span>\n  <span class=\"n\">is-lap-swim?</span>  <span class=\"no\">#f</span>\n  <span class=\"n\">session-id</span>    <span class=\"mi\">1816</span>\n  <span class=\"n\">sport</span>         <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n  <span class=\"n\">stop-points</span>   <span class=\"p\">(</span><span class=\"mi\">1480802649</span> <span class=\"mi\">1480803106</span> <span class=\"mi\">1480804370</span> <span class=\"mi\">1480805370</span><span class=\"p\">)</span>\n  <span class=\"n\">weight-series</span> <span class=\"n\">timer</span>\n  <span class=\"n\">laps</span>          <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mi\">1480802483</span> <span class=\"mi\">1480802896</span> <span class=\"mi\">1480803311</span> <span class=\"mi\">1480803693</span> <span class=\"mi\">1480804096</span> <span class=\"mi\">14808</span>\n<span class=\"ss\">series:</span>\n              <span class=\"ss\">NAs</span>           <span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._min))\" style=\"color: inherit\">min</a></span>           <span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._max))\" style=\"color: inherit\">max</a></span>          <span class=\"ss\">mean</span>        <span class=\"ss\">stddev</span>\n  <span class=\"ss\">alt</span>           <span class=\"mi\">0</span>          <span class=\"mf\">-5.4</span>          <span class=\"mf\">38.8</span>         <span class=\"mf\">10.89</span>          <span class=\"mf\">9.21</span>\n  <span class=\"ss\">cad</span>          <span class=\"mi\">32</span>             <span class=\"mi\">0</span>           <span class=\"mi\">114</span>         <span class=\"mf\">73.21</span>         <span class=\"mf\">23.86</span>\n  <span class=\"ss\">calt</span>          <span class=\"mi\">0</span>           <span class=\"mf\">0.1</span>         <span class=\"mf\">44.05</span>         <span class=\"mf\">16.66</span>          <span class=\"mf\">9.28</span>\n  <span class=\"ss\">distance</span>      <span class=\"mi\">0</span>             <span class=\"mi\">0</span>         <span class=\"mf\">36.17</span>         <span class=\"mf\">18.42</span>         <span class=\"mf\">10.54</span>\n  <span class=\"ss\">dst</span>           <span class=\"mi\">0</span>           <span class=\"mf\">0.9</span>      <span class=\"mf\">36171.06</span>       <span class=\"mf\">18417.2</span>      <span class=\"mf\">10535.92</span>\n  <span class=\"ss\">elapsed</span>       <span class=\"mi\">0</span>           <span class=\"mf\">0.5</span>        <span class=\"mf\">4950.5</span>       <span class=\"mf\">2491.93</span>       <span class=\"mf\">1426.36</span>\n  <span class=\"ss\">grade</span>        <span class=\"mi\">10</span>        <span class=\"mf\">-38.38</span>         <span class=\"mf\">18.26</span>          <span class=\"mf\">0.45</span>          <span class=\"mf\">3.19</span>\n  <span class=\"ss\">hr</span>            <span class=\"mi\">0</span>            <span class=\"mi\">91</span>           <span class=\"mi\">169</span>        <span class=\"mf\">144.02</span>         <span class=\"mf\">12.28</span>\n\n  <span class=\"ss\">###</span> <span class=\"ss\">MANY</span> <span class=\"ss\">OTHER</span> <span class=\"ss\">SERIES</span> <span class=\"ss\">OMITTED</span> <span class=\"ss\">###</span>\n\n  <span class=\"ss\">timestamp</span>     <span class=\"mi\">0</span>  <span class=\"mf\">1480802483.5</span>  <span class=\"mf\">1480807433.5</span> <span class=\"mf\">1480804974.93</span>       <span class=\"mf\">1426.36</span>\n<span class=\"ss\">scratch.rkt&gt;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"working-with-properties\">Working with properties</h2>\n\n<p>A data frame object can store properties, which are simple key value pairs. In ActivityLog2 these are used to store such things as the sport type, session it and lap timestamps, but they can be used to store any data about the series in the data frame</p>\n\n<ul>\n <li><code>get-property-names</code> &mdash; returns a list of property names stored in the  object</li>\n <li><code>put-property</code>, <code>get-property</code> &mdash; are used to set and retrieve properties</li></ul>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-property-names</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"ss\">is-lap-swim?</span> <span class=\"ss\">session-id</span> <span class=\"ss\">sport</span> <span class=\"ss\">stop-points</span> <span class=\"ss\">weight-series</span> <span class=\"ss\">laps</span><span class=\"p\">)</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-get-property</span> <span class=\"n\">df</span> <span class=\"o\">'</span><span class=\"ss\">session-id</span><span class=\"p\">)</span>\n<span class=\"mi\">1816</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-put-property</span> <span class=\"n\">df</span> <span class=\"o\">'</span><span class=\"ss\">test-property</span> <span class=\"o\">'</span><span class=\"ss\">hello</span><span class=\"p\">)</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-get-property</span> <span class=\"n\">df</span> <span class=\"o\">'</span><span class=\"ss\">test-property</span><span class=\"p\">)</span>\n<span class=\"o\">'</span><span class=\"ss\">hello</span>\n<span class=\"n\">scratch.rkt&gt;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"working-with-series-names\">Working with series names</h2>\n\n<p>The following functions can be used to get information about what series are available in the data frame:</p>\n\n<ul>\n <li><code>df-series-names</code> &mdash; returns a list of all the series names</li>\n <li><code>df-contains?</code> &mdash; returns #t if the data frame contains <em>all</em> of the specified  series</li>\n <li><code>df-contains/any?</code> &mdash; returns #t if the data frame contains <em>any</em> of the  specified series</li>\n <li><code>df-row-count</code> &mdash; returns the number of elements in each series of the data  frame (all series have the same number of elements)</li></ul>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-series-names</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"timer\"</span> <span class=\"s2\">\"lpsmth\"</span> <span class=\"s2\">\"rpppa\"</span> <span class=\"s2\">\"rpps\"</span> <span class=\"s2\">\"rppa\"</span> <span class=\"s2\">\"hr\"</span> <span class=\"s2\">\"lon\"</span> <span class=\"s2\">\"lteff\"</span>\n  <span class=\"s2\">\"calt\"</span> <span class=\"s2\">\"lat\"</span> <span class=\"s2\">\"lppps\"</span> <span class=\"s2\">\"lppa\"</span> <span class=\"s2\">\"lppe\"</span> <span class=\"s2\">\"elapsed\"</span> <span class=\"s2\">\"pwr\"</span> <span class=\"s2\">\"dst\"</span>\n  <span class=\"s2\">\"rpppe\"</span> <span class=\"s2\">\"grade\"</span> <span class=\"s2\">\"hr-zone\"</span> <span class=\"s2\">\"lpps\"</span> <span class=\"s2\">\"lpppe\"</span> <span class=\"s2\">\"stride\"</span> <span class=\"s2\">\"spd\"</span>\n  <span class=\"s2\">\"speed\"</span> <span class=\"s2\">\"distance\"</span> <span class=\"s2\">\"pwr-zone\"</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"s2\">\"alt\"</span> <span class=\"s2\">\"rpsmth\"</span>\n  <span class=\"s2\">\"lrbal\"</span> <span class=\"s2\">\"pace\"</span> <span class=\"s2\">\"cad\"</span> <span class=\"s2\">\"rteff\"</span> <span class=\"s2\">\"rppe\"</span> <span class=\"s2\">\"rpco\"</span> <span class=\"s2\">\"rppps\"</span> <span class=\"s2\">\"hr-pct\"</span>\n  <span class=\"s2\">\"lpppa\"</span> <span class=\"s2\">\"lpco\"</span><span class=\"p\">)</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-contains?</span> <span class=\"n\">df</span> <span class=\"s2\">\"timer\"</span><span class=\"p\">)</span>\n<span class=\"no\">#t</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-contains?</span> <span class=\"n\">df</span> <span class=\"s2\">\"lat\"</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">)</span>\n<span class=\"no\">#t</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-contains?</span> <span class=\"n\">df</span> <span class=\"s2\">\"non-existent\"</span><span class=\"p\">)</span>\n<span class=\"no\">#f</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-contains?</span> <span class=\"n\">df</span> <span class=\"s2\">\"timer\"</span> <span class=\"s2\">\"non-existent\"</span><span class=\"p\">)</span>\n<span class=\"no\">#f</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-contains/any?</span> <span class=\"n\">df</span> <span class=\"s2\">\"timer\"</span> <span class=\"s2\">\"non-existent\"</span><span class=\"p\">)</span>\n<span class=\"no\">#t</span>\n<span class=\"n\">scratch.rkt&gt;</span>  <span class=\"p\">(</span><span class=\"n\">df-row-count</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"mi\">4882</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"accessing-the-data-using-df-select-and-df-select\">Accessing the data using <code>df-select</code> and <code>df-select*</code></h2>\n\n<p>The <code>df-select</code> and <code>df-select*</code> functions can be used to retrieve data from a data frame. The simplest method, is to just ask for the entire series. The following retrieves the entire set of heart rate values:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-select</span> <span class=\"n\">df</span> <span class=\"s2\">\"hr\"</span><span class=\"p\">)</span>\n<span class=\"o\">'#</span><span class=\"p\">(</span><span class=\"mf\">89.0</span> <span class=\"mf\">93.0</span> <span class=\"mf\">94.0</span> <span class=\"mf\">94.0</span> <span class=\"mf\">94.0</span> <span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Data can also be filtered. For example, the following retrieves only heart rate values greater than 150 BPM:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-select</span> <span class=\"n\">df</span> <span class=\"s2\">\"hr\"</span> <span class=\"kd\">#:filter</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">hr</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">hr</span> <span class=\"mi\">150</span><span class=\"p\">)))</span>\n<span class=\"o\">'#</span><span class=\"p\">(</span><span class=\"mf\">151.0</span> <span class=\"mf\">152.0</span> <span class=\"mf\">152.0</span> <span class=\"mf\">151.0</span> <span class=\"mf\">152.0</span> <span class=\"mf\">152.0</span> <span class=\"mf\">152.0</span> <span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Finally, a subset of the data points can be retrieved by specifying start and end indexes (see below on how to retrieve useful indexes):</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-select</span> <span class=\"n\">df</span> <span class=\"s2\">\"hr\"</span> <span class=\"kd\">#:start</span> <span class=\"mi\">100</span> <span class=\"kd\">#:stop</span> <span class=\"mi\">105</span><span class=\"p\">)</span>\n<span class=\"o\">'#</span><span class=\"p\">(</span><span class=\"mf\">123.0</span> <span class=\"mf\">122.0</span> <span class=\"mf\">123.0</span> <span class=\"mf\">123.0</span> <span class=\"mf\">123.0</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>df-select*</code> function can be used to retrieve data from multiple series. It will return a vector containing a vector for each data point selected. For example, the code below can be used to retrieve the GPS track from a data series:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-select*</span> <span class=\"n\">df</span> <span class=\"s2\">\"lat\"</span> <span class=\"s2\">\"lon\"</span> <span class=\"kd\">#:filter</span> <span class=\"n\">valid-only</span><span class=\"p\">)</span>\n<span class=\"o\">'#</span><span class=\"p\">(</span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-22.475327365100384</span> <span class=\"mf\">118.560850918293</span><span class=\"p\">)</span>\n   <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-22.475248826667666</span> <span class=\"mf\">118.5613826662302</span><span class=\"p\">)</span>\n   <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-22.475329376757145</span> <span class=\"mf\">118.56146103702486</span><span class=\"p\">)</span>\n   <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-22.475371956825256</span> <span class=\"mf\">118.56151258572936</span><span class=\"p\">)</span>\n   <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-22.475371873006225</span> <span class=\"mf\">118.56151392683387</span><span class=\"p\">)</span>\n   <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-22.475372292101383</span> <span class=\"mf\">118.56153203174472</span><span class=\"p\">)</span>\n   <span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"find-positions-using-df-index-of-and-df-index-of\">Find positions using <code>df-index-of</code> and <code>df-index-of*</code></h2>\n\n<p>The <code>df-index-of</code> and <code>df-index-of*</code> functions can be used to find the position where a value is stored in a data series &mdash; the data series will have to make sorted for this to work using <code>df-set-sorted</code>. <code>df-index-of</code> retrieves a single position, while <code>df-index-of**</code> retrieves multiple values at once.</p>\n\n<p>The <code>laps</code> property contains a list of timestamps for the start of each lap in the activity:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-get-property</span> <span class=\"n\">df</span> <span class=\"o\">'</span><span class=\"ss\">laps</span><span class=\"p\">)</span>\n<span class=\"o\">'#</span><span class=\"p\">(</span><span class=\"mi\">1480802483</span> <span class=\"mi\">1480802896</span> <span class=\"mi\">1480803311</span> <span class=\"mi\">1480803693</span> <span class=\"mi\">1480804096</span> <span class=\"mi\">1480804492</span>\n   <span class=\"mi\">1480804870</span> <span class=\"mi\">1480805324</span> <span class=\"mi\">1480805750</span> <span class=\"mi\">1480806117</span> <span class=\"mi\">1480806508</span> <span class=\"mi\">1480806929</span>\n   <span class=\"mi\">1480807412</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Find the position where the second and third laps start:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-index-of</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"mi\">1480802896</span><span class=\"p\">)</span>\n<span class=\"mi\">392</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-index-of</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"mi\">1480803311</span><span class=\"p\">)</span>\n<span class=\"mi\">785</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-index-of*</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"mi\">1480802896</span> <span class=\"mi\">1480803311</span><span class=\"p\">)</span>\n<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">392</span> <span class=\"mi\">785</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Extract heart rate data or the GPS track for the second lap:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-select</span> <span class=\"n\">df</span> <span class=\"s2\">\"hr\"</span> <span class=\"kd\">#:start</span> <span class=\"mi\">392</span> <span class=\"kd\">#:end</span> <span class=\"mi\">785</span><span class=\"p\">)</span>\n<span class=\"o\">'#</span><span class=\"p\">(</span><span class=\"mf\">157.0</span> <span class=\"mf\">157.0</span> <span class=\"mf\">157.0</span> <span class=\"mf\">158.0</span> <span class=\"mf\">158.0</span> <span class=\"mf\">158.0</span> <span class=\"mf\">159.0</span> <span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-select*</span> <span class=\"n\">df</span> <span class=\"s2\">\"lat\"</span> <span class=\"s2\">\"lon\"</span> <span class=\"kd\">#:start</span> <span class=\"mi\">392</span> <span class=\"kd\">#:end</span> <span class=\"mi\">785</span><span class=\"p\">)</span>\n<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.68540868535638</span> <span class=\"mf\">146.59324564039707</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.67952333204448</span> <span class=\"mf\">146.58431304618716</span><span class=\"p\">)</span> <span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The same mechanism can be used to find the positions for distances, or time, etc. For example we could look up in the &ldquo;dst&rdquo; series the positions for the second KM in the activity. The returned positions could be used to retrieve the GPS track for the second KM of the activity:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-index-of*</span> <span class=\"n\">df</span> <span class=\"s2\">\"dst\"</span> <span class=\"mi\">1000</span> <span class=\"mi\">2000</span><span class=\"p\">)</span>\n<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">131</span> <span class=\"mi\">271</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"retrieving-individual-values-using-df-ref-and-df-ref\">Retrieving individual values using <code>df-ref</code> and <code>df-ref*</code></h2>\n\n<p>The <code>df-ref</code> and <code>df-ref*</code> functions can be used to retrieve a single value from an index in a series or in multiple series (<code>df-ref*</code>). Using the examples above, to retrieve the heart rate at the start of the second lap:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-ref</span> <span class=\"n\">df</span> <span class=\"mi\">392</span> <span class=\"s2\">\"hr\"</span><span class=\"p\">)</span>\n<span class=\"mf\">157.0</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And to retrieve the GPS location where the second lap starts:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-ref*</span> <span class=\"n\">df</span> <span class=\"mi\">392</span> <span class=\"s2\">\"lat\"</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">)</span>\n<span class=\"o\">'#</span><span class=\"p\">(</span><span class=\"mf\">-22.475329376757145</span> <span class=\"mf\">118.56146103702486</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><em>NOTE</em> unlike the <code>df-index-of</code>, <code>df-index-of*</code> functions, the <code>df-ref</code> and <code>df-ref*</code> methods have the index specified before the series names.</p>\n\n<h2 id=\"lookups-using-df-lookup-and-df-lookup\">Lookups using <code>df-lookup</code> and <code>df-lookup*</code></h2>\n\n<p>The <code>df-index-of</code> and <code>df-ref</code> functions can be combined into a single function, <code>df-lookup</code>, which can be used to lookup a value in a base series and return the corresponding value in a second series. Continuing the example above, the heart rate for the start of a lap can be retrieved using a single call:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-lookup</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"s2\">\"hr\"</span> <span class=\"mi\">1480802896</span><span class=\"p\">)</span>\n<span class=\"mf\">157.0</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-lookup</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"lat\"</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">)</span> <span class=\"mi\">1480802896</span><span class=\"p\">)</span>\n<span class=\"o\">'#</span><span class=\"p\">(</span><span class=\"mf\">-22.475329376757145</span> <span class=\"mf\">118.56146103702486</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Multiple values can be looked up using <code>df-lookup*</code>, which is analogous to <code>df-index-of*</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-lookup*</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"s2\">\"hr\"</span> <span class=\"mi\">1480802896</span> <span class=\"mi\">1480803311</span><span class=\"p\">)</span>\n<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mf\">157.0</span> <span class=\"mf\">133.0</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"iterating-over-values-using-df-map-df-for-each-and-df-fold\">Iterating over values using <code>df-map</code>, <code>df-for-each</code> and <code>df-fold</code></h2>\n\n<p>The <code>df-map</code>, <code>df-for-each</code> and <code>df-fold</code> functions are similar to the corresponding Racket built-in variants, but operate on the values of series. They take the following parameters:</p>\n\n<ul>\n <li><code>base-series</code> is either a series name or a list of series names. The  iteration will happen over values in these series</li>\n <li><code>init-val</code> (used for <code>fold</code> only) is the initial value passed in</li>\n <li><code>fn</code> is a function called on each value.</li>\n <li><code>#:start</code> and <code>#:stop</code> allow specifying start and end positions for elements  that are iterated.</li></ul>\n\n<p>The call back function can have one or two arguments for <code>df-map</code> and <code>df-for-each</code> and two or three arguments for <code>df-fold</code>.</p>\n\n<p>To iterate over a single value at a time, use a function like <code>(lambda (VAL)\n...)</code>, it will be passed in values from the series packed in a vector. To iterate over adjacent pairs of values, specify <code>(lambda (PREV-VAL VAL) ...)</code>, it will be passed in the current and previous set of values. The variants used for <code>fold</code> use the accumulator as a first argument: <code>(lambda (ACCUM VAL)\n...)</code>, or <code>(lambda (ACCUM PREV-VAL VAL) ...)</code>.</p>\n\n<p>For example, the following function can be used to calculate the work (in Joules) from the time and the power series. The function receives pairs of data points and determines the amount of work (power * delta-time) and adds it to the accumulated value:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">accum-work</span> <span class=\"n\">prev-work</span> <span class=\"n\">prev-val</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n  <span class=\"c1\">;; for the first element, there will be no previous value</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">prev-val</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/match.html#(form._((lib._racket/match..rkt)._match-let))\" style=\"color: inherit\">match-let</a></span> <span class=\"p\">(((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">time1</span> <span class=\"n\">power1</span><span class=\"p\">)</span> <span class=\"n\">prev-val</span><span class=\"p\">)</span>\n                  <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">time2</span> <span class=\"n\">power2</span><span class=\"p\">)</span> <span class=\"n\">val</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">time1</span> <span class=\"n\">power1</span> <span class=\"n\">time2</span> <span class=\"n\">power2</span><span class=\"p\">)</span> <span class=\"c1\">; all values are valid</span>\n            <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">prev-work</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mf\">0.5</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">power1</span> <span class=\"n\">power2</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">time2</span> <span class=\"n\">time1</span><span class=\"p\">)))</span>\n            <span class=\"n\">prev-work</span><span class=\"p\">))</span>\n      <span class=\"n\">prev-work</span><span class=\"p\">))</span>\n\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-fold</span> <span class=\"n\">df</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"timer\"</span> <span class=\"s2\">\"pwr\"</span><span class=\"p\">)</span> <span class=\"mi\">0</span> <span class=\"n\">accum-work</span><span class=\"p\">)</span>\n<span class=\"mf\">796091.0</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"adding-new-series-using-df-add-derived-and-df-add-lazy\">Adding new series using <code>df-add-derived</code> and <code>df-add-lazy</code></h2>\n\n<p>The <code>df-add-derived</code> function can be used to add new series to the data frame, as computations from other series. It is used in session-df for example to create a &ldquo;distance&rdquo; series (which is either in KM or Miles\") from the &ldquo;dst&rdquo; series which is in meters.</p>\n\n<p>The function takes the following parameters:</p>\n\n<ul>\n <li><code>name</code> &mdash; name of the new data series</li>\n <li><code>base-series</code> &mdash; is either a series name or a list of series names. The  iteration will happen over values in these series</li>\n <li><code>value-fn</code> &mdash; function to produce values for the new series it has the same  signature as the function passed to <code>map</code> or <code>for-each</code></li></ul>\n\n<p>The example below, adds the accumulated work at each point in the bike ride:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">current-work</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">add-work</span> <span class=\"n\">prev-val</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n  <span class=\"c1\">;; for the first element, there will be no previous value</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">prev-val</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/match.html#(form._((lib._racket/match..rkt)._match-let))\" style=\"color: inherit\">match-let</a></span> <span class=\"p\">(((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">time1</span> <span class=\"n\">power1</span><span class=\"p\">)</span> <span class=\"n\">prev-val</span><span class=\"p\">)</span>\n                <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">time2</span> <span class=\"n\">power2</span><span class=\"p\">)</span> <span class=\"n\">val</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">time1</span> <span class=\"n\">power1</span> <span class=\"n\">time2</span> <span class=\"n\">power2</span><span class=\"p\">)</span> <span class=\"c1\">; all values are valid</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">current-work</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">current-work</span>\n                              <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mf\">0.5</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">power1</span> <span class=\"n\">power2</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">time2</span> <span class=\"n\">time1</span><span class=\"p\">)))))))</span>\n  <span class=\"n\">current-work</span><span class=\"p\">)</span>\n\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-add-derived</span> <span class=\"n\">df</span> <span class=\"s2\">\"work\"</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"timer\"</span> <span class=\"s2\">\"pwr\"</span><span class=\"p\">)</span> <span class=\"n\">add-work</span><span class=\"p\">)</span>\n<span class=\"n\">scratch.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-select</span> <span class=\"n\">df</span> <span class=\"s2\">\"work\"</span><span class=\"p\">)</span>\n<span class=\"o\">'#</span><span class=\"p\">(</span><span class=\"mi\">0</span> <span class=\"mf\">0.0</span> <span class=\"mf\">0.0</span> <span class=\"mf\">0.0</span> <span class=\"mf\">50.0</span> <span class=\"mf\">241.5</span> <span class=\"mf\">553.0</span> <span class=\"mf\">891.5</span> <span class=\"mf\">1208.0</span> <span class=\"mf\">1439.0</span> <span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span> <span class=\"mf\">796091.0</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>df-add-lazy</code> is the lazy version of the function: it adds a closure to the data frame and the data series will be created the first time it is referenced. Special care needs to be used with this function, especially if it captures local variables, as the environment in which the function runs might not be the same as the non-lazy version.</p>\n\n<h2 id=\"other-functionality\">Other functionality</h2>\n\n<p>The package also contains functions that provide additional functionality:</p>\n\n<ul>\n <li>statistics on data frame objects can be calculated using <code>df-statistics</code> and  <code>df-quantile</code>, these adapt the functions from <code>math/statistics</code> to work  directly with data frames</li>\n <li>histograms and histogram plots can be computed using <code>df-histogram</code> and  <code>histogram-renderer</code> (plus some other functions)</li>\n <li>various helpers for creating scatter plots, see <code>scatter-renderer</code> and  related functions.</li></ul>\n\n<h3 id=\"least-squares-fitting\">Least Squares Fitting</h3>\n\n<p>The <code>df-least-squares-fit</code> function can be used to find a best fit function for some data in the data frame. It can find polynomial, exponential, logarithmic and power functions which closely match an input data set. To use it, you will need to specify the X and Y series names:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">fit</span> <span class=\"p\">(</span><span class=\"n\">df-least-squares-fit</span> <span class=\"n\">df</span> <span class=\"s2\">\"xseries\"</span> <span class=\"s2\">\"yseries\"</span>\n             <span class=\"kd\">#:mode</span> <span class=\"o\">'</span><span class=\"ss\">polynomial</span> <span class=\"kd\">#:polynomial-degree</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The resulting <code>fit</code> object acts as a function, so it can be plotted together with the input data set:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"n\">plot</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span>\n  <span class=\"p\">(</span><span class=\"n\">tick-grid</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">points</span> <span class=\"p\">(</span><span class=\"n\">df-select*</span> <span class=\"n\">df</span> <span class=\"s2\">\"xseries\"</span> <span class=\"s2\">\"yseries\"</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"n\">fit</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Here are some examples of fitting different data sets:</p>\n\n<div id=\"myCarousel\" class=\"carousel slide\" data-ride=\"carousel\"><!-- Indicators--> \n <ol class=\"carousel-indicators\">\n  <li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"2\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"3\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"4\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"5\"></li></ol> <!-- Wrapper for slides--> \n <div class=\"carousel-inner\">\n  <div class=\"item active\"><img src=\"/img/a016/linear-fit.svg\" alt=\"Linear Fit\" /></div> \n  <div class=\"item\"><img src=\"/img/a016/second-fit.svg\" alt=\"Second Degree Polynomial Fit\" /></div> \n  <div class=\"item\"><img src=\"/img/a016/third-fit.svg\" alt=\"Third Degree Polynomial Fit\" /></div> \n  <div class=\"item\"><img src=\"/img/a016/exp-fit.svg\" alt=\"Exponential Fit\" /></div> \n  <div class=\"item\"><img src=\"/img/a016/log-fit.svg\" alt=\"Logarithmic Fit\" /></div> \n  <div class=\"item\"><img src=\"/img/a016/pow-fit.svg\" alt=\"Power Function Fit\" /></div></div> <!-- Left and right controls--> <a class=\"left carousel-control\" href=\"#myCarousel\" data-slide=\"prev\"><span class=\"glyphicon glyphicon-chevron-left\"></span> <span class=\"sr-only\">Previous</span></a> <a class=\"right carousel-control\" href=\"#myCarousel\" data-slide=\"next\"><span class=\"glyphicon glyphicon-chevron-right\"></span> <span class=\"sr-only\">Next</span></a></div>\n\n<h3 id=\"re-working-the-map-widget-demo-to-use-data-frames\">Re-working the map widget demo to use data frames</h3>\n\n<p>The <a href=\"/2018/06/a-racket-gui-widget-to-display-maps-based-on-openstreetmap-tiles.html\">map-widget</a> demo used a small library to load a GPX file containing the track that is shown on the map, but with the <code>data-frame</code> library this is supported directly.</p>\n\n<p>The example below uses the following racket file as the base. This file is evaluated and the rest of the commands can be typed in at the prompt:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket/gui</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">data-frame</span> <span class=\"n\">map-widget</span> <span class=\"n\">mrlib/snip-canvas</span> <span class=\"n\">plot</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">toplevel</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">frame%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Map Demo\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">width</span> <span class=\"mi\">600</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">height</span> <span class=\"mi\">400</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">map-widget%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">toplevel</span> <span class=\"n\">show</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>A GPX file can be loaded in a data frame using <code>df-read/gpx</code>, and the resulting data frame can be inspected using <code>df-describe</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">df-demo.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">df</span> <span class=\"p\">(</span><span class=\"n\">df-read/gpx</span> <span class=\"s2\">\"./tarn-shelf.gpx\"</span><span class=\"p\">))</span>\n<span class=\"n\">df-demo.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">df-describe</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"n\">data-frame:</span> <span class=\"mi\">5</span> <span class=\"n\">columns</span><span class=\"o\">,</span> <span class=\"mi\">16287</span> <span class=\"n\">rows</span>\n<span class=\"n\">properties:</span>\n  <span class=\"n\">waypoints</span> <span class=\"p\">((</span><span class=\"mi\">1485442935</span> <span class=\"mf\">-42.67913189716637</span> <span class=\"mf\">146.58711176365614</span> <span class=\"mf\">1126.94</span> <span class=\"n\">Lap</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"n\">laps</span>      <span class=\"p\">(</span><span class=\"mi\">1485442935</span> <span class=\"mi\">1485444483</span> <span class=\"mi\">1485445975</span> <span class=\"mi\">1485447502</span> <span class=\"mi\">1485449146</span> <span class=\"mi\">1485450523</span>\n  <span class=\"n\">name</span>      <span class=\"n\">Tarn</span> <span class=\"n\">Shelf</span><span class=\"o\">,</span> <span class=\"n\">Mt</span> <span class=\"n\">Field</span> <span class=\"n\">NP</span> <span class=\"p\">(</span><span class=\"n\">Hiking</span><span class=\"p\">)</span>\n<span class=\"n\">series:</span>\n              <span class=\"n\">NAs</span>           <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._min))\" style=\"color: inherit\">min</a></span>           <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._max))\" style=\"color: inherit\">max</a></span>          <span class=\"n\">mean</span>        <span class=\"n\">stddev</span>\n  <span class=\"n\">alt</span>           <span class=\"mi\">0</span>        <span class=\"mf\">854.93</span>       <span class=\"mf\">1278.35</span>       <span class=\"mf\">1089.94</span>        <span class=\"mf\">122.06</span>\n  <span class=\"n\">dst</span>           <span class=\"mi\">0</span>             <span class=\"mi\">0</span>      <span class=\"mf\">14903.55</span>       <span class=\"mf\">7184.98</span>       <span class=\"mf\">4192.82</span>\n  <span class=\"n\">lat</span>           <span class=\"mi\">0</span>        <span class=\"mf\">-42.69</span>        <span class=\"mf\">-42.65</span>        <span class=\"mf\">-42.67</span>          <span class=\"mf\">0.01</span>\n  <span class=\"n\">lon</span>           <span class=\"mi\">0</span>        <span class=\"mf\">146.56</span>        <span class=\"mf\">146.59</span>        <span class=\"mf\">146.58</span>          <span class=\"mf\">0.01</span>\n  <span class=\"n\">timestamp</span>     <span class=\"mi\">0</span>    <span class=\"mi\">1485470647</span>    <span class=\"mi\">1485490648</span>  <span class=\"mf\">1485480878.4</span>       <span class=\"mf\">5984.35</span>\n<span class=\"n\">df-demo.rkt&gt;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The data from the GPX file is loaded into 5 series containing the latitude, longitude, elevation and timestamp for each point. In addition, a distance series, &ldquo;dst&rdquo; is added representing the distance of each point from the start of the track, this will allow us to look up GPS positions based on distance.</p>\n\n<p>The GPX track can be added to the map widget by selecting just the &ldquo;lat&rdquo; and &ldquo;lon&rdquo; using <code>df-select*</code>. You might need to center the map, to move it to the location where the track is using the <code>center-map</code> method of the map widget:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">df-demo.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"n\">add-track</span> <span class=\"p\">(</span><span class=\"n\">df-select*</span> <span class=\"n\">df</span> <span class=\"s2\">\"lat\"</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\">track</span><span class=\"p\">)</span>\n<span class=\"n\">df-demo.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"n\">center-map</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>To put marker locations on the map, we need to find the GPS location of each mile. The <code>df-lookup</code> function can be used to find an element in a target series given a value in a source series, for example, the call <code>(df-lookup df\n\"dst\" '(\"lat\" \"lon) 1609)</code> will return the GPS coordinates for the position at the first mile<sup><a href=\"#2018-08-05-racket-data-frame-footnote-1-definition\" name=\"2018-08-05-racket-data-frame-footnote-1-return\">1</a></sup> in the track. To find all the mile locations we can use a for loop:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">df-demo.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">total-distance</span> <span class=\"p\">(</span><span class=\"n\">df-ref</span> <span class=\"n\">df</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sub1))\" style=\"color: inherit\">sub1</a></span> <span class=\"p\">(</span><span class=\"n\">df-row-count</span> <span class=\"n\">df</span><span class=\"p\">))</span> <span class=\"s2\">\"dst\"</span><span class=\"p\">))</span>\n<span class=\"n\">df-demo.rkt&gt;</span> <span class=\"n\">total-distance</span>\n<span class=\"mf\">14903.545661638052</span>\n<span class=\"n\">df-demo.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">marker-locations</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">mile</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span> <span class=\"mi\">0</span> <span class=\"n\">total-distance</span> <span class=\"mi\">1609</span><span class=\"p\">)])</span>\n      <span class=\"p\">(</span><span class=\"n\">df-lookup</span> <span class=\"n\">df</span> <span class=\"s2\">\"dst\"</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"lat\"</span> <span class=\"s2\">\"lon\"</span><span class=\"p\">)</span> <span class=\"n\">mile</span><span class=\"p\">)))</span>\n<span class=\"n\">df-demo.rkt&gt;</span> <span class=\"n\">marker-locations</span>\n<span class=\"o\">'</span><span class=\"p\">(</span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.68540868535638</span> <span class=\"mf\">146.59324564039707</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.67952333204448</span> <span class=\"mf\">146.58431304618716</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.67874247394502</span> <span class=\"mf\">146.57109302468598</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.67064957879484</span> <span class=\"mf\">146.5663103107363</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.65975930728018</span> <span class=\"mf\">146.56189740635455</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.65489989891648</span> <span class=\"mf\">146.57579275779426</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.65118286013603</span> <span class=\"mf\">146.58114535734057</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.65805283561349</span> <span class=\"mf\">146.58975390717387</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.67057556658983</span> <span class=\"mf\">146.59253066405654</span><span class=\"p\">)</span>\n  <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"mf\">-42.68192206509411</span> <span class=\"mf\">146.5928765013814</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Finally, the markers can be added to the map using the <code>add-marker</code> method on the map widget:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">df-demo.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">marker-color</span> <span class=\"p\">(</span><span class=\"n\">make-color</span> <span class=\"mi\">0</span> <span class=\"mi\">135</span> <span class=\"mi\">36</span><span class=\"p\">))</span>\n<span class=\"n\">df-demo.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([(</span><span class=\"n\">position</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-indexed))\" style=\"color: inherit\">in-indexed</a></span> <span class=\"n\">marker-locations</span><span class=\"p\">)])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"n\">add-marker</span> <span class=\"n\">position</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"Mile ~a\"</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"mi\">1</span> <span class=\"n\">marker-color</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And this produces the following result:</p>\n\n<div class=\"figure\"><img src=\"/img/a016/map-demo.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>An interactive elevation plot can also be added, and the data frame functions <code>df-select*</code>, <code>df-lookup</code> and, a more appropriate <code>df-lookup/interpolated</code> can be used to simplify the code. The entire example is available in this <a href=\"https://gist.github.com/alex-hhh/7304c2a09bf1b7ec8514c2523a827b05\">GitHub Gist</a>.</p>\n\n<h3 id=\"footnotes\">Footnotes</h3>\n\n<div class=\"footnotes\">\n <ol>\n  <li id=\"2018-08-05-racket-data-frame-footnote-1-definition\" class=\"footnote-definition\">\n   <p>the &ldquo;dst&rdquo; series is in meters, so the first mile is at 1609 meters&nbsp;<a href=\"#2018-08-05-racket-data-frame-footnote-1-return\">↩</a></p></li></ol></div>") (u . "/img/a016/thumb.png")) ((? . 3) f post (u . "Bike Trainer") (? . 3) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2017/11/bike-trainer.html" . windows) (u . "/2017/11/bike-trainer.html") (u . "2017-11-14T05:58:09") (? . 6) (? . 20) (c (u . "bike trainer") c (u . "activitylog2")) (u . "\n<p>I bought a bike trainer last June for indoor riding during winter (which in the southern hemisphere is in July and August.) and I decided to write virtual ride simulator to use it. The simulator would follow a predefined course on the map: the current position would advance based on the speed received from the trainer, and the application would control the resistance based on the slope at the current location.</p>") #t (u . "\n<p>I bought a bike trainer last June for indoor riding during winter (which in the southern hemisphere is in July and August.) and I decided to write virtual ride simulator to use it. The simulator would follow a predefined course on the map: the current position would advance based on the speed received from the trainer, and the application would control the resistance based on the slope at the current location.</p>\n<!-- more-->\n\n<div class=\"figure\"><img src=\"/img/a003/bike-trainer.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The trainer itself comes with a basic control application which displays speed, power and cadence plus, it allows controlling the resistance manually. Different vendors also provide monthly subscriptions for more sophisticated training applications. However, I find it more interesting and challenging to write my own application to control the trainer. In doing so, I learned how to communicate with ANT+ devices, how to extend the <code>pasteboard%</code> object to display a map on the background and a few things about the GPX tracks.</p>\n\n<h2 id=\"running-the-application\">Running the application</h2>\n\n<p><strong>Equipment</strong> You need the following equipment to run the application:</p>\n\n<ul>\n <li>An ANT+ FE-C capable bike trainer (all recent trainers should work)</li>\n <li>A bike to put on the trainer</li>\n <li>An ANT+ Heart Rate Monitor (optional)</li>\n <li>An ANT+ USB dongle</li></ul>\n\n<p><strong>GPX Track</strong> You will also need a GPX file, which contains the GPS track to ride. If you don&rsquo;t have any, here are two sample ones:</p>\n\n<ul>\n <li><a href=\"https://drive.google.com/uc?export=download&amp;id=1_EvQnSEBy6fcjYKqcENYJKf1wWaojWyZ\">Guilford Hills</a></li>\n <li><a href=\"https://drive.google.com/uc?export=download&amp;id=1jlOLyG0MXTezoSwCdSGWDiaFO9MolRj8\">Mt Adelaide and Clarence</a></li></ul>\n\n<p><strong>Telemetry Server</strong> Communicating with the application is done using a separate application, a <a href=\"https://github.com/alex-hhh/TrainerControl\">TelemetryServer</a>. Follow the instructions in that projects README file to build and run it.</p>\n\n<p><strong>Source Code</strong> for the application is on the <a href=\"https://github.com/alex-hhh/ActivityLog2/tree/bike-trainer\">bike-trainer branch</a> of the ActivityLog2 project, with all relevant files in the <code>bike-trainer</code> folder.</p>\n\n<p>To run the application, first start the telemetry server, than open the <code>bike-trainer.rkt</code> file in DrRacket and click &ldquo;Run&rdquo; (or Ctrl-R). You will need to connect to the telemetry server by typing the following in the Racket interaction window (7500 is the TCP port number it will connect to):</p>\n\n<pre><code>(connect 7500)</code></pre>\n\n<p>Once that is done, the live telemetry data should show up on the top of the window. You can load a GPX track, click &ldquo;Start&rdquo; and start pedaling. The current location should advance on the map and the trainer resistance will change depending on the slope at the current location.</p>\n\n<h3 id=\"running-the-application-in-demo-mode\">Running the application in demo mode</h3>\n\n<p>The <code>demo-telemetry-server.rkt</code> utility can be used to supply pre-defined telemetry values to the bike trainer application. This can be used to test the application without a bike trainer, or to simply run the application in demo mode.</p>\n\n<p>To run the server, you will need a CSV file with telemetry data. A CSV file in the required format can be exported by selecting an existing activity and using the &ldquo;Activity / Export track data (CSV)&hellip;&rdquo;. You can also download a sample CSV file <a href=\"https://drive.google.com/uc?export=download&amp;id=1Zgzrj5IqER7Qf4AzrMc3i3gVa5ePqg_W\">here</a>.</p>\n\n<p>The server can be run from the command line as:</p>\n\n<pre><code>racket demo-telemetry-server.rkt -f telemetry-data.csv</code></pre>\n\n<p>Alternatively, the server can send telemetry directly from an existing session from the ActivityLog2 database. You will need the session id, which you can find by opening a session and using the &ldquo;Activity/Copy session id to clipboard&hellip;&rdquo; menu item. You can than use the following command:</p>\n\n<pre><code>racket demo-telemetry-server.rkt -s SESSION-ID\n</code></pre>\n\n<p>Once started, the bike-trainer application will connect to this server to receive telemetry values.</p>\n\n<div style=\"text-align:center\">\n <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/D1E2fSQFy7k\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n\n<h2 id=\"technical-details\">Technical details</h2>\n\n<p>The implementation is on the <a href=\"https://github.com/alex-hhh/ActivityLog2/tree/bike-trainer\">bike-trainer branch</a> of the ActivityLog2 project, with all relevant files in the <code>bike-trainer</code> folder.</p>\n\n<p>As part of the ActivityLog2 application, I already had the most important ingredient: a map widget with all the necessary map utilities. I decided to use a <code>pasteboard%</code> for the main application window, with the map being displayed as the background and all the other views implemented as <code>snip%</code> objects.</p>\n\n<p>A &ldquo;current location&rdquo; concept was added to the <code>map-widget%</code>: when a current location is set using <code>set-current-location</code>, a red circle will be drawn at that location. Also the current location is &ldquo;tracked&rdquo;, meaning that the map is slowly panned so that the current location is always displayed on the screen. This is currently non-configurable, see <code>track-current-location</code>.</p>\n\n<p>Also, the <code>map-widget%</code> was updated to act as a <code>pasteboard%</code>. The map is drawn as the pasteboard background, and the pasteboard can be accessed using <code>get-pasteboard</code> and snips can be inserted. Mouse handling has changes: click and drag events are used to pan the map around and mouse events with the &ldquo;Control&rdquo; key pressed are passed to the pasteboard%. This means that selecting and moving snips around is done while the &ldquo;control&rdquo; key is pressed.</p>\n\n<p>Training data is overlaid on top of the map using snips:</p>\n\n<ul>\n <li>a <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/bike-trainer/bike-trainer/telemetry-snip.rkt\">telemetry-snip%</a> is used for each of the telemetry values (heart  rate, power, speed, cadence, etc)</li>\n <li>an <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/bike-trainer/bike-trainer/elevation-profile-snip.rkt\">elevation-profile-snip%</a> is used to display the elevation  profile on the map</li>\n <li>a <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/bike-trainer/bike-trainer/message-snip.rkt\">message-snip%</a> is used to display messages</li></ul>\n\n<p>The simulation state (current location on the map and how it changes with the speed) is implemented in the <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/bike-trainer/bike-trainer/sim-state.rkt\">sim-state.rkt</a> file. A <code>sim-state</code> structure is defined containing all relevant data for the simulation along with functions to update it. I decided to experiment with &ldquo;functional updating&rdquo; of the state: all update functions return a new updated simulation state, rather than updating the existing state. This has resulted in elegant code in the simulation-task (see below)</p>\n\n<p>The main application is in the <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/bike-trainer/bike-trainer/bike-trainer.rkt\">bike-trainer.rkt</a> file, which sets up the widgets and starts the <code>simulation-task</code> procedure in a separate thread. This procedure reads telemetry data from the trainer and updates the simulation state.</p>\n\n<h3 id=\"communicating-with-the-trainer\">Communicating with the trainer</h3>\n\n<p>The bike trainer sends and receives data using the wireless ANT+ protocol, the same as my heart rate monitor and power meter on the bike. On the PC side, the data is sent and received using an ANT+ USB dongle (an ANT Stick). The ANT+ protocol documentation is available from <a href=\"https://www.thisisant.com\">www.thisisant.com</a>, although you have to sign up and upgrade your account to &ldquo;Adopter&rdquo;. This costs nothing, but you need agree to keep all documents confidential and not further distribute the documentation.</p>\n\n<p>The ANT+ communication part is implemented as a C++ server application, <a href=\"https://github.com/alex-hhh/TrainerControl\">TrainerControl</a>, the server accepts TCP connections and sends telemetry data (heart rate, power, speed and cadence) and receives commands over that connection. It uses <a href=\"http://libusb.info/\">libusb</a> for the USB communication, since I wanted my code to be portable. The application currently builds on Windows, but ultimately, I would like to port it to a Raspberry PI running Linux.</p>\n\n<p><em>Why not use Racket for the ANT+ communication?</em> I could have used the Racket Foreign Function Interface (FFI) to provide bindings for libusb, and write the entire ANT+ implementation in Racket. I didn&rsquo;t do it mostly because I took the path of least resistance: I already had experience using libusb from C++ and had no experience with using Racket FFI.</p>\n\n<h2 id=\"next-steps\">Next Steps</h2>\n\n<p>This application is very much in its early stages, only a proof of concept. I&rsquo;d like to expand it to include structured workouts and data recording as well as package it into an application that is ready to use. However, all this will have to wait until next year: summer has arrived here in Australia and I can start riding outdoors again.</p>\n<!-- link definitions-->") (u . "/img/a003/thumb.png")) ((? . 4) f post (u . "Arduino Inclinometer") (? . 4) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2017/12/arduino-inclinometer.html" . windows) (u . "/2017/12/arduino-inclinometer.html") (u . "2017-12-09T11:09:26") (? . 21) (? . 5) (c (u . "arduino")) (u . "\n<p>My brother-in-law got himself a 4WD and wanted an inclinometer module to display the roll and pitch of the vehicle while going on his adventures. I build one using an Arduino Nano and an accelerometer module.</p>") #t (u . "\n<p>My brother-in-law got himself a 4WD and wanted an inclinometer module to display the roll and pitch of the vehicle while going on his adventures. I build one using an Arduino Nano and an accelerometer module.</p>\n<!-- more-->\n\n<hr />\n\n<p><strong>Update 10 Mar 2018</strong> There is an updated <a href=\"/2018/03/arduino-inclinometer-improvements.html\">blog post</a> with some improvements I made to the unit. If you liked this blog post, you might want to have a look at that one as well.</p>\n\n<hr />\n\n<div style=\"text-align:center\">\n <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/TYN2xvI9mGE\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n\n<p>I found another Arduino based inclinometer project <a href=\"https://thepajerosport.com/2017/04/14/diy-arduino-inclinometer/\">here</a>, but, while I liked the design and component list, the actual Arduino sketch (program) was written in such a way that it required the actual accelerometer unit to be installed flat inside the vehicle and with the X axis of the unit facing forward. The accuracy of the roll and pitch readings depended on how precisely the unit is mounted inside the vehicle.</p>\n\n<p>The model that I built uses the same parts list, but the Arduino Sketch can determine the orientation of the unit, so the unit can be installed in any position inside the vehicle: mine was attached with a piece of Velcro tape to the dash board.</p>\n\n<p>Since the unit can be mounted in any position, the &ldquo;down&rdquo; direction read from the accelerometer will not be a reading of 1 for the Z axis, instead it will be an arbitrary reading of the X, Y, and Z axis values. When the unit is powered up, it will determine its &ldquo;down&rdquo; direction &mdash; this requires the vehicle to be on a flat surface. Once it knows the down direction it can determine the forward direction when the vehicle moves forward, as some acceleration applied to the unit. The forward direction can also be acquired by starting to move the vehicle and than immediately braking hard. With the &ldquo;down&rdquo; and &ldquo;forward&rdquo; directions acquired the unit can now interpret any accelerometer reading relative to these directions so it is being able to correctly determine the pitch and roll and display it.</p>\n\n<h2 id=\"source-code\">Source Code</h2>\n\n<p>The source code for the project is available on <a href=\"https://github.com/alex-hhh/Arduino_Inclinometer\">GitHub</a>. The working of the program is explained in the &ldquo;The Arduino Sketch Explained&rdquo; section below.</p>\n\n<p>To successfully compile the sketches in this project, the following libraries need to be installed in the <a href=\"https://www.arduino.cc/en/Main/Software\">Adruino IDE</a>. I used version 1.8.5 of the IDE, but any later version should work. To install a library, go to the <em>Library Manager</em> use the &ldquo;Sketch/Include Library/Manage Libraries&hellip;&rdquo; menu.</p>\n\n<ul>\n <li><a href=\"https://github.com/adafruit/Adafruit_Sensor\">Adafruit Unified Sensor</a> &mdash;  this is the sensor library requied by the ADXL345 library</li>\n <li><a href=\"https://github.com/adafruit/Adafruit_ADXL345\">Adafruit ADXL345</a> &mdash; this  library communicates with the accelerometer module.</li>\n <li><a href=\"https://github.com/adafruit/Adafruit-GFX-Library\">Adafruit GFX Library</a> &mdash;  this library is the base graphics library for drawing on the OLED display</li>\n <li><a href=\"https://github.com/adafruit/Adafruit_SSD1306\">Adafruit SSD1306</a> &mdash; the  display driver for the specific OLED display used in this project.</li></ul>\n\n<p>In addition to this, the <code>Adafruit_SSD1306.h</code> header file needs to be updated to enable the<code>SSD1306_128_64</code> define, since this project uses an 128 x 64 pixel OLED display. This file can be found in the library folder. On Windows, libraries are installed in the &ldquo;Documents/Arduino/libraries&rdquo; folder.</p>\n\n<h2 id=\"parts-list\">Parts List</h2>\n\n<div class=\"figure\"><img src=\"/img/a006/inclinometer_finished.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This is how the final unit looks. I bought a plastic enclosure to hold the PCB and modules and had to make cutouts for the screen and the buzzer module which would not fit inside the enclosure I got. The following parts are used by this project:</p>\n\n<ul>\n <li><a href=\"https://store.arduino.cc/usa/arduino-nano\">Arduino Nano</a> or compatible  (ATmega328P microcontroller)</li>\n <li>OLED&ndash;12864 &mdash; 0.96 Inch White SPI OLED Display Module, based on the SSD1306  chip</li>\n <li>GY&ndash;291 &mdash; ADXL345 Digital Triple Axis Accelerometer Module &mdash; this module  determines the orientation of the unit and is used to determine the roll and  pitch angles.</li>\n <li>3.5&ndash;5.5V Passive Buzzer Module For Arduino &mdash; this is used to sound an alarm  when the roll or pitch angles exceed certain values</li></ul>\n\n<h2 id=\"connecting-things-together\">Connecting things together</h2>\n\n<div class=\"figure\"><img src=\"/img/a006/inclinometer_breadboard.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Before soldering things together, it is a good idea to first connect all components on a bread board and made sure everything was working properly. The actual connections between all the components are listed below.</p>\n\n<h3 id=\"arduino-nano-connections\">Arduino Nano Connections</h3>\n\n<ul>\n <li><code>A4</code> connected to ADXL345 <code>SDA</code> pin</li>\n <li><code>A5</code> connected to ADXL345 <code>SCL</code> pin</li>\n <li><code>D3</code> connected to OLED <code>DC</code> pin</li>\n <li><code>D4</code> connected to OLED <code>RES</code> pin</li>\n <li><code>D5</code> connected to OLED <code>SDA</code> pin</li>\n <li><code>D6</code> connected to OLED <code>SCL</code> pin</li>\n <li><code>D8</code> connected to the BUZZER <code>SIG</code> pin</li></ul>\n\n<h3 id=\"adxl345-accelerometer-connections\">ADXL345 Accelerometer Connections</h3>\n\n<ul>\n <li><code>GND</code> connected to ground</li>\n <li><code>VCC</code> connected to the 3.3 Volt pin on the Arduino Nano</li>\n <li><code>CS</code> connected to 3.3 Volt pin on the Arduino Nano, so the chip is put in  I2C mode.</li>\n <li><code>INT1</code> not connected</li>\n <li><code>INT2</code> not connected</li>\n <li><code>SDO</code> connected to ground (to select I2C address 0x53)</li>\n <li><code>SDA</code> connected to the <code>A4</code> pin on the Arduino Nano</li>\n <li><code>SCL</code> connected to the <code>A5</code> pin on the Arduino Nano</li></ul>\n\n<h3 id=\"oled-display-connections\">OLED Display Connections</h3>\n\n<ul>\n <li><code>GND</code> connected to ground</li>\n <li><code>VCC</code> connected to 3.3 Volt pin on the Arduino Nano</li>\n <li><code>SCL</code> connected to the <code>D6</code> pin on the Arduino Nano</li>\n <li><code>SDA</code> connected to the <code>D5</code> pin on the Arduino Nano</li>\n <li><code>RES</code> connected to the <code>D4</code> pin on the Arduino Nano</li>\n <li><code>DC</code> connected to the <code>D3</code> pin on the Arduino Nano</li></ul>\n\n<h3 id=\"buzzer-module-connections\">Buzzer Module Connections</h3>\n\n<ul>\n <li><code>SIG</code> pin connected to the <code>D8</code> pin on the Arduino Nano</li>\n <li><code>VCC</code> pin connected to the 3.3 Volt pin on the Arduino Nano</li>\n <li><code>GND</code> pin connected to ground</li></ul>\n\n<h2 id=\"calibration\">Calibration</h2>\n\n<p>To increase the accuracy of the accelerometer, a static calibration needs to be done. Here is why: for each axis, the accelerometer can read a value between &ndash;1024 and +1024. The maximum acceleration range can be specified at initialization time, and for this application is set to 4 G. This means that, when 4 G of acceleration is applied to one of the X, Y or Z axes, the accelerometer should read 1024 (if 4 G is applied in the opposite direction, it should read &ndash;1024). If 1G is applied to the same axis, the accelerometer should read 1024/4 = 256.</p>\n\n<p>The 1 G case is easy to test, since this is the Earths gravity. If you place the accelerometer flat on the table, 1 G of acceleration is applied to the Z axis, and zero acceleration on the X (forward) and Y (left) axis. If I do this experiment with my unit I get the following readings: &ldquo;X = 5; Y = &ndash;27; Z = 226&rdquo;. In fact, no matter how much I adjust the position of the accelerometer, I was never able to obtain the expected &ldquo;X = 0; Y = 0; Z = 256&rdquo; reading.</p>\n\n<p>The calibration process obtains two adjustment values for each axis, a <strong>slope</strong> and an <strong>intercept</strong>. These values are used to adjust the value read from the accelerometer so that it will read &ndash;256 if &ndash;1 G is applied to an axis and +256 if +1 G is applied to that axis.</p>\n\n<p>The calibration process described here is somewhat simplistic, but it works in this case because it is used to determine roll and pitch when there is little or no acceleration applied above the Earths gravity. The advantage of this process is that it is simple enough to perform and requires no extra tools or calibration rig. If the accelerometer is used to actually measure larger accelerations, a different process will need to be used &mdash; you will need to search the net for a better process.</p>\n\n<h3 id=\"how-to-perform-the-calibration-and-determine-the-slope-and-intercept\">How to perform the calibration and determine the slope and intercept</h3>\n\n<p><strong>NOTE:</strong> calibration should be performed after the unit has been assembled and soldered on the final PCB, as soldering will change the calibration values.</p>\n\n<div class=\"figure\"><img src=\"/img/a006/inclinometer_assembled.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The <a href=\"https://github.com/alex-hhh/Arduino_Inclinometer/blob/master/calibration/calibration.ino\">calibration sketch</a> can help with the calibration process. This sketch prints out the raw accelerometer readings for the X, Y and Z axis. To view the values, open the serial monitor window on the Arduino IDE and make sure the serial speed is set to 38400 baud.</p>\n\n<p>With this sketch running, six readings must be obtained from the accelerometer, two for each axis. The accelerometer module has the X and Y axes printed on the PCB, it may help to locate them now. Here are the six readings, when the accelerometer is placed:</p>\n\n<ol>\n <li>flat on the table (Z axis pointing up), adjust it until you obtain the  maximum reading for the Z axis and make a note of it.</li>\n <li>upside down on the table (Z axis pointing down), adjust it until you obtain  the minimum reading for the Z axis and make a note of it.</li>\n <li>standing on the table (X axis pointing up), read the maximum value for the  X axis</li>\n <li>standing upside-down on the table (X axis pointing down), read the minimum  value for the X axis</li>\n <li>sideways on the table (Y axis pointing up), read the maximum value for the  Y axis</li>\n <li>sideways upside-down on the table (Y axis pointing down), read the minimum  value for the Y axis</li></ol>\n\n<p>Than, for each axis, a <strong>slope</strong> and <strong>intercept</strong> value can be calculated using the following formulas:</p>\n\n<pre><code>slope = 2 / (max_reading - min_reading)\nintercept = 1 - slope * min_reading\n</code></pre>\n\n<p>For my accelerometer unit, I had the following readings and <strong>slope</strong> and <strong>intercept</strong> values:</p>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td style=\"text-align: center\">Axis</td>\n    <td style=\"text-align: right\">Min Reading</td>\n    <td style=\"text-align: right\">Max Reading</td>\n    <td style=\"text-align: right\">Slope</td>\n    <td style=\"text-align: right\">Intercept</td></tr></thead>\n  <tbody>\n   <tr>\n    <td style=\"text-align: center\">X</td>\n    <td style=\"text-align: right\">&ndash;245</td>\n    <td style=\"text-align: right\">258</td>\n    <td style=\"text-align: right\">0.003976143</td>\n    <td style=\"text-align: right\">&ndash;0.02584493</td></tr>\n   <tr>\n    <td style=\"text-align: center\">Y</td>\n    <td style=\"text-align: right\">&ndash;275</td>\n    <td style=\"text-align: right\">232</td>\n    <td style=\"text-align: right\">0.003944773</td>\n    <td style=\"text-align: right\">0.084812623</td></tr>\n   <tr>\n    <td style=\"text-align: center\">Z</td>\n    <td style=\"text-align: right\">&ndash;275</td>\n    <td style=\"text-align: right\">230</td>\n    <td style=\"text-align: right\">0.003960396</td>\n    <td style=\"text-align: right\">0.089108911</td></tr></tbody></table></div>\n\n<p>The slope and intercept values for each axis must be placed in the <a href=\"https://github.com/alex-hhh/Arduino_Inclinometer/blob/master/inclinometer/inclinometer.ino\">inclinometer.ino</a> file, replacing the values that are already present there. The &ldquo;calibration parameters&rdquo; section is shown below:</p>\n\n<div class=\"brush: C++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">// Calibration parameters.  These will need to be updated for each unit, see</span>\n<span class=\"c1\">// the Calibration section in README.md</span>\n\n<span class=\"cp\">#define X_SLOPE 0.003976143</span>\n<span class=\"cp\">#define X_INTERCEPT -0.02584493</span>\n<span class=\"cp\">#define Y_SLOPE 0.003944773</span>\n<span class=\"cp\">#define Y_INTERCEPT 0.084812623</span>\n<span class=\"cp\">#define Z_SLOPE 0.003960396</span>\n<span class=\"cp\">#define Z_INTERCEPT 0.089108911</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"the-arduino-sketch-explained\">The Arduino Sketch Explained</h2>\n\n<p>The full sketch source is available here: <a href=\"https://github.com/alex-hhh/Arduino_Inclinometer/blob/master/inclinometer/inclinometer.ino\">https://github.com/alex-hhh/Arduino_Inclinometer/blob/master/inclinometer/inclinometer.ino</a></p>\n\n<p>To understand how the program works, some basic understanding of <a href=\"https://en.wikipedia.org/wiki/Vector_algebra\">vector algebra</a> is required. We read from the accelerometer three values, the acceleration on the X (forward &mdash; backward), Y (left &mdash; right) and Z (up &mdash; down) axes. Together, these values from a single 3 - dimensional, or 3 D, vector. The following operations are defined on vectors in the code.</p>\n\n<p>The <code>vlen</code> function calculates the length, or magnitude, of a 3 D vector. In our case, this represents the absolute acceleration applied to the unit, regardless of the direction. If the unit is at rest, the <code>vlen</code> of any accelerometer reading should be 1, as 1 G of acceleration is applied to the unit regardless of its orientation.</p>\n\n<p>The <code>vnormalize</code> function returns a new vector with the same direction as the original one, but with a length of 1, also called a <em>unit vector</em>.</p>\n\n<p>The <code>vdot</code> function calculates the <a href=\"https://en.wikipedia.org/wiki/Dot_product\">dot product</a> of two vectors. The dot product has an important property for our application: the dot product of two <em>unit vectors</em> represents the cosine of the angle between the two vectors. This means we can determine the angle the unit is facing by using the dot product of the accelerometer reading and the &ldquo;down direction&rdquo; vector, which is (0, 0, 1).</p>\n\n<p>The <code>vcross</code> function calculates the <a href=\"https://en.wikipedia.org/wiki/Cross_product\">cross product</a> of two vectors. The cross product has an important property for our application: the cross product of two vectors results in a vector that is perpendicular (at a right angle) to the plane of the first two vectors. This means we can determine a true forward direction even though, when accelerating the vehicle the vector read from the accelerometer will not point exactly forward or backward.</p>\n\n<h3 id=\"reading-an-orientation-vector-from-the-accelerometer-module\">Reading an orientation vector from the accelerometer module</h3>\n\n<p>The accelerometer values can be read using the <code>getX</code>, <code>getY</code> and <code>getZ</code> methods of the <code>adxl345</code> module, however these are raw, uncalibrated values (see <em>Calibration</em> section above) and the values fluctuate very quickly by small amounts. Using these values directly would result in the angle reading always flickering the last digit when displayed.</p>\n\n<p>The <code>read_accelerometer</code> function defined below reads the values from the accelerometer as a 3 D vector, but applies the calibration <em>slope</em> and <em>intercept</em> values and than filters them using a <a href=\"https://en.wikipedia.org/wiki/Low-pass_filter\">low pass filter</a>. Unlike a rolling average filter, a low pass filter only requires a single extra vector to be kept in the global state. This is important, as the sketch uses up almost all the memory on the Arduino Nano board.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">read_accelerometer</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// The filtered accelerometer values.  This is &#39;static&#39;, so it remembers</span>\n    <span class=\"c1\">// its values between `read_accelerometer&#39; calls.</span>\n    <span class=\"k\">static</span> <span class=\"kt\">float</span> <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n\n    <span class=\"c1\">// Step 1: read the raw values from the accelerometer</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">adxl345</span><span class=\"p\">.</span><span class=\"n\">getX</span><span class=\"p\">();</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">adxl345</span><span class=\"p\">.</span><span class=\"n\">getY</span><span class=\"p\">();</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">adxl345</span><span class=\"p\">.</span><span class=\"n\">getZ</span><span class=\"p\">();</span>\n\n    <span class=\"c1\">// Step 2: calibrate the values, see the readme.md file</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">X_SLOPE</span> <span class=\"o\">+</span> <span class=\"n\">X_INTERCEPT</span><span class=\"p\">;</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">Y_SLOPE</span> <span class=\"o\">+</span> <span class=\"n\">Y_INTERCEPT</span><span class=\"p\">;</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">Z_SLOPE</span> <span class=\"o\">+</span> <span class=\"n\">Z_INTERCEPT</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Step 3: calculate the filter alpha value and update the filter.</span>\n    <span class=\"kt\">float</span> <span class=\"n\">alpha</span> <span class=\"o\">=</span> <span class=\"kt\">float</span><span class=\"p\">(</span><span class=\"n\">delta_time</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">LPF_ALPHA</span> <span class=\"o\">+</span> <span class=\"kt\">float</span><span class=\"p\">(</span><span class=\"n\">delta_time</span><span class=\"p\">));</span>\n\n    <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">alpha</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">alpha</span><span class=\"p\">;</span>\n    <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">alpha</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">alpha</span><span class=\"p\">;</span>\n    <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">-</span> <span class=\"n\">alpha</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">alpha</span><span class=\"p\">;</span>\n\n    <span class=\"c1\">// Step 4: produce the final calibrated and filtered values.</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">];</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n    <span class=\"n\">output</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">filter</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">];</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"acquiring-the-down-direction\">Acquiring the down direction</h3>\n\n<p>When the unit is started up, it needs to determine its orientation and the first step of that is do determine what accelerometer reading represents the &ldquo;down&rdquo; direction. To do that, it assumes that the unit is not moving and the vehicle is on a flat surface (note that most roads have a 2 &ndash; 3 degree camber, so the side of the road is not a flat surface).</p>\n\n<p>The down direction is stored in the global <code>zaxis</code> vector. Each reading, the function checks if the dot product between the <code>zaxis</code> and the current reading, <code>cal</code>, is approximately 1. Since <code>cos(0)</code> is 1, a dot product of 1 means the angle between <code>zaxis</code> and <code>cal</code> is 0, so the two vectors point in the same direction. In our case, this means that we had multiple readings of the same &ldquo;down&rdquo; direction. Note that this assumes that both <code>zaxis</code> and <code>cal</code> are <em>unit vectors</em>, which will be the case if the vehicle is stationary and only the Earths gravity is applied to it.</p>\n\n<p>If <code>cal</code> and <code>zaxis</code> are not pointing in the same direction, the <code>zaxis</code> is updated to be &ldquo;between&rdquo; the previous <code>zaxis</code> and the new <code>cal</code> reading. Effectively, <code>zaxis</code> is slowly moved towards the <code>cal</code> reading.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">on_acquire_down_direction</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">dot</span> <span class=\"o\">=</span> <span class=\"n\">vdot</span><span class=\"p\">(</span><span class=\"n\">cal</span><span class=\"p\">,</span> <span class=\"n\">zaxis</span><span class=\"p\">);</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">dot</span> <span class=\"o\">&gt;</span> <span class=\"mf\">0.99</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">dot</span> <span class=\"o\">&lt;</span> <span class=\"mf\">1.01</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">vnormalize</span><span class=\"p\">(</span><span class=\"n\">zaxis</span><span class=\"p\">,</span> <span class=\"n\">zaxis</span><span class=\"p\">);</span>\n\n        <span class=\"c1\">// Got our down direction, we can now determine the forward direction.</span>\n        <span class=\"n\">SET_STATE</span><span class=\"p\">(</span><span class=\"n\">STATE_ACQUIRE_FORWARD_DIRECTION</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"n\">zaxis</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">zaxis</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">;</span>\n        <span class=\"n\">zaxis</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">zaxis</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">;</span>\n        <span class=\"n\">zaxis</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">zaxis</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span> <span class=\"o\">*</span> <span class=\"mf\">0.5</span><span class=\"p\">;</span>\n\n        <span class=\"c1\">// Show a message on the screen that we are acquiring the down</span>\n        <span class=\"c1\">// direction.</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"acquiring-the-forward-direction\">Acquiring the forward direction</h3>\n\n<p>Once the &ldquo;down&rdquo; direction is known, the forward direction can be determined by moving the vehicle forward. In that case, the accelerometer vector will have a length greater than 1 (in our case we check for 1.02). The &ldquo;length&rdquo; of the vector represents the total acceleration applied to the unit, 1 G is always applied because of Earths gravity and 0.02 is applied from the vehicles acceleration. The acceleration vector will also point slightly backwards now, since the vehicle&rsquo;s forward acceleration is combined with the &ldquo;down&rdquo; acceleration from gravity.</p>\n\n<p><strong>NOTE:</strong> it is also possible to start moving the vehicle and brake hard to get a negative acceleration (deceleration). The end result is the same.</p>\n\n<p>We now have two reference vectors, one that points down, <code>zaxis</code>, and one that points down and slightly backwards. The <em>cross product</em> of these two vectors is a vector that points straight to the left of the unit, this is the <code>yaxis</code>. Finally, the <em>cross product</em> between the <code>yaxis</code> and <code>zaxis</code> is a vector that points forward, the <code>xaxis</code>. The two new vectors are also normalized, as the length of the vector produced by the <em>cross product</em> is not necessarily 1.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">on_acquire_forward_direction</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">gforce</span> <span class=\"o\">=</span> <span class=\"n\">vlen</span><span class=\"p\">(</span><span class=\"n\">cal</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">gforce</span> <span class=\"o\">&gt;</span> <span class=\"mf\">1.02</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// 0.02 of acceleration indicates that the vehicle is moving and we</span>\n        <span class=\"c1\">// can determine the forward direction.  Note that on Earth, the</span>\n        <span class=\"c1\">// vehicle will always be subjected to at leas 1g due to gravity</span>\n        <span class=\"c1\">// (unless the vehicle is in free fall).</span>\n        <span class=\"n\">vcross</span><span class=\"p\">(</span><span class=\"n\">zaxis</span><span class=\"p\">,</span> <span class=\"n\">cal</span><span class=\"p\">,</span> <span class=\"n\">yaxis</span><span class=\"p\">);</span>\n        <span class=\"n\">vcross</span><span class=\"p\">(</span><span class=\"n\">yaxis</span><span class=\"p\">,</span> <span class=\"n\">zaxis</span><span class=\"p\">,</span> <span class=\"n\">xaxis</span><span class=\"p\">);</span>\n        <span class=\"n\">vnormalize</span><span class=\"p\">(</span><span class=\"n\">xaxis</span><span class=\"p\">,</span> <span class=\"n\">xaxis</span><span class=\"p\">);</span>\n        <span class=\"n\">vnormalize</span><span class=\"p\">(</span><span class=\"n\">yaxis</span><span class=\"p\">,</span> <span class=\"n\">yaxis</span><span class=\"p\">);</span>\n        <span class=\"n\">SET_STATE</span><span class=\"p\">(</span><span class=\"n\">STATE_RUNNING</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n        <span class=\"c1\">// The vehicle is not accelerating fast enough yet.  Show a message on</span>\n        <span class=\"c1\">// the screen instructing the user to move the vehicle forward.</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"main-running-function\">Main running function</h3>\n\n<p>The unit has now determined the &ldquo;down&rdquo;, &ldquo;forward&rdquo; and &ldquo;left&rdquo; directions and stored them in the <code>xaxis</code>, <code>yaxis</code> and <code>zaxis</code>. These three vectors are the reference frame of the unit: they form a 3 x 3 matrix which is the &ldquo;local&rdquo; transform. This matrix has the property that any vector multiplied by it will transform the vector from &ldquo;world&rdquo; coordinates into the &ldquo;local&rdquo; coordinates. In local coordinates, down is always (0, 0, 1) and forward is always (1, 0, 0), to it makes it easy to calculate pitch and roll angles.</p>\n\n<p>The <code>on_running</code> function is the main function of the application. It takes an accelerometer reading, <code>cal</code>, transforms it into the local reference frame of the unit, calculates roll and pitch angles and displays them.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">on_running</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"c1\">// &#39;cal&#39; is in world coordinates, transform it to local coordinates, to</span>\n    <span class=\"c1\">// calculate the calibrated roll and pitch.  Note that the vdot() calls</span>\n    <span class=\"c1\">// together make a matrix -- vector multiplication.</span>\n    <span class=\"kt\">float</span> <span class=\"n\">ncal</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n    <span class=\"n\">ncal</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vdot</span><span class=\"p\">(</span><span class=\"n\">xaxis</span><span class=\"p\">,</span> <span class=\"n\">cal</span><span class=\"p\">);</span>\n    <span class=\"n\">ncal</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vdot</span><span class=\"p\">(</span><span class=\"n\">yaxis</span><span class=\"p\">,</span> <span class=\"n\">cal</span><span class=\"p\">);</span>\n    <span class=\"n\">ncal</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">vdot</span><span class=\"p\">(</span><span class=\"n\">zaxis</span><span class=\"p\">,</span> <span class=\"n\">cal</span><span class=\"p\">);</span>\n\n    <span class=\"kt\">float</span> <span class=\"n\">pitch</span> <span class=\"o\">=</span> <span class=\"n\">calculate_pitch</span><span class=\"p\">(</span><span class=\"n\">ncal</span><span class=\"p\">);</span>\n    <span class=\"kt\">float</span> <span class=\"n\">roll</span> <span class=\"o\">=</span> <span class=\"n\">calculate_roll</span><span class=\"p\">(</span><span class=\"n\">ncal</span><span class=\"p\">);</span>\n    <span class=\"kt\">float</span> <span class=\"n\">gforce</span> <span class=\"o\">=</span> <span class=\"n\">vlen</span><span class=\"p\">(</span><span class=\"n\">cal</span><span class=\"p\">);</span>\n\n    <span class=\"c1\">// Check for WARN conditions being met and set or clear appropriate flags.</span>\n    <span class=\"c1\">// We set the warn flag when an angle exceeds the warn value, but only</span>\n    <span class=\"c1\">// clear it when it drops two degrees below that value.  This ensures that</span>\n    <span class=\"c1\">// there is no annoying quick on-off buzzer when the inclinometer hovers</span>\n    <span class=\"c1\">// around the warn value.</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">roll</span> <span class=\"o\">&gt;</span> <span class=\"n\">ROLL_WARN</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">SET_FLAG</span><span class=\"p\">(</span><span class=\"n\">ROLL_WARN_FLAG</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">roll</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"n\">ROLL_WARN</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"c1\">// note the -2, hysteresis !</span>\n        <span class=\"n\">CLR_FLAG</span><span class=\"p\">(</span><span class=\"n\">ROLL_WARN_FLAG</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pitch</span> <span class=\"o\">&gt;</span> <span class=\"n\">PITCH_WARN</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">SET_FLAG</span><span class=\"p\">(</span><span class=\"n\">PITCH_WARN_FLAG</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pitch</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"n\">PITCH_WARN</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">{</span> <span class=\"c1\">// note the -2, hysteresis !</span>\n        <span class=\"n\">CLR_FLAG</span><span class=\"p\">(</span><span class=\"n\">PITCH_WARN_FLAG</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"n\">display_pitch_roll</span><span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">,</span> <span class=\"n\">roll</span><span class=\"p\">,</span> <span class=\"n\">gforce</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"calculating-pitch-and-roll\">Calculating pitch and roll</h3>\n\n<p>To calculate the pitch and roll angles, we start with a &ldquo;down&rdquo; direction vector that is adjusted for the unit orientation (see previous secton) and we can use the dot product to obtain the cosine of the angle between the vectors, than we use the built-in <code>acos</code> function to get the actual angle back.</p>\n\n<p>For <em>pitch</em> angle, we are interested in the forward - backward angle of the unit, so we keep only the X and Z coordinates from the &ldquo;down&rdquo; vector, <code>cal</code>. This vector has to be normalized to make it a unit vector.</p>\n\n<p>For <em>roll</em> angle, we are interested in the left - right angle of the unit, so we keep the Y and Z coordinates from the &ldquo;down&rdquo; vector, <code>cal</code>. As with the pitch vector, this vector has to be normalized.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kt\">float</span> <span class=\"nf\">calculate_pitch</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">down</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">};</span>\n    <span class=\"kt\">float</span> <span class=\"n\">pitch_dir</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">};</span>\n    <span class=\"n\">vnormalize</span><span class=\"p\">(</span><span class=\"n\">pitch_dir</span><span class=\"p\">,</span> <span class=\"n\">pitch_dir</span><span class=\"p\">);</span>\n    <span class=\"kt\">float</span> <span class=\"n\">pitch</span> <span class=\"o\">=</span> <span class=\"n\">vdot</span><span class=\"p\">(</span><span class=\"n\">down</span><span class=\"p\">,</span> <span class=\"n\">pitch_dir</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"n\">pitch</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">float</span> <span class=\"nf\">calculate_roll</span><span class=\"p\">(</span><span class=\"kt\">float</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">])</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">float</span> <span class=\"n\">down</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">};</span>\n    <span class=\"kt\">float</span> <span class=\"n\">roll_dir</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">cal</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"p\">};</span>\n    <span class=\"n\">vnormalize</span><span class=\"p\">(</span><span class=\"n\">roll_dir</span><span class=\"p\">,</span> <span class=\"n\">roll_dir</span><span class=\"p\">);</span>\n    <span class=\"kt\">float</span> <span class=\"n\">roll</span> <span class=\"o\">=</span> <span class=\"n\">vdot</span><span class=\"p\">(</span><span class=\"n\">down</span><span class=\"p\">,</span> <span class=\"n\">roll_dir</span><span class=\"p\">);</span>\n    <span class=\"k\">return</span> <span class=\"n\">rad2deg</span><span class=\"p\">(</span><span class=\"n\">acos</span><span class=\"p\">(</span><span class=\"n\">roll</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"possible-improvements\">Possible Improvements</h3>\n\n<p>The unit will acquire the down and forward direction each time it is powered up. This is necessary, since it it designed to be moved around instead of being mounted in a fixed place. However, it means that the unit has to be powered up when the vehicle is on a flat surface. A possible improvement is to mount the unit inside the vehicle in a fixed position, perform the calibration only once and store the <code>xaxis</code>, <code>yaxis</code> and <code>zaxis</code> vectors into EEPROM. This way, the unit can simply retrieve these values from the EEPROM.</p>\n\n<p>Another improvement is to place the <em>slope</em> and <em>intercept</em> calibration values in EEPROM, so that the sketch code does not have to change for each unit being built.</p>\n\n<p>The above improvements would be a challenge, as the memory used by the sketch is already too high. When compiling the sketch, I got the following message from the Arduino compiler:</p>\n\n<blockquote>\n <p>Sketch uses 19538 bytes (63%) of program storage space. Maximum is 30720 bytes.</p>\n <p>Global variables use 1737 bytes (84%) of dynamic memory, leaving 311 bytes for local variables. Maximum is 2048 bytes.</p>\n <p>Low memory available, stability problems may occur.</p></blockquote>\n\n<p>The code itself is not very complex and does not use a lot of memory, but the OLED display requires a back buffer to hold the image. Since I used a 128 x 64 pixel display, it required a back buffer of 8192 bits (since the display is monochrome), or 1024 bytes of RAM. Given that the ATmega328P has 2048 bytes of ram, 50% of the memory is used up by the OLED back-buffer.</p>\n\n<p>The remaining 311 bytes for local variables, means that this space is used to hold the stack variables for function calls. If the function call stack is too deep, it will start writing into the global variables, corrupting the program. Fortunately, this is not the case for this sketch, but it does illustrate the problem that adding a display to a small micro-controller will severely reduce the complexity of the programs it can run.</p>\n\n<hr />\n\n<p><strong>Update 10 Mar 2018</strong> There is an updated <a href=\"/2018/03/arduino-inclinometer-improvements.html\">blog post</a> with some improvements I made to the unit. If you liked this blog post, you might want to have a look at that one as well.</p>\n\n<hr />") (u . "/img/a006/thumb.png")) ((? . 6) f post (u . "Marathon Training 2017 Statistics") (? . 6) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2017/09/marathon-training-2017-statistics.html" . windows) (u . "/2017/09/marathon-training-2017-statistics.html") (u . "2017-09-21T20:37:29") (? . 13) (? . 3) (c (u . "training data analysis")) (u . "\n<p>In June 2017 I completed my second Marathon. While the time was not what I expected, I still managed to get a sub 4 hour time, earning a yellow ribbon finishers medal. Let&rsquo;s look at some statistics from my training for this race.</p>") #t (u . "\n<p>In June 2017 I completed my second Marathon. While the time was not what I expected, I still managed to get a sub 4 hour time, earning a yellow ribbon finishers medal. Let&rsquo;s look at some statistics from my training for this race.</p>\n<!-- more-->\n\n<p>I followed the Marathon Training program from Daniel&rsquo;s Running Formula. This is a 24 week program incorporating both long runs and interval sessions. In the past 24 weeks I had 97 running sessions, 1347 kilometers in 122 hours. This is not much, as far as marathon training goes, but work and family obligations limited my training time.</p>\n\n<p>The plots below show the data I monitored during my training, they were &ldquo;evolving&rdquo; during my training, but now that the training is complete, they will not change anymore. The plots were created in <a href=\"https://github.com/alex-hhh/ActivityLog2\">ActivityLog2</a>, which is the application I use to analyze my training data.</p>\n\n<h2 id=\"time-and-distance-by-week\">Time and distance by week</h2>\n\n<p>The &ldquo;weekly mileage&rdquo; is one of the basic tools used to track training. Here are mine, for both time and distance.</p>\n\n<div class=\"figure\"><img src=\"/img/a002/Run_TIZ_2017.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The colored bars in the above graph represent Heart Rate zones. While the actual heart rate range for each zone is specific to an individual, the zones themselves attempt to classify the effort into categories, like: <em>z0</em> is very easy, <em>z1</em> is easy, <em>z2</em> is somewhat hart, <em>z3</em> is hard, <em>z4</em> is very hard and <em>z5</em> is extreme (one can hold a <em>z5</em> effort for a few minutes only).</p>\n\n<div class=\"figure\"><img src=\"./Run_VOL_2017.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"pace-and-heart-rate-distribution\">Pace and Heart Rate Distribution</h2>\n\n<p>The graphs below show how much time I spent running at different speeds and heart rates. The colors represent zones, the same as the ones used in the &ldquo;running time by week&rdquo; graph.</p>\n\n<p>There are two peaks in each plot, this is because most of the training comprised of long slow runs and some of it running at threshold intervals. Looking at the graphs, my &ldquo;slow&rdquo; running pace is about 5:30/km at a heart rate of 162 BPM and my threshold running speed is about 4:30/km at a heart rate of about 180 BPM.</p>\n\n<div class=\"figure\"><img src=\"/img/a002/Run_Pace_Hist_2017.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"figure\"><img src=\"/img/a002/Run_HR_Hist_2017.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"critical-velocity\">Critical Velocity</h2>\n\n<p>The critical velocity plot shows the best running pace I could maintain for a specific duration (the blue line), as well as the theoretical <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/doc/critical-power.md\">critical velocity</a>, (the red dashed line).</p>\n\n<p>The line goes up with duration because the plot shows the running pace: lower values mean slower running (4:00 min/km is faster than 5:00 min/km). There is a big drop in performance around 1h 30m mark, because this was the maximum length of interval training sessions. All the longer runs were done at an &ldquo;easy&rdquo; pace. There is another big drop around the 2h 45m mark, this was the longest training run I did, the remaining of the line represents my actual marathon race and the overall time for that was much slower than my training runs.</p>\n\n<div class=\"figure\"><img src=\"/img/a002/Run_CV_2017.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The critical velocity concept allows estimating best efforts for specific durations, even if there is no &lsquo;best&rsquo; effort in the actual data for that duration. Together with W&rsquo;Bal modeling (not described here), it can be used to design challenging interval workouts, or to determine if the interval workout was really an &ldquo;all out&rdquo; effort or not.</p>\n\n<div class=\"figure\"><img src=\"/img/a002/Run_CV_2017_Model.png\" alt=\"\" />\n <p class=\"caption\"></p></div>") (u . "/img/a002/thumb.png")) ((? . 7) f post (u . "Chess Game Using Racket's Pasteboard (part 2)") (? . 7) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/10/chess-game-using-racket-s-pasteboard-part-2.html" . windows) (u . "/2018/10/chess-game-using-racket-s-pasteboard-part-2.html") (u . "2018-10-19T21:15:34") (? . 8) (? . 19) (c (u . "racket")) (u . "\n<p>This is a continuation of the <a href=\"/2018/10/chess-game-using-racket-s-pasteboard.html\">previous blog post</a>, where the racket <code>pasteboard%</code> features are explored by implementing a Chess Game Board. In this blog post we look at how to restrict piece movements to chess board squares, permit only valid moves and implement turn based game play.</p>") #t (u . "\n<p>This is a continuation of the <a href=\"/2018/10/chess-game-using-racket-s-pasteboard.html\">previous blog post</a>, where the racket <code>pasteboard%</code> features are explored by implementing a Chess Game Board. In this blog post we look at how to restrict piece movements to chess board squares, permit only valid moves and implement turn based game play.</p>\n<!-- more-->\n\n<h2 id=\"place-the-piece-on-a-square-after-it-is-moved\">Place the piece on a square after it is moved</h2>\n\n<p>In the last version of the chess board program could we could place any inserted piece in its correct location, and pieces were also repositioned if the board size changed, however, the user can still drag pieces around with the mouse to any place on the board. To address that, we need to override the <code>after-interactive-move</code> method of the <code>pasteboard%</code>, which called every time the user completes a snip drag operation. The method receives a <code>mouse-event%</code> object for the last event of the drag operation and this event object contains the mouse coordinates for where the chess piece was moved to. We can use these coordinates to determine the square location for the destination: this is done in the <code>xy-&gt;location</code> function, as with other functions, this function queries the size of the board, so that the location is always determined correctly:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">xy-&gt;location</span> <span class=\"n\">board</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">canvas-width</span> <span class=\"n\">canvas-height</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">c</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">board</span> <span class=\"n\">get-canvas</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">c</span> <span class=\"n\">get-size</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">square-width</span> <span class=\"n\">square-height</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">canvas-width</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">canvas-height</span> <span class=\"mi\">8</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">rank</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-truncate))\" style=\"color: inherit\">exact-truncate</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">y</span> <span class=\"n\">square-height</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-truncate))\" style=\"color: inherit\">exact-truncate</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">x</span> <span class=\"n\">square-width</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"n\">rank-file-&gt;location</span> <span class=\"n\">rank</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>xy-&gt;location</code> function makes use of the <code>rank-file-&gt;location</code> function, which constructs a chess board location from a rank and file value, its definition is shown below:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">rank-file-&gt;location</span> <span class=\"n\">rank</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span> <span class=\"mi\">0</span> <span class=\"n\">rank</span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(def._((quote._~23~25kernel)._raise-argument-error))\" style=\"color: inherit\">raise-argument-error</a></span> <span class=\"o\">'</span><span class=\"ss\">rank</span> <span class=\"s2\">\"integer between 0 <a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a> 7\"</span> <span class=\"n\">rank</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span> <span class=\"mi\">0</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span> <span class=\"mi\">8</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(def._((quote._~23~25kernel)._raise-argument-error))\" style=\"color: inherit\">raise-argument-error</a></span> <span class=\"o\">'</span><span class=\"ss\">rank</span> <span class=\"s2\">\"integer between 0 <a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a> 7\"</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"sc\">#\\a</span> <span class=\"sc\">#\\b</span> <span class=\"sc\">#\\c</span> <span class=\"sc\">#\\d</span> <span class=\"sc\">#\\e</span> <span class=\"sc\">#\\f</span> <span class=\"sc\">#\\g</span> <span class=\"sc\">#\\h</span><span class=\"p\">)</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"sc\">#\\8</span> <span class=\"sc\">#\\7</span> <span class=\"sc\">#\\6</span> <span class=\"sc\">#\\5</span> <span class=\"sc\">#\\4</span> <span class=\"sc\">#\\3</span> <span class=\"sc\">#\\2</span> <span class=\"sc\">#\\1</span><span class=\"p\">)</span> <span class=\"n\">rank</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>after-interactive-move</code> method finds the selected piece using <code>find-next-selected-snip</code>, determines the location where the piece was dragged with the mouse and tells the chess piece about it by calling <code>set-location</code>. A call to <code>position-piece</code> will than place the piece at its new position. <code>after-interactive-move</code> will also check if the destination square is occupied by another piece and removes it from the board. At this point, the code does not check what color piece is at the destination, or that the move is actually valid according to chess rules, this will be done later:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n\n    <span class=\"c1\">;; rest of the chess-board% definition remains unchanged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-interactive-move</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">find-next-selected-snip</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"p\">(</span><span class=\"n\">xy-&gt;location</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-y</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">target-piece</span> <span class=\"p\">(</span><span class=\"n\">piece-at-location</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">target-piece</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">piece</span> <span class=\"n\">target-piece</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">target-piece</span> <span class=\"n\">set-location</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._remove))\" style=\"color: inherit\">remove</a></span> <span class=\"n\">target-piece</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">piece</span> <span class=\"n\">set-location</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"n\">position-piece</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">piece</span><span class=\"p\">))</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The above method makes use of a <code>piece-at-location</code> function to find a chess piece at a specified location on the chess board, this function simply iterates over all the pieces on the board, using <code>get-location</code> to determine if the piece is the correct one:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">piece-at-location</span> <span class=\"n\">board</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"n\">loop</span> <span class=\"p\">((</span><span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">board</span> <span class=\"n\">find-first-snip</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">snip</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">get-location</span><span class=\"p\">))</span>\n            <span class=\"n\">snip</span>\n            <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">next</span><span class=\"p\">)))</span>\n        <span class=\"no\">#f</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<hr />\n\n<p><strong>NOTE:</strong> If you read the <code>pasteboard%</code> documentation, you might notice that this class also has an <code>after-move-to</code> method, which can also be overridden. However, this method is invoked every time a snip is moved, including as a result of a call to the <code>move</code> method. If snips are moved inside an <code>after-move-to</code> method they will trigger another call to the <code>after-move-to</code> method, and this needs to be handled carefully otherwise <code>after-move-to</code> will be called recursively in an infinite sequence of calls. It is best to only override this method to implement functionality that does not require further moving of snips.</p>\n\n<hr />\n\n<p>You can find the updated program in this <a href=\"https://gist.github.com/alex-hhh/95530cb80d9ab81102428f5b506e2dee\">GitHub Gist</a> and the result of running it is shown below. Note how the chess pieces snap to the closest square when they are moved with the mouse and any piece at the destination square is removed from the board. So far, however, the program allows any move to be made, and we will fix that, but in the next section we&rsquo;ll look at how to provide better visual feedback when moving pieces.</p>\n\n<div class=\"figure\"><img src=\"/img/a018/chess-board4low.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"highlight-the-target-square-during-a-drag-operation\">Highlight the target square during a drag operation</h2>\n\n<p>Since this tutorial is about <code>pasteboard%</code> and graphics, it might be interesting to update the previous program to highlight the destination square as a chess piece is dragged across the board with the mouse, as this will allow us to explore some more <code>pasteboard%</code> methods.</p>\n\n<p>We will need a function which can highlight a square, the function would simply draw another square at a specified location on the board with a <code>brush%</code>, which is used for the background of the square, and a <code>pen%</code>, which draws the outline. In anticipation of further use, this method is more complex than we strictly need now, as it allows specifying the brush and pen colors separately, and if any of these are <code>#f</code>, the relevant part is not drawn, therefore, to just draw the outline, you can specify #f for the <code>color-name</code> and a valid pen color:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">highlight-square</span> <span class=\"n\">dc</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"n\">color-name</span> <span class=\"n\">border-color-name</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">rank</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">location-&gt;rank-file</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">brush</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">color-name</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">((</span><span class=\"n\">base</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-color-database</span> <span class=\"n\">find-color</span> <span class=\"n\">color-name</span><span class=\"p\">))</span>\n               <span class=\"p\">(</span><span class=\"n\">color</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(def._((lib._racket/private/class-internal..rkt)._make-object))\" style=\"color: inherit\">make-object</a></span> <span class=\"n\">color%</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">base</span> <span class=\"n\">red</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">base</span> <span class=\"n\">green</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">base</span> <span class=\"n\">blue</span><span class=\"p\">)</span> <span class=\"mf\">0.3</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-brush-list</span> <span class=\"n\">find-or-create-brush</span> <span class=\"n\">color</span> <span class=\"o\">'</span><span class=\"ss\">solid</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-brush-list</span> <span class=\"n\">find-or-create-brush</span> <span class=\"s2\">\"black\"</span> <span class=\"o\">'</span><span class=\"ss\">transparent</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">pen</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">border-color-name</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-pen-list</span> <span class=\"n\">find-or-create-pen</span> <span class=\"n\">border-color-name</span> <span class=\"mi\">2</span> <span class=\"o\">'</span><span class=\"ss\">solid</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-pen-list</span> <span class=\"n\">find-or-create-pen</span> <span class=\"s2\">\"black\"</span> <span class=\"mi\">1</span> <span class=\"o\">'</span><span class=\"ss\">transparent</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-pen</span> <span class=\"n\">pen</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-brush</span> <span class=\"n\">brush</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">dc-width</span> <span class=\"n\">dc-height</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">get-size</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">cell-width</span> <span class=\"n\">cell-height</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">dc-width</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">dc-height</span> <span class=\"mi\">8</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">draw-rectangle</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span> <span class=\"n\">cell-width</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">rank</span> <span class=\"n\">cell-height</span><span class=\"p\">)</span> <span class=\"n\">cell-width</span> <span class=\"n\">cell-height</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Since the highlighted square is not part of the interactive section of the <code>pasteboard%</code> it needs to be drawn as part of the <code>on-paint</code> method, together with the chess board background. The <code>on-paint</code> method does not know if a mouse drag operation is in progress and where it is at, so the <code>chess-board%</code> object will hold a <code>highlight-location</code> value, which will be managed by methods that do have access to the mouse position and drag operation status:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n\n    <span class=\"c1\">;; rest of the chess-board% definition remains unchanged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">highlight-location</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">on-paint</span> <span class=\"n\">before?</span> <span class=\"n\">dc</span> <span class=\"o\">.</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">before?</span>\n        <span class=\"p\">(</span><span class=\"n\">draw-chess-board</span> <span class=\"n\">dc</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">highlight-location</span>\n          <span class=\"p\">(</span><span class=\"n\">highlight-square</span> <span class=\"n\">dc</span> <span class=\"n\">highlight-location</span> <span class=\"no\">#f</span> <span class=\"s2\">\"indianred\"</span><span class=\"p\">))))</span>\n\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The state of the <code>highlight-location</code> variable is maintained by three methods: <code>on-interactive-move</code>, <code>on-move-to</code>, and <code>after-interactive-move</code>.</p>\n\n<p>First, we override the <code>on-interactive-move</code> method, which is called once only, when the mouse drag operation starts, and receives the mouse event that started the drag. In this method, we look for the selected snip and calculate the difference between the mouse event coordinates and the snip position &mdash; this represents the place on the snip where the mouse picked it up. This information is stored in the pasteboard object as <code>drag-dx</code>, <code>drag-dy</code> variables and it is needed because <code>after-interactive-move</code> will position the snip in the square where the mouse pointer is, not where the top-left corner of the dragged snip is:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n\n    <span class=\"c1\">;; rest of the chess-board% definition remains unchanged...</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">drag-dx</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">drag-dy</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">on-interactive-move</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">find-next-selected-snip</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._box))\" style=\"color: inherit\">box</a></span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._box))\" style=\"color: inherit\">box</a></span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-snip-location</span> <span class=\"n\">piece</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">drag-dx</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._unbox))\" style=\"color: inherit\">unbox</a></span> <span class=\"n\">x</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">drag-dy</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._unbox))\" style=\"color: inherit\">unbox</a></span> <span class=\"n\">y</span><span class=\"p\">))))</span>\n\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Next, we need to override the <code>on-move-to</code> method, which is called each time a snip is moved and it receives the <code>x</code>, <code>y</code> coordinates where the snip would be moved to &mdash; these coordinates represent the top left corner of the snip. This method is invoked even if a snip is moved as a result of a call to <code>move</code>, but the <code>dragging?</code> flag indicates if this is a move resulting from dragging with the mouse or not. In this method, we can determine the location where the chess piece would be placed by applying the <code>drag-dx</code> and <code>drag-dy</code> offsets to the snip position and set <code>highlight-location</code> to this location. Since the background needs a redraw, we also queue a refresh call with the canvas. Note that the method implementation is careful not to call refresh if the target location has not actually changed &mdash; this avoids too many redraws during a drag operation:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n\n    <span class=\"c1\">;; rest of the chess-board% definition remains unchanged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">on-move-to</span> <span class=\"n\">snip</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">dragging?</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">dragging?</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"p\">(</span><span class=\"n\">xy-&gt;location</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">x</span> <span class=\"n\">drag-dx</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">y</span> <span class=\"n\">drag-dy</span><span class=\"p\">))))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"n\">highlight-location</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">highlight-location</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-canvas</span><span class=\"p\">)</span> <span class=\"n\">refresh</span><span class=\"p\">)))))</span>\n\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Finally, the <code>after-interactive-move</code> method is updated to set <code>highlight-location</code> to <code>#f</code>, since the piece drag has now terminated and the highlighted location does not need to be drawn anymore.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n\n    <span class=\"c1\">;; rest of the chess-board% definition remains unchanged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-interactive-move</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"c1\">;; rest of the `after-interactive-move` definition remains unchanged...</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">highlight-location</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-canvas</span><span class=\"p\">)</span> <span class=\"n\">refresh</span><span class=\"p\">))</span>\n\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>You can find the updated program in this <a href=\"https://gist.github.com/alex-hhh/d5eca4403146d2b384712bd0cb892daa\">GitHub Gist</a> and the result of running it is shown below. We will look next at how to validate the moves and only permit valid ones on the chess board.</p>\n\n<div class=\"figure\"><img src=\"/img/a018/chess-board5low.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"restrict-movement-according-to-game-rules\">Restrict movement according to game rules</h2>\n\n<p>In the current state, pieces can be moved only on the board squares, but the actual validity of a move is not considered: for example a pawn can only move forward one square, and the user should not be able to move the piece to just any location on the board. We can implement this easily by adding a <code>valid-moves</code> method to the <code>chess-piece%</code> class, which will return a list of valid moves for the piece, than we can update the <code>after-interactive-move</code> to check the validity of the destination location against this list. First let&rsquo;s update the <code>after-interactive-move</code> method: note that the piece location is updated and any piece at the target location is only removed if the move is valid, also, if the piece location is not updated, <code>position-piece</code> will simply move the piece back to its original location.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n  \n    <span class=\"c1\">;; rest of the `chess-board%` definition remains unchanged</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-interactive-move</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">find-next-selected-snip</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"p\">(</span><span class=\"n\">xy-&gt;location</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-y</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">valid-moves</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">piece</span> <span class=\"n\">valid-moves</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/base..rkt)._member))\" style=\"color: inherit\">member</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"n\">valid-moves</span><span class=\"p\">)</span> <span class=\"c1\">;; NEW PART: check if a move is valid</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">piece</span> <span class=\"n\">set-location</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">target-piece</span> <span class=\"p\">(</span><span class=\"n\">piece-at-location</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">target-piece</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">piece</span> <span class=\"n\">target-piece</span><span class=\"p\">)))</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">target-piece</span> <span class=\"n\">set-location</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._remove))\" style=\"color: inherit\">remove</a></span> <span class=\"n\">target-piece</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"n\">position-piece</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">piece</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">highlight-location</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-canvas</span><span class=\"p\">)</span> <span class=\"n\">refresh</span><span class=\"p\">))</span>\n\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"extending-chess-piece-to-supply-the-list-of-valid-moves\">Extending <code>chess-piece%</code> to supply the list of valid moves</h3>\n\n<p>The <code>chess-piece%</code> object needs to have a <code>valid-moves</code> method which returns a list of valid moves for this piece, considering the type of the piece, its current location and the location of other pieces on the board. Since each piece type (king, queen, knight, etc) has a different set of moves, we could sub-class <code>chess-piece%</code> to provide the different behavior. However, it is actually simpler to provide stand-alone functions for each chess piece type and supply this function to the <code>chess-piece%</code> constructor, so we extend the constructor with a <code>moves</code> argument, which is a function taking the board and the current location, and returning the list of moves. We also need to add a <code>color</code> method to the <code>chess-piece%</code> object: to determine the color we simply look at the piece name: if it is upper case, it is a white piece, otherwise it is black. The overall changes to the class are quite small:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-piece%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">snip%</span>\n    <span class=\"c1\">;; rest of the `chess-piece%` definition remains unchanged...</span>\n  \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._init-field))\" style=\"color: inherit\">init-field</a></span> <span class=\"n\">name</span> <span class=\"n\">glyph</span> <span class=\"n\">font</span> <span class=\"n\">size</span> <span class=\"n\">moves</span> <span class=\"p\">[</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"no\">#f</span><span class=\"p\">])</span>\n    \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/public))\" style=\"color: inherit\">define/public</a></span> <span class=\"p\">(</span><span class=\"n\">color</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-upcase))\" style=\"color: inherit\">string-upcase</a></span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\">white</span> <span class=\"o\">'</span><span class=\"ss\">black</span><span class=\"p\">))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/public))\" style=\"color: inherit\">define/public</a></span> <span class=\"p\">(</span><span class=\"n\">valid-moves</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">admin</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-admin</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">admin</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>        <span class=\"c1\">; can be #f is the snip is not owned</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">board</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">admin</span> <span class=\"n\">get-editor</span><span class=\"p\">)))</span>\n              <span class=\"p\">(</span><span class=\"n\">moves</span> <span class=\"n\">board</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">))</span>\n            <span class=\"c1\">;; Return an empty list if this piece is not on a board</span>\n            <span class=\"o\">'</span><span class=\"p\">())))</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>make-chess-piece</code> can also be updated to supply the right <code>moves</code> function for a corresponding chess piece, this is done by extending the <code>chess-piece-data</code> hash table and just retrieving the information for it. In fact, the <code>chess-piece-data</code> table provides a compact way to define the things that make each <code>chess-piece%</code> individual: its mnemonic, the glyph used for rendering and the function used to determine its valid moves:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-piece-data</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash))\" style=\"color: inherit\">hash</a></span>\n   <span class=\"s2\">\"K\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u2654</span> <span class=\"p\">(</span><span class=\"n\">king-moves</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"Q\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u2655</span> <span class=\"p\">(</span><span class=\"n\">queen-moves</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"R\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u2656</span> <span class=\"p\">(</span><span class=\"n\">rook-moves</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"B\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u2657</span> <span class=\"p\">(</span><span class=\"n\">bishop-moves</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"N\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u2658</span> <span class=\"p\">(</span><span class=\"n\">knight-moves</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"P\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u2659</span> <span class=\"p\">(</span><span class=\"n\">pawn-moves</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"k\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u265A</span> <span class=\"p\">(</span><span class=\"n\">king-moves</span> <span class=\"o\">'</span><span class=\"ss\">black</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"q\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u265B</span> <span class=\"p\">(</span><span class=\"n\">queen-moves</span> <span class=\"o\">'</span><span class=\"ss\">black</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"r\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u265C</span> <span class=\"p\">(</span><span class=\"n\">rook-moves</span> <span class=\"o\">'</span><span class=\"ss\">black</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"b\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u265D</span> <span class=\"p\">(</span><span class=\"n\">bishop-moves</span> <span class=\"o\">'</span><span class=\"ss\">black</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"n\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u265E</span> <span class=\"p\">(</span><span class=\"n\">knight-moves</span> <span class=\"o\">'</span><span class=\"ss\">black</span><span class=\"p\">))</span>\n   <span class=\"s2\">\"p\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"sc\">#\\u265F</span> <span class=\"p\">(</span><span class=\"n\">pawn-moves</span> <span class=\"o\">'</span><span class=\"ss\">black</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">make-chess-piece</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#(form._((lib._syntax/parse..rkt)._id))\" style=\"color: inherit\">id</a></span> <span class=\"p\">[</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"no\">#f</span><span class=\"p\">])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/match.html#(form._((lib._racket/match..rkt)._match-define))\" style=\"color: inherit\">match-define</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">glyph</span> <span class=\"n\">moves</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"n\">chess-piece-data</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#(form._((lib._syntax/parse..rkt)._id))\" style=\"color: inherit\">id</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">font</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-font-list</span> <span class=\"n\">find-or-create-font</span> <span class=\"mi\">20</span> <span class=\"o\">'</span><span class=\"ss\">default</span> <span class=\"o\">'</span><span class=\"ss\">normal</span> <span class=\"o\">'</span><span class=\"ss\">normal</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">chess-piece%</span> <span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#(form._((lib._syntax/parse..rkt)._id))\" style=\"color: inherit\">id</a></span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">glyph</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span> <span class=\"n\">glyph</span><span class=\"p\">)]</span> <span class=\"p\">[</span><span class=\"n\">font</span> <span class=\"n\">font</span><span class=\"p\">]</span>\n                    <span class=\"p\">[</span><span class=\"n\">size</span> <span class=\"mi\">35</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">moves</span> <span class=\"n\">moves</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The last thing we need to do is implement the actual move functions, which implement the actual game logic. There are six move functions, one for each type of chess piece on the board: <code>king-moves</code>, <code>queen-moves</code>, <code>rook-moves</code>, <code>bishop-moves</code>, <code>knight-moves</code> and <code>pawn-moves</code>. These functions are implemented in about 100 lines of Racket code, but only the <code>pawn-moves</code> is listed below, you can find all of them in the full listing in <a href=\"https://gist.github.com/alex-hhh/c7f3782d189482bcd73aabf272dff09c\">this GitHub gist</a>. The code looks complex, but it only checks various locations on the board for the valid moves to see of they are occupied by friendly or enemy pieces:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">valid-rank?</span> <span class=\"n\">rank</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e~3d))\" style=\"color: inherit\">&gt;=</a></span> <span class=\"n\">rank</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"n\">rank</span> <span class=\"mi\">8</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">valid-file?</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e~3d))\" style=\"color: inherit\">&gt;=</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span> <span class=\"mi\">8</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">((</span><span class=\"n\">pawn-moves</span> <span class=\"n\">color</span><span class=\"p\">)</span> <span class=\"n\">board</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">direction</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">color</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">)</span> <span class=\"mi\">-1</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">rank</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">location-&gt;rank-file</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">moves</span> <span class=\"o\">'</span><span class=\"p\">())</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"n\">valid-rank?</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">rank</span> <span class=\"n\">direction</span><span class=\"p\">))</span>\n    <span class=\"c1\">;; can move forward if that square is not occupied</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">candidate</span> <span class=\"p\">(</span><span class=\"n\">rank-file-&gt;location</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">rank</span> <span class=\"n\">direction</span><span class=\"p\">)</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"n\">piece-at-location</span> <span class=\"n\">board</span> <span class=\"n\">candidate</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">moves</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">candidate</span> <span class=\"n\">moves</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"n\">valid-rank?</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">rank</span> <span class=\"n\">direction</span> <span class=\"n\">direction</span><span class=\"p\">))</span>\n          <span class=\"c1\">;; can move two squares forward if the pawn is in its original location</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">color</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"n\">rank</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n                    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">color</span> <span class=\"o\">'</span><span class=\"ss\">black</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"n\">rank</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">candidate</span> <span class=\"p\">(</span><span class=\"n\">rank-file-&gt;location</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">rank</span> <span class=\"n\">direction</span> <span class=\"n\">direction</span><span class=\"p\">)</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)))</span>\n              <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"n\">piece-at-location</span> <span class=\"n\">board</span> <span class=\"n\">candidate</span><span class=\"p\">)</span>\n                <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">moves</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">candidate</span> <span class=\"n\">moves</span><span class=\"p\">))))))))</span>\n    <span class=\"c1\">;; can move forward left if that square is occupied</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"n\">valid-file?</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sub1))\" style=\"color: inherit\">sub1</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">candidate</span> <span class=\"p\">(</span><span class=\"n\">rank-file-&gt;location</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">rank</span> <span class=\"n\">direction</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sub1))\" style=\"color: inherit\">sub1</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">))))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"n\">piece-at-location</span> <span class=\"n\">board</span> <span class=\"n\">candidate</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">color</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">piece</span> <span class=\"n\">color</span><span class=\"p\">))))</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">moves</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">candidate</span> <span class=\"n\">moves</span><span class=\"p\">))))))</span>\n    <span class=\"c1\">;; can move forward right if that square is occupied</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"n\">valid-file?</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">candidate</span> <span class=\"p\">(</span><span class=\"n\">rank-file-&gt;location</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">rank</span> <span class=\"n\">direction</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">))))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"n\">piece-at-location</span> <span class=\"n\">board</span> <span class=\"n\">candidate</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">color</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">piece</span> <span class=\"n\">color</span><span class=\"p\">))))</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">moves</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">candidate</span> <span class=\"n\">moves</span><span class=\"p\">)))))))</span>\n\n  <span class=\"n\">moves</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"highlight-valid-moves-and-opponent-controlled-squares\">Highlight valid moves and opponent controlled squares</h3>\n\n<p>The <code>valid-moves</code> method can also be used to highlight squares that are controlled by the opponent as well as the valid moves for the selected piece. Just as with highlighting the current location, the actual drawing of the controlled squares is done in the <code>on-paint</code> method, and since this method has no access to the game logic itself, it relies on two lists of locations <code>valid-move-locations</code> for the location where the selected piece can move and <code>opponent-move-locations</code> where the opponent pieces can move to. The <code>after-select</code> method is called when a piece is selected or unselected and we can override this method to calculate the valid moves lists. The <code>after-interactive-move</code> also needs to keep track of the <code>valid-move-locations</code>, since the location of the selected piece changes after a move:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n    <span class=\"c1\">;; rest of the chess-board% definition remains unchanged</span>\n  \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">valid-move-locations</span> <span class=\"o\">'</span><span class=\"p\">())</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">opponent-move-locations</span> <span class=\"o\">'</span><span class=\"p\">())</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">on-paint</span> <span class=\"n\">before?</span> <span class=\"n\">dc</span> <span class=\"o\">.</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">before?</span>\n        <span class=\"p\">(</span><span class=\"n\">draw-chess-board</span> <span class=\"n\">dc</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">((</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-list))\" style=\"color: inherit\">in-list</a></span> <span class=\"n\">valid-move-locations</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"n\">highlight-square</span> <span class=\"n\">dc</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"no\">#f</span> <span class=\"s2\">\"seagreen\"</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">((</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-list))\" style=\"color: inherit\">in-list</a></span> <span class=\"n\">opponent-move-locations</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"n\">highlight-square</span> <span class=\"n\">dc</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"s2\">\"firebrick\"</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">highlight-location</span>\n          <span class=\"p\">(</span><span class=\"n\">highlight-square</span> <span class=\"n\">dc</span> <span class=\"n\">highlight-location</span> <span class=\"no\">#f</span> <span class=\"s2\">\"indianred\"</span><span class=\"p\">))))</span>\n          \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-select</span> <span class=\"n\">snip</span> <span class=\"n\">on?</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">on?</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">valid-move-locations</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">valid-moves</span><span class=\"p\">))</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">opponent-move-locations</span>\n                  <span class=\"p\">(</span><span class=\"n\">collect-opponent-moves</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">color</span><span class=\"p\">))))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">opponent-move-locations</span> <span class=\"o\">'</span><span class=\"p\">())</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">valid-move-locations</span> <span class=\"o\">'</span><span class=\"p\">())))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-canvas</span><span class=\"p\">)</span> <span class=\"n\">refresh</span><span class=\"p\">))</span>\n    \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-interactive-move</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"c1\">;; rest of the `after-interactive-move` definition remains unchanged</span>\n      \n      <span class=\"c1\">;; Note: piece is still selected, but the valid moves are relative to</span>\n      <span class=\"c1\">;; the new position</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">valid-move-locations</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">piece</span> <span class=\"n\">valid-moves</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-canvas</span><span class=\"p\">)</span> <span class=\"n\">refresh</span><span class=\"p\">))</span>\n\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>collect-opponent-moves</code> function is used by <code>after-select</code> to get the list of all possible move locations that can be made by the opponent color. The function simply collects all valid moves from the opponent pieces and removes duplicates from them:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">collect-opponent-moves</span> <span class=\"n\">board</span> <span class=\"n\">color</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">moves</span> <span class=\"o\">'</span><span class=\"p\">())</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"n\">loop</span> <span class=\"p\">((</span><span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">board</span> <span class=\"n\">find-first-snip</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">snip</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">color</span><span class=\"p\">)</span> <span class=\"n\">color</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">moves</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._append))\" style=\"color: inherit\">append</a></span> <span class=\"n\">moves</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">valid-moves</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">next</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._remove-duplicates))\" style=\"color: inherit\">remove-duplicates</a></span> <span class=\"n\">moves</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>You can find the updated program in this <a href=\"https://gist.github.com/alex-hhh/c7f3782d189482bcd73aabf272dff09c\">GitHub gist</a> and the result of running it is shown below. We will look next at how to implement turn based game play.</p>\n\n<div class=\"figure\"><img src=\"/img/a018/chess-board6low.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"turn-based-game-play\">Turn based game play</h2>\n\n<p>The last thing we need to implement a proper chess game is to keep track of which color has to move next, as currently, any color piece can be moved at any time. We will also update the <code>pasteboard%</code> to display a message if the user tries to move a piece of the wrong color.</p>\n\n<p>We&rsquo;ll start by adding support to display a message on top of the game play board. The message is not interactive, so it will be drawn from the <code>on-paint</code> function, however, since the message needs to be drawn on top of the chess pieces, it will be drawn on the second invocation of <code>on-paint</code>, when the <code>before?</code> argument is <code>#f</code>. The message is stored in the <code>message</code> field and is updated by the <code>set-message</code> method, this method also sets up a timer to clear the message after a predefined interval (2 seconds in our case) and also requests a canvas refresh, as without that, the <code>pasteboard%</code> does not know that it needs a redraw:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n    <span class=\"c1\">;; Rest of the chess-board% definition remains unchnaged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">message</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">message-timer</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">timer%</span>\n           <span class=\"p\">[</span><span class=\"n\">notify-callback</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">()</span>\n                              <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">message</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n                              <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-canvas</span><span class=\"p\">)</span> <span class=\"n\">refresh</span><span class=\"p\">))]))</span>\n                              \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">set-message</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">message</span> <span class=\"n\">m</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">message-timer</span> <span class=\"n\">start</span> <span class=\"mi\">2000</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-canvas</span><span class=\"p\">)</span> <span class=\"n\">refresh</span><span class=\"p\">))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">on-paint</span> <span class=\"n\">before?</span> <span class=\"n\">dc</span> <span class=\"o\">.</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">before?</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n            <span class=\"p\">(</span><span class=\"n\">draw-chess-board</span> <span class=\"n\">dc</span><span class=\"p\">)</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">((</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-list))\" style=\"color: inherit\">in-list</a></span> <span class=\"n\">valid-move-locations</span><span class=\"p\">)))</span>\n              <span class=\"p\">(</span><span class=\"n\">highlight-square</span> <span class=\"n\">dc</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"no\">#f</span> <span class=\"s2\">\"seagreen\"</span><span class=\"p\">))</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">((</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-list))\" style=\"color: inherit\">in-list</a></span> <span class=\"n\">opponent-move-locations</span><span class=\"p\">)))</span>\n              <span class=\"p\">(</span><span class=\"n\">highlight-square</span> <span class=\"n\">dc</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"s2\">\"firebrick\"</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">highlight-location</span>\n              <span class=\"p\">(</span><span class=\"n\">highlight-square</span> <span class=\"n\">dc</span> <span class=\"n\">highlight-location</span> <span class=\"no\">#f</span> <span class=\"s2\">\"indianred\"</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">message</span> <span class=\"c1\">;; NEW PART: show a message, if any, on top</span>\n            <span class=\"p\">(</span><span class=\"n\">display-message</span> <span class=\"n\">dc</span> <span class=\"n\">message</span><span class=\"p\">))))</span>\n    \n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The actual drawing of the message is done in the <code>display-message</code> function, which is shown below. The function calculates the text position such that the message is always displayed in the middle of the board:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">display-message</span> <span class=\"n\">dc</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">font</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-font-list</span> <span class=\"n\">find-or-create-font</span> <span class=\"mi\">24</span> <span class=\"o\">'</span><span class=\"ss\">default</span> <span class=\"o\">'</span><span class=\"ss\">normal</span> <span class=\"o\">'</span><span class=\"ss\">normal</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">[</span><span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"n\">_1</span> <span class=\"n\">_2</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">get-text-extent</span> <span class=\"n\">message</span> <span class=\"n\">font</span> <span class=\"no\">#t</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">dc-width</span> <span class=\"n\">dc-height</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">get-size</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">dc-width</span> <span class=\"n\">w</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">dc-height</span> <span class=\"n\">h</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">brush</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-brush-list</span> <span class=\"n\">find-or-create-brush</span> <span class=\"s2\">\"bisque\"</span> <span class=\"o\">'</span><span class=\"ss\">solid</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">pen</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-pen-list</span> <span class=\"n\">find-or-create-pen</span> <span class=\"s2\">\"black\"</span> <span class=\"mi\">1</span> <span class=\"o\">'</span><span class=\"ss\">transparent</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-brush</span> <span class=\"n\">brush</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-pen</span> <span class=\"n\">pen</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">draw-rectangle</span> <span class=\"mi\">0</span> <span class=\"n\">y</span> <span class=\"n\">dc-width</span> <span class=\"n\">h</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-font</span> <span class=\"n\">font</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-text-foreground</span> <span class=\"s2\">\"firebrick\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">draw-text</span> <span class=\"n\">message</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>To maintain the color that can move next, we can use a <code>turn</code> field to store the piece color <code>'white'</code> or <code>'black</code>. The <code>can-interactive-move?</code> method is invoked by the <code>pasteboard%</code> to check if a snip can be moved with the mouse. We can override this method to return <code>#t</code> if the selected piece color is the same as the value of <code>turn</code>, and <code>#f</code> otherwise. This method also calls <code>set-message</code> to display a message if the user tries to move a piece of the wrong color. The <code>after-interactive-move</code> also needs to be updated to alternate the colors for <code>turn</code> after a successful move. As a help for the user, the <code>after-select</code> method is also updated to display a message if the user selects a piece of the wrong color, however the selection is still allowed, so the valid moves squares are still highlighted &mdash; even though the wrong color piece can be selected, it will not move as <code>can-interactive-move?</code> will prevent that:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n    <span class=\"c1\">;; Rest of the chess-board% definition remains unchnaged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">turn</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">)</span>\n    \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">can-interactive-move?</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">find-next-selected-snip</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">turn</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">piece</span> <span class=\"n\">color</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"n\">set-message</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"It's <a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a> turn to move\"</span>\n                      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">turn</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">)</span> <span class=\"s2\">\"white's\"</span> <span class=\"s2\">\"black's\"</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">turn</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">piece</span> <span class=\"n\">color</span><span class=\"p\">)))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-interactive-move</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"c1\">;; rest of `after-interactive-move` definiton remains unchanged...</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/base..rkt)._member))\" style=\"color: inherit\">member</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"n\">valid-moves</span><span class=\"p\">)</span>\n        <span class=\"c1\">;; rest of the lines unchanged...</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">turn</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">turn</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\">black</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">))))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-select</span> <span class=\"n\">snip</span> <span class=\"n\">on?</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">on?</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n            <span class=\"c1\">;; rest of the lines unchanged...</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">turn</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">color</span><span class=\"p\">))</span>\n              <span class=\"p\">(</span><span class=\"n\">set-message</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"It's <a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a> turn to move\"</span>\n                            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">turn</span> <span class=\"o\">'</span><span class=\"ss\">white</span><span class=\"p\">)</span> <span class=\"s2\">\"white's\"</span> <span class=\"s2\">\"black's\"</span><span class=\"p\">)))))</span>\n          <span class=\"c1\">;; rest of the lines unchanged...</span>\n          <span class=\"p\">))</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>You can find the updated program in this <a href=\"https://gist.github.com/alex-hhh/f6ea1a5cba92914272f1ce8c66e55455\">GitHub gist</a> and the result of running it is shown below. While this program is significantly more complex than what we started with, it is still only 440 lines of code and it implements an almost complete chess game play &mdash; there are a few rules missing, such as castling and en-passant capture, but since they don&rsquo;t contribute anything to learning about Racket <code>pasteboard%</code> objects, they were left out, feel free to take the program and extend it.</p>\n\n<div class=\"figure\"><img src=\"/img/a018/chess-board7low.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>If you try to use the program for a bit, you might notice that the <code>pasteboard%</code> implements behavior that is not useful in a chess game: one can select and move multiple pieces, move pieces with the keyboard or deleting pieces from the board by pressing delete. In the next post, we&rsquo;ll look at how to fix these problems.</p>") (u . "/img/a018/thumb.png")) ((? . 9) f post (u . "Running and Cycling Workout Editor") (? . 9) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/05/workout-editor.html" . windows) (u . "/2018/05/workout-editor.html") (u . "2018-05-27T08:37:52") (? . 11) (? . 10) (c (u . "activitylog2")) (u . "\n<p>A Garmin fitness device can use workouts during a bike or run activity: they are a collection of steps with a duration and intensity (such as heart rate, pace or power). While running or biking, the device keeps track of the duration and will sound an alarm if the intensity is too high or too low. Workouts can be created on the Garmin Connect website, but I decided to write my own application for creating workouts.</p>") #t (u . "\n<p>A Garmin fitness device can use workouts during a bike or run activity: they are a collection of steps with a duration and intensity (such as heart rate, pace or power). While running or biking, the device keeps track of the duration and will sound an alarm if the intensity is too high or too low. Workouts can be created on the Garmin Connect website, but I decided to write my own application for creating workouts.</p>\n<!-- more-->\n\n<p>Garmin devices use the &ldquo;Fitness Interchange Format&rdquo; (files with the &ldquo;FIT&rdquo; extension) for any data that is transferred to and from the device. The data received from the device is most often activity or session data, so FIT files are more commonly associated with fitness activities. However, FIT files are used for other things as well: in particular, device settings and workouts can be sent to the device as a FIT file. &ldquo;Sending to the device&rdquo; in this case means simply copying the file: when the Garmin device is connected to the computer via USB, it shows up as a normal USB Drive and files can be copied on the &ldquo;NewFiles&rdquo; folder on that device.</p>\n\n<div style=\"text-align:center\">\n <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/8kA0-ahHxGI\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n\n<h2 id=\"a-programmers-workout-editor\">A programmers workout editor</h2>\n\n<p>Relatively early on in the ActivityLog2 project, I added support for writing out FIT files, especially workouts and settings. Since I am a programmer, I just wrote a small library which allowed to write workouts something like this:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">hr/warmup</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">hr/bpm</span> <span class=\"mi\">60</span> <span class=\"mi\">163</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">pace/hard</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">speed</span> <span class=\"p\">(</span><span class=\"n\">pace</span> <span class=\"mi\">4</span> <span class=\"mi\">29</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">pace</span> <span class=\"mi\">4</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">pace/easy</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">speed</span> <span class=\"p\">(</span><span class=\"n\">pace</span> <span class=\"mi\">7</span> <span class=\"mi\">32</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">pace</span> <span class=\"mi\">5</span> <span class=\"mi\">7</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">pace/tempo</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">speed</span> <span class=\"p\">(</span><span class=\"n\">pace</span> <span class=\"mi\">4</span> <span class=\"mi\">45</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">pace</span> <span class=\"mi\">4</span> <span class=\"mi\">31</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">wk-daniel-q10</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">wk</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">fit-workout-file%</span> <span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"s2\">\"daniel-q9\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">sport</span> <span class=\"mi\">1</span><span class=\"p\">]))</span>\n  <span class=\"p\">((</span><span class=\"n\">workout</span>\n    <span class=\"p\">(</span><span class=\"n\">step</span> <span class=\"p\">(</span><span class=\"n\">miles</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">hr/warmup</span><span class=\"p\">)</span> <span class=\"n\">warmup</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"n\">repeat</span>\n     <span class=\"mi\">4</span>\n     <span class=\"p\">(</span><span class=\"n\">step</span> <span class=\"p\">(</span><span class=\"n\">miles</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">pace/tempo</span><span class=\"p\">)</span> <span class=\"n\">active</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"n\">step</span> <span class=\"p\">(</span><span class=\"n\">minutes</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">no-target</span><span class=\"p\">)</span> <span class=\"n\">recover</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"n\">step</span> <span class=\"p\">(</span><span class=\"n\">minutes</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">pace/easy</span><span class=\"p\">)</span> <span class=\"n\">recover</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"n\">repeat</span>\n     <span class=\"mi\">3</span>\n     <span class=\"p\">(</span><span class=\"n\">step</span> <span class=\"p\">(</span><span class=\"n\">miles</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">pace/tempo</span><span class=\"p\">)</span> <span class=\"n\">active</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"n\">step</span> <span class=\"p\">(</span><span class=\"n\">minutes</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">no-target</span><span class=\"p\">)</span> <span class=\"n\">recover</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"n\">step</span> <span class=\"p\">(</span><span class=\"n\">miles</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">pace/easy</span><span class=\"p\">)</span> <span class=\"n\">cooldown</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"n\">step</span> <span class=\"p\">(</span><span class=\"n\">lap-button</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">pace/easy</span><span class=\"p\">)</span> <span class=\"n\">cooldown</span><span class=\"p\">))</span>\n   <span class=\"n\">wk</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">wk</span> <span class=\"n\">get-fit-data</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>To someone familiar with writing (or reading) code it should not be too difficult to determine that the code above defines the following workout:</p>\n\n<ul>\n <li>A warmup step, 2 miles long with a &ldquo;hr/warmup&rdquo; heart rate (this is defined  above as being a Heart Rate between 60 and 163 BPM</li>\n <li>A repeat (four times) of: 1 mile at tempo pace (this is defined above as  4:45 to 4:31 min/km followed by 1 minute recovery</li>\n <li>5 minutes at an easy pace (defined above as 7:32 to 5:07 min/km)</li>\n <li>another repeat (three times) of: 1 mile at tempo pace followed by 1 minute  recovery</li>\n <li>5 minutes cooldown at an easy pace</li>\n <li>another cooldown step which lasts until the &ldquo;Lap&rdquo; button is pressed on the  watch</li></ul>\n\n<p>As a side note, the code above defines a <code>wk-daniel-q10</code> function, which, when called, returns a byte string representing the binary FIT workout data. This data can be written to a file and transferred to the device.</p>\n\n<p>This method of writing workouts has the advantage that workouts can be written using text editors, and they are really Racket programs, so one has the full flexibility of a programming language when defining them. The library that is used to write these workouts is about 150 lines of code and I was able to write it in an afternoon.</p>\n\n<h2 id=\"a-gui-workout-editor\">A GUI workout editor</h2>\n\n<p>I have used the above method for writing workouts for the past four years to write workouts for my training needs, but it is not for everyone. After a while I realized that it has some limitations: even as a programmer, when it comes to managing my training, I prefer a GUI approach, with immediate feedback. In particular, I wanted feedback on the estimated duration of the workout, as well as percentage of time spent in &ldquo;active&rdquo; vs \" recovery\". Writing a GUI application is more difficult than a simple library so I kept postponing this project (for comparison, the GUI workout editor is about 3000 lines of code vs about just 150 for the helper library). However, I had some more spare time than usual in the last few weeks, so I decided to try to implement it. The result is here:</p>\n\n<div class=\"figure\"><img src=\"/img/a014/workout-editor.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The workout editor is not released yet (there are still some bugs that need fixing), so you will need to download the <a href=\"https://github.com/alex-hhh/ActivityLog2\">source code</a> and build it.</p>\n\n<p>What it can do now:</p>\n\n<ul>\n <li>build bike and running workouts based on Heart Rate, Pace or Power</li>\n <li>estimate the duration of a workout, useful if you want your workout to fit  in a specified time (e.g. 1 hour), as well as percentage of time spent in  warmup/cooldown or active/rest.</li>\n <li>generate FIT workout files which can be used on a Garmin device (other  devices might work too.</li></ul>\n\n<p>Plans for the future:</p>\n\n<ul>\n <li>Since workouts are stored in the database, activities can be linked back to  workouts. This would be useful in providing better estimates for workout  duration/distance/effort.</li>\n <li>Generate ERG/MRG workout files for use on a <a href=\"/2017/11/bike-trainer.html\">bike  trainer</a></li>\n <li>In addition to time estimates, provide plots of estimated W&rsquo;Bal expenditure  and recovery &mdash; a Critical Power model can determine if the designed workout  is too hard or too easy, which would be really cool.</li></ul>") (u . "/img/a014/thumb.png")) ((? . 11) f post (u . "Arduino 433Mhz Receiver -- Reading Keyfobs") (? . 11) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/05/arduino-433mhz-receiver.html" . windows) (u . "/2018/05/arduino-433mhz-receiver.html") (u . "2018-05-19T07:45:18") (? . 12) (? . 9) (c (u . "arduino")) (u . "\n<p>I bought a 433Mhz receiver shield for Arduino as I wanted to experiment with wireless communication, and, as the first application, I built a receiver that can read serial numbers and button status from my garage door opener remote.</p>") #t (u . "\n<p>I bought a 433Mhz receiver shield for Arduino as I wanted to experiment with wireless communication, and, as the first application, I built a receiver that can read serial numbers and button status from my garage door opener remote.</p>\n<!-- more-->\n\n<p>The remote used by the garage door opener is built using the HCS200 chip, which is a code hopping encoder. It used in many remote key-less entry systems and seems to be quite popular: I personally have three key remotes that use this chip, all for different systems. The HCS200 works with digital signals only, i.e. it does not transmit anything, instead, its digital output pin is usually connected to a 433Mhz transmitter directly, to use what is known as <a href=\"https://en.wikipedia.org/wiki/On-off_keying\">On-Off Keying</a> modulation. Up to 4 buttons can be connected tp the chip, these are wired directly to a key on the remote. Pressing any of the buttons causes the chip to continuously transmit a code word and a 433Mhz receiver can read this code word, authenticate it, and &ldquo;act&rdquo; upon it, for example open or close a garage door.</p>\n\n<div style=\"text-align:center\">\n <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/wBQeyzdu_kk\" frameborder=\"0\" gesture=\"media\" allow=\"encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n\n<p>Sometimes these chips are also connected to 315Mhz transmitters, I found this to be the case with older remotes. With such a remote, a 315Mhz receiver is needed. If you want to build a received for your own remote it is best to check what frequency it is using for its transmission.</p>\n\n<hr />\n\n<p><strong>NOTE</strong> The chip encrypts a part of its transmission. I do not have the keys for decoding this information, as such the code presented here cannot be used to authenticate the transmissions. It can only be used to identify key remotes based on their serial numbers as well as determining which buttons on the remotes were pressed.</p>\n\n<hr />\n\n<h2 id=\"the-hardware\">The hardware</h2>\n\n<p>To receive the transmissions, I used a 433Mhz Arduino receiver shield. There are many of these on the market, mine is from <a href=\"https://www.freetronics.com.au/products/receiver#.Wvt3NaqFNhF\">Freetronics</a>. I had to solder the stackable headers myself in order to fit it on the Arduino UNO board.</p>\n\n<div class=\"figure\"><img src=\"/img/a013/433Mhz-shield.jpg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><strong>Data Pin:</strong> The receiver shield has only one data pin: it reads high when the carrier wave is detected and low when the carrier wave is not detected. The pin is connected to <code>D8</code> on the Arduino, but I also connected it to <code>D2</code> so I can attach an interrupt and receive data that way (this is the orange jumper wire in the picture).</p>\n\n<p><strong>Antenna:</strong> There is also pin connection for the antenna, this is a piece of wire about 15 to 17 cm in length that is attached to a pin on the side (the green wire in the picture). Without an antenna wire, the receiver has very poor performance, so make sure you don&rsquo;t forget about it.</p>\n\n<p><strong>Status LEDs:</strong> The 433Mhz receiver shield was supposed to have two general purpose leds connected to D6 and D7, but these didn&rsquo;t work on the shield I got, perhaps they were faulty. I wired instead two external leds on the breadboard, a green one which lights up for the <strong>preamble</strong> and a red one which lights up when data is received.</p>\n\n<h2 id=\"data-transmission-overview\">Data Transmission Overview</h2>\n\n<p>The 433Mhz transmission uses <a href=\"https://en.wikipedia.org/wiki/On-off_keying\">On-Off Keying</a> modulation, which is a type of <a href=\"https://en.wikipedia.org/wiki/Amplitude-shift_keying\">Amplitude-Shift keying</a> modulation. The two terms are abbreviated as <strong>OOK</strong> and <strong>ASK</strong> respectively, but, in practical terms, what this means is that, to transmit a digital signal of ones and zeros, the 433Mhz carrier wave is ON, or transmitted, when the digital signal is 1 and it is OFF when the digital signal is 0. It looks like this:</p>\n\n<div class=\"figure\"><img src=\"/img/a013/signal-transmission.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Theoretically, data can be transmitted directly over the wire simply by controlling the on-off state of the transmitter using a shift register, but this would create problems since long strings of ones or zeros would be difficult to detect by the receiver. Instead, the HCS200 encodes each bit using 3 clock cycles, where a 0 places the digital signal high for 2 clock cycles and low or one clock cycle, while a 1 places the digital signal high for one clock cycle and low for two clock cycles. Here is how it looks:</p>\n\n<div class=\"figure\"><img src=\"/img/a013/logic-0-1.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>With this encoding, there are no long periods of ON or OFF transmissions, and a receiver can decode the transmission without having to have an accurate clock. For example, to transmit the number 240, which is 11110000 in binary, the signal pattern would look like this:</p>\n\n<div class=\"figure\"><img src=\"/img/a013/transmit-240.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>In addition to the patterns for 1 and 0, the HCS200 also uses a preamble signal: this signal is a sequence of ON and OFF periods of equal length. Since the encodings for 0 and 1 have different lengths for their ON and OFF periods, the preamble cannot be confused with a regular data and can be used by a receiver to detect the beginning of a transmission.</p>\n\n<p>When it transmits, the HCS200 always sends 66 bits of data in a loop &mdash; the same 66 bits are send repeatedly while the button is pressed. Each individual transmission begins with a <strong>preamble</strong> signal. Following the preamble, there is a <strong>header</strong> time when the transmitter is silent and following the header, the 66 bits of data are sent &mdash; these are encoded as described above. The bits are split in two equal parts: 32 <strong>encrypted bits</strong> and 34 unencrypted bits or <strong>fixed bits</strong> , the contents of the bits are explained in the code word description below. After all the data is transmitted, there is another <strong>guard time</strong> where the transmitter is silent and this may be followed by another transmission:</p>\n\n<div class=\"figure\"><img src=\"/img/a013/hcs200-transmission.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Each HCS200 transmission forms a code word with the structure shown below. The encrypted part would need to be decrypted first and contains the sequence counter for the transmitter, which allows the receiver to determine if the received code word is valid or not. Decryption requires a decryption key, which is only known to the manufacturers, without this, the transmitter cannot be authenticated. The unencrypted part, however, contains the transmitter&rsquo;s serial number as well as the status of its buttons (each transmitter can have up to 4 buttons).</p>\n\n<div class=\"figure\"><img src=\"/img/a013/hcs200-code-word.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"the-software\">The Software</h2>\n\n<p>The source code for this project is available on GitHub, in the <a href=\"https://github.com/alex-hhh/Arduino_433Mhz\">Arduino_433Mhz</a>, the sketch is named <code>hcs200</code>. The code sets up an interrupt handling routine for input pin <code>D2</code>, which processes the data from the 433Mhz shield. The main loop just looks for a received code word and prints it out.</p>\n\n<p>The Arduino program begins running with the <code>setup</code> function. This function ensures that the pins are setup correctly, <code>D8</code> and <code>D2</code> as inputs from the 433Mhz shield and <code>D6</code> and <code>D7</code> as outputs to the lets on the breadboard. The setup code also sets up the <code>pin2ISR</code> as the function to be called when data on the input pin <code>D2</code> changes, this function will be called when the input pin changes from 0 to 1 or from 1 to 0.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"cp\">#define PREAMBLE_LED 7</span>\n<span class=\"cp\">#define DATA_LED 6</span>\n\n<span class=\"kt\">void</span> <span class=\"nf\">setup</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">begin</span><span class=\"p\">(</span><span class=\"mi\">38400</span><span class=\"p\">);</span>\n  <span class=\"c1\">// Board has the data bit wired to pin 8, and we bridge it to pin 2 to be</span>\n  <span class=\"c1\">// able to attach an interrupt.</span>\n  <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"n\">INPUT</span><span class=\"p\">);</span>\n  <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">INPUT</span><span class=\"p\">);</span>\n  <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"n\">PREAMBLE_LED</span><span class=\"p\">,</span> <span class=\"n\">OUTPUT</span><span class=\"p\">);</span>\n  <span class=\"n\">pinMode</span><span class=\"p\">(</span><span class=\"n\">DATA_LED</span><span class=\"p\">,</span> <span class=\"n\">OUTPUT</span><span class=\"p\">);</span>\n  <span class=\"n\">attachInterrupt</span><span class=\"p\">(</span><span class=\"n\">digitalPinToInterrupt</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">pin2ISR</span><span class=\"p\">,</span> <span class=\"n\">CHANGE</span><span class=\"p\">);</span>\n  <span class=\"n\">Serial</span><span class=\"p\">.</span><span class=\"n\">print</span><span class=\"p\">(</span><span class=\"s\">\"Started listening</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>pin2ISR</code> maintains some global state about the state of the receive, since it is invoked each time the digital input changes. First, it maintains <code>rx_state</code>, which records the phase of the receive: <code>RS_NOSYNC</code> when no receive is in progress, <code>RS_PREAMBLE</code> when the preamble is being received, <code>RS_DATA</code> when the actual code word data is being received and <code>RS_COMPLETED</code> indicates that an entire code word has been received.</p>\n\n<p>Received data is stored in <code>rx_buf</code> which is an array of three 32 bit numbers, which can hold a total of 96 bits. The HCS200 sends out only 66 bits, so this buffer is large enough. The next position in the receive buffer is stored in <code>rx_bit_count</code>, but since data is received bit-by-bit, this records the number of bits.</p>\n\n<p>In order to determine what is a &ldquo;long pulse&rdquo; and what is a &ldquo;short pulse&rdquo;, the decoder needs to know the transmission clock period. This is stored in <code>tx_clock</code> and it is determined during the preamble phase which contains transitions every clock period.</p>\n\n<p>Finally, <code>last_timestamp</code> and <code>last_pulse_width</code> are used to keep track of the previous timestamp and pulse width and it is used to decode the bits in the transmission.</p>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">enum</span> <span class=\"n\">RxState</span> <span class=\"p\">{</span>\n    <span class=\"n\">RS_NOSYNC</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">,</span>                      <span class=\"c1\">// Receiver is inactive</span>\n    <span class=\"n\">RS_PREAMBLE</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span>                    <span class=\"c1\">// 50% duty cycle</span>\n    <span class=\"n\">RS_DATA</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"p\">,</span>                        <span class=\"c1\">// DATA is being received</span>\n    <span class=\"n\">RS_COMPLETED</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>                    <span class=\"c1\">// Receive complete</span>\n<span class=\"p\">};</span>\n\n<span class=\"k\">volatile</span> <span class=\"kt\">char</span> <span class=\"n\">rx_state</span> <span class=\"o\">=</span> <span class=\"n\">RS_NOSYNC</span><span class=\"p\">;</span>\n\n<span class=\"kt\">char</span> <span class=\"n\">rx_bit_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">uint32_t</span> <span class=\"n\">rx_buf</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">];</span>\n\n<span class=\"kt\">unsigned</span> <span class=\"n\">tx_clock</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n<span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">last_timestamp</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"kt\">unsigned</span> <span class=\"n\">last_pulse_width</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>pin2ISR</code> function is shown below. It first determines the &ldquo;pulse width&rdquo; which is the time since the function was last called, and reads the state of the input pin. It may be useful to review the transmission pattern of the HCS200 to better understand what is happening:</p>\n\n<div class=\"figure\"><img src=\"/img/a013/hcs200-transmission.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Depending on the state of the receiver (the <code>rx_state</code> value), the <code>pin2ISR</code> function will do one of the following:</p>\n\n<ul>\n <li>if the receiver is inactive, <code>RS_NOSYNC</code>, it looks for a long pulse width,  this corresponds to a long silence before a transmission. If it finds one,  it puts the receiver in <code>RS_PREAMBLE</code> state.</li>\n <li>In <code>RS_PREAMBLE</code> state, the receiver tries to determine the clock period ,  <code>tx_clock</code>, by averaging the pulse widths. If it determines that the last  pulse width was a long one, it switches the to start receiving the data  bits.</li>\n <li>In <code>RS_DATA</code> state, the receiver tries to decode the received bits. It does  that by looking at the last two pulses: a long pulse followed by a short one  represents a <code>1</code> and a short pulse followed by a long one represents a <code>0</code>  (see how the logic 1 and 0 are encoded by the HCS200). In each case it  stores the bit in the appropriate place in <code>rx_buf</code>. Once all bits are  received, the state is changed to <code>RS_COMPLETED</code>, and the main program loop  can now inspect the received code word. The <code>Classify</code> function is used to  determine if a pulse is short, <code>RB_SHORT</code> or long, <code>RB_LONG</code> this function  is not shown here, it is available in the GitHub repository.</li>\n <li>Note that the function does nothing while the receiver is in <code>RS_COMPLETED</code>  state &mdash; in this state, it waits for the main program loop to read the  received data and to reset the state back to <code>RS_NOSYNC</code>, so a new code word  can be received.</li></ul>\n\n<div class=\"brush: c++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">pin2ISR</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n  <span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">micros</span><span class=\"p\">();</span>\n  <span class=\"kt\">unsigned</span> <span class=\"kt\">long</span> <span class=\"n\">pulse_width</span> <span class=\"o\">=</span> <span class=\"n\">timestamp</span> <span class=\"o\">-</span> <span class=\"n\">last_timestamp</span><span class=\"p\">;</span>\n  <span class=\"kt\">int</span> <span class=\"n\">pin</span> <span class=\"o\">=</span> <span class=\"n\">digitalRead</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n\n  <span class=\"k\">switch</span> <span class=\"p\">(</span><span class=\"n\">rx_state</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"k\">case</span> <span class=\"nl\">RS_NOSYNC</span><span class=\"p\">:</span>\n      <span class=\"c1\">// \"Sync\" is a high pulse, folowed by a long low</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pin</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">pulse_width</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10000</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">pulse_width</span> <span class=\"o\">&lt;</span> <span class=\"mi\">50000</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"n\">rx_state</span> <span class=\"o\">=</span> <span class=\"n\">RS_PREAMBLE</span><span class=\"p\">;</span>\n          <span class=\"n\">tx_clock</span> <span class=\"o\">=</span> <span class=\"n\">last_pulse_width</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n  <span class=\"k\">case</span> <span class=\"nl\">RS_PREAMBLE</span><span class=\"p\">:</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pulse_width</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">tx_clock</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n           <span class=\"n\">tx_clock</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">tx_clock</span> <span class=\"o\">+</span> <span class=\"n\">pulse_width</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pin</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">pulse_width</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1000</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"c1\">// pulse_width was for a long low, switch to receiving data.</span>\n          <span class=\"n\">rx_state</span> <span class=\"o\">=</span> <span class=\"n\">RS_DATA</span><span class=\"p\">;</span>\n          <span class=\"n\">rx_bit_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n          <span class=\"n\">memset</span><span class=\"p\">(</span><span class=\"n\">rx_buf</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"k\">sizeof</span><span class=\"p\">(</span><span class=\"n\">rx_buf</span><span class=\"p\">));</span>\n      <span class=\"p\">}</span> <span class=\"k\">else</span> <span class=\"p\">{</span>\n          <span class=\"n\">rx_state</span> <span class=\"o\">=</span> <span class=\"n\">RS_NOSYNC</span><span class=\"p\">;</span>         <span class=\"c1\">// Transmission error</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n  <span class=\"k\">case</span> <span class=\"nl\">RS_DATA</span><span class=\"p\">:</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">pin</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"kt\">int</span> <span class=\"n\">first</span> <span class=\"o\">=</span> <span class=\"n\">Classify</span><span class=\"p\">(</span><span class=\"n\">last_pulse_width</span><span class=\"p\">);</span>\n          <span class=\"kt\">int</span> <span class=\"n\">second</span> <span class=\"o\">=</span> <span class=\"n\">Classify</span><span class=\"p\">(</span><span class=\"n\">pulse_width</span><span class=\"p\">);</span>\n          <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"n\">RB_LONG</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">second</span> <span class=\"o\">==</span> <span class=\"n\">RB_SHORT</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// Received a 1 bit</span>\n              <span class=\"kt\">int</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">rx_bit_count</span> <span class=\"o\">/</span> <span class=\"mi\">32</span><span class=\"p\">;</span>\n              <span class=\"n\">rx_buf</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n              <span class=\"n\">rx_buf</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">|=</span> <span class=\"mh\">0x80000000</span><span class=\"p\">;</span>\n              <span class=\"n\">rx_bit_count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n          <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">first</span> <span class=\"o\">==</span> <span class=\"n\">RB_SHORT</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">second</span> <span class=\"o\">==</span> <span class=\"n\">RB_LONG</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"c1\">// Received a 0 bit</span>\n              <span class=\"kt\">int</span> <span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">rx_bit_count</span> <span class=\"o\">/</span> <span class=\"mi\">32</span><span class=\"p\">;</span>\n              <span class=\"n\">rx_buf</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span> <span class=\"o\">&gt;&gt;=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n              <span class=\"n\">rx_bit_count</span><span class=\"o\">++</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n          <span class=\"k\">else</span> <span class=\"p\">{</span>                        <span class=\"c1\">// invalid pulse combination</span>\n              <span class=\"n\">rx_state</span> <span class=\"o\">=</span> <span class=\"n\">RS_NOSYNC</span><span class=\"p\">;</span>\n          <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rx_bit_count</span> <span class=\"o\">&gt;=</span> <span class=\"n\">MAX_BITS</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n          <span class=\"n\">rx_state</span> <span class=\"o\">=</span> <span class=\"n\">RS_COMPLETED</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"k\">break</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n\n  <span class=\"n\">last_timestamp</span> <span class=\"o\">=</span> <span class=\"n\">timestamp</span><span class=\"p\">;</span>\n  <span class=\"n\">last_pulse_width</span> <span class=\"o\">=</span> <span class=\"n\">pulse_width</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The main program loop is really simple: It sets the leds on and off depending of the state of the receiver (<code>rx_state</code>) and checks if the state is <code>RS_COMPLETED</code>, in which case, it decodes the received data and prints it out to the serial port.</p>\n\n<div class=\"brush: C++\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kt\">void</span> <span class=\"nf\">loop</span><span class=\"p\">()</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">DATA_LED</span><span class=\"p\">,</span> <span class=\"n\">rx_state</span> <span class=\"o\">==</span> <span class=\"n\">RS_DATA</span><span class=\"p\">);</span>\n    <span class=\"n\">digitalWrite</span><span class=\"p\">(</span><span class=\"n\">PREAMBLE_LED</span><span class=\"p\">,</span> <span class=\"n\">rx_state</span> <span class=\"o\">==</span> <span class=\"n\">RS_PREAMBLE</span><span class=\"p\">);</span>\n\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rx_state</span> <span class=\"o\">==</span> <span class=\"n\">RS_COMPLETED</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">rx_bit_count</span> <span class=\"o\">&gt;=</span> <span class=\"n\">MAX_BITS</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">Hcs200_keycode</span> <span class=\"n\">keycode</span><span class=\"p\">;</span>\n            <span class=\"n\">Hcs200Decode</span><span class=\"p\">(</span><span class=\"n\">rx_buf</span><span class=\"p\">,</span> <span class=\"o\">&amp;</span><span class=\"n\">keycode</span><span class=\"p\">);</span>\n            <span class=\"n\">Hcs200Print</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"n\">keycode</span><span class=\"p\">);</span>\n        <span class=\"p\">}</span>\n        <span class=\"n\">rx_state</span> <span class=\"o\">=</span> <span class=\"n\">RS_NOSYNC</span><span class=\"p\">;</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"final-thoughts\">Final thoughts</h2>\n\n<p>It was an interesting project to figure out how the remote keyfobs transmit the data, but it cannot be used for anything important. The keyfobs can be identified by their serial number and the code knows which buttons were pressed, however, since the encrypted part cannot be decrypted without a decryption key, the keyfobs cannot be authenticated and the receiver can never know if the received key code is authentic or fake.</p>") (u . "/img/a013/thumb.png")) ((? . 13) f post (u . "Introducing ActivityLog2") (? . 13) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2017/09/introducing-activitylog2.html" . windows) (u . "/2017/09/introducing-activitylog2.html") (u . "2017-09-15T20:26:56") #f (? . 6) (c (u . "activitylog2")) (u . "\n<p><a href=\"https://github.com/alex-hhh/ActivityLog2\">ActivityLog2</a> is a program that can analyze data recorded by fitness devices such as swim, bike and run sessions. It can be used as a training log and to gain insights about your training using reports and trend charts.</p>") #t (u . "\n<p><a href=\"https://github.com/alex-hhh/ActivityLog2\">ActivityLog2</a> is a program that can analyze data recorded by fitness devices such as swim, bike and run sessions. It can be used as a training log and to gain insights about your training using reports and trend charts.</p>\n<!-- more-->\n\n<p>I have been using ActivityLog2 exclusively for about three years and I also imported my previous data (since 2011) into the database. As of today, my training database contains 2011 training sessions and 2469685 data points, it is 462 Mb in size.</p>\n\n<p>You can find the application on GitHub at <a href=\"https://github.com/alex-hhh/ActivityLog2\">https://github.com/alex-hhh/ActivityLog2</a> and you can download a pre-built release from the &ldquo;Releases&rdquo; tab.</p>\n\n<p align=\"center\"><img align=\"center\" width=\"800\" alt=\"session view\" src=\"https://drive.google.com/uc?export=download&amp;id=0B5h4XOdkim72VmxOOWhYeVN5TGs\" /></p>\n\n<h2 id=\"so-why-did-i-write-it\">So why did I write it?</h2>\n\n<p>I purchased my first GPS device, a Garmin Forerunner 310XT back in June 2011 and started using the Garmin Connect web site to analyse activities and track my progress. While not perfect, the site was sufficient for my needs and I was happy with it. In 2013 I started training for my first Ironman race, and, about two months before the race, Garmin started upgrading their Garmin Connect web site to a newer version. Unfortunately, this process did not go smoothly and the site was down for extended periods of time. I was sitting in front of my computer, with the Forerunner in my hand and I could not view my latest ride or run because some computer in a data centre half way across the globe was not working properly.</p>\n\n<p>It was around that time that I decided to write my own tool to analyze training data, as I did not want to depend on other people&rsquo;s servers. I wanted an platform that I can fully control, both the training data itself and the software that analyses the data. Here is how ActivityLog2 meets this criteria:</p>\n\n<ul>\n <li>\n  <p>Data is stored on the local computer and you always have access to it as  long as you can access your computer. You are responsible for backing up  your data, of course.</p></li>\n <li>\n  <p>Data is stored in an SQLite database, and can be easily accessed from most  programming languages, without need to go through the ActivityLog2  application. In particular, I have several Excel spreadsheets that connect  directly to it for some of the reports.</p></li>\n <li>\n  <p>The original activity files are stored in the database unmodified, and are  always available if you want to export them to use on some other platform.</p></li>\n <li>\n  <p>The ActivityLog2 application is freely available in source code, and anyone  can see how it works and update it to meet their needs without requiring my  permission</p></li>\n <li>\n  <p>The ActivityLog2 application already has a decent set of features, but in  addition to this, all data processing algorithms are available as  programming interfaces. This makes it a good starting platform for writing  your own analysis scripts. For example, I have scripts that generate  workouts to download on the Garmin devices, and scripts that perform FTHR  analysis.</p></li></ul>\n\n<p>Sometimes after I started working on ActivityLog2, became aware of Golden Cheetah, a program that would have met the criteria, but at that time, GC only supported bike ride activities. This has changed now, but by this time ActivityLog2 has matured enough that I&rsquo;m happy to use it exclusively to track my activities.</p>") (u . "/img/a001/thumb.png")) ((? . 14) f post (u . "Building a Data Visualization Dashboard in Racket") (? . 14) 1550308206 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2019/02/data-visualization-dashboard.html" . windows) (u . "/2019/02/data-visualization-dashboard.html") (u . "2019-02-09T08:36:49") (? . 18) (? . 22) (c (u . "racket") c (u . "activitylog2")) (u . "\n<p>When experimenting with a new data visualization or data analysis method, it is simpler to write a prototype as a separate application, to evaluate if it is worthwhile investing the effort of adding a full feature to <a href=\"/2017/09/introducing-activitylog2.html\">ActivityLog2</a>, this post illustrates the process used to write a &ldquo;training load&rdquo; <a href=\"https://github.com/alex-hhh/AL2-IRisk-Dashboard\">dashboard application</a> in Racket.</p>") #t (u . "\n<p>When experimenting with a new data visualization or data analysis method, it is simpler to write a prototype as a separate application, to evaluate if it is worthwhile investing the effort of adding a full feature to <a href=\"/2017/09/introducing-activitylog2.html\">ActivityLog2</a>, this post illustrates the process used to write a &ldquo;training load&rdquo; <a href=\"https://github.com/alex-hhh/AL2-IRisk-Dashboard\">dashboard application</a> in Racket.</p>\n<!-- more-->\n\n<p>While it has a variety of ways to visualize training data, ActivityLog2 is not extensible, instead, the user must choose between a predefined number of plots on which they can adjust various input parameters. The predefined plots allows analyzing training data from a wide variety of angles, and it has been useful for me for a long time, but it does not cover everything, and, most importantly, it does not allow exploring new ideas. This is by design: ActivityLog2 an application needs to be reliable and can be used on a daily basis.</p>\n\n<p>This post is not about training methods or their worth, but simply about visualizing an idea to see if it provides any value. In this case, the idea is that to reduce the risk of injury while training one needs to make sure that each week he or she can train between 20% and 60% more than the previous 4 week average. To check how this method would work, it is worth plotting the data and get a visual image, as seen below.</p>\n\n<div class=\"figure\"><img src=\"/img/a022/irisk.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>There are nine plots to visualize, because in Triathlon, there are three disciplines, Swimming, Cycling and Running, and we need a plot for each one. Also, the &ldquo;training load&rdquo; concept can be measured in terms of distance, duration or &ldquo;effort&rdquo; &mdash; the last one is a somewhat abstract term indicating how hard an activity was.</p>\n\n<h2 id=\"preparing-the-data\">Preparing the data</h2>\n\n<p>ActivityLog2 stores all data in a SQLite database, so the information we need can be retrieved using an SQL query. As an example, and to keep things simple, the query below retrieves data from for cycling only, but it can be extended to retrieve run and swim columns too:</p>\n\n<div class=\"brush: sql\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">select</span> <span class=\"nb\">date</span><span class=\"p\">(</span><span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">start_time</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unixepoch&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localtime&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-6 days&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;weekday 1&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">week</span><span class=\"p\">,</span>\n       <span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">(</span><span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">bike_distance</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bDist</span><span class=\"p\">,</span>\n       <span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">(</span><span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">bike_time</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">3600</span><span class=\"p\">.</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bDuration</span><span class=\"p\">,</span>\n       <span class=\"n\">round</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">(</span><span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">bike_effort</span><span class=\"p\">),</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bEffort</span>\n  <span class=\"k\">from</span> <span class=\"n\">V_TRIATHLON_SESSIONS</span> <span class=\"n\">VTS</span>\n <span class=\"k\">where</span> <span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">start_time</span> <span class=\"o\">&gt;</span> <span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">&#39;%s&#39;</span><span class=\"p\">,</span> <span class=\"nb\">date</span><span class=\"p\">(</span><span class=\"s1\">&#39;now&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-56 days&#39;</span><span class=\"p\">))</span>\n <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">week</span><span class=\"p\">;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Running the query above, will produces the result below, but there is a problem with it: Even though we asked for 8 weeks worth of data (56 days in the query above), we only got six rows back, with the weeks between 24 December 2018 and 14 February 2019 missing. This is because I did not do any training between those dates, and since no activities are present, there will be no aggregate rows for those weeks in the result set.</p>\n\n<pre><code>sqlite&gt;\nweek        bDist       bDuration   bEffort\n----------  ----------  ----------  ----------\n2018-12-17  56.0        1.9         141.0\n2018-12-24  20.0        0.7         46.0\n2019-01-14  95.0        2.5         178.0\n2019-01-21  43.0        1.2         78.0\n2019-01-28  80.0        3.0         190.0\n2019-02-04  63.0        2.3         132.0</code></pre>\n\n<p>One solution is to write Racket code which takes this result set and inserts empty rows for any missing weeks. I tried that first, but the Racket code to do that is surprisingly complex, at least when compared to the SQL solution. The SQL solution involves creates a recursive CTE (common table expression) which generates timestamps for each week between two date ranges and than joins this table with the data from the database. The updated query, as used by the application, is shown below. It has the advantage that it can also generate rows for dates in the future, where no activities have been recorded yet, and this simplifies calculating the training load for future dates.</p>\n\n<div class=\"brush: sql\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"k\">with</span> <span class=\"k\">recursive</span>\n  <span class=\"n\">TS</span><span class=\"p\">(</span><span class=\"n\">week</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"p\">(</span>\n    <span class=\"k\">select</span> <span class=\"nb\">date</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unixepoch&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localtime&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;weekday 1&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">week</span>\n     <span class=\"k\">union</span> <span class=\"k\">all</span>\n    <span class=\"k\">select</span> <span class=\"nb\">date</span><span class=\"p\">(</span><span class=\"n\">week</span><span class=\"p\">,</span> <span class=\"s1\">&#39;+7 days&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;weekday 1&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">week</span>\n      <span class=\"k\">from</span> <span class=\"n\">TS</span>\n     <span class=\"k\">where</span> <span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">&#39;%s&#39;</span><span class=\"p\">,</span> <span class=\"n\">week</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">&#39;%s&#39;</span><span class=\"p\">,</span> <span class=\"nb\">date</span><span class=\"p\">(</span><span class=\"o\">?</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unixepoch&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localtime&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-6 days&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;weekday 1&#39;</span><span class=\"p\">))),</span>\n  <span class=\"n\">SE</span><span class=\"p\">(</span><span class=\"n\">week</span><span class=\"p\">,</span> <span class=\"n\">rDist</span><span class=\"p\">,</span> <span class=\"n\">rDuration</span><span class=\"p\">,</span> <span class=\"n\">rTss</span><span class=\"p\">,</span> <span class=\"n\">bDist</span><span class=\"p\">,</span> <span class=\"n\">bDuration</span><span class=\"p\">,</span> <span class=\"n\">bTss</span><span class=\"p\">,</span> <span class=\"n\">sDist</span><span class=\"p\">,</span> <span class=\"n\">sDuration</span><span class=\"p\">,</span> <span class=\"n\">sTss</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"p\">(</span>\n    <span class=\"k\">select</span> <span class=\"nb\">date</span><span class=\"p\">(</span><span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">start_time</span><span class=\"p\">,</span> <span class=\"s1\">&#39;unixepoch&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;localtime&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;-6 days&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;weekday 1&#39;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">week</span><span class=\"p\">,</span>\n           <span class=\"n\">total</span><span class=\"p\">(</span><span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">bike_distance</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">1000</span><span class=\"p\">.</span><span class=\"mi\">0</span> <span class=\"k\">as</span> <span class=\"n\">bDist</span><span class=\"p\">,</span>\n           <span class=\"n\">total</span><span class=\"p\">(</span><span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">bike_time</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">3600</span><span class=\"p\">.</span><span class=\"mi\">0</span> <span class=\"k\">as</span> <span class=\"n\">bDuration</span><span class=\"p\">,</span>\n           <span class=\"n\">total</span><span class=\"p\">(</span><span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">bike_effort</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bTss</span><span class=\"p\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">V_TRIATHLON_SESSIONS</span> <span class=\"n\">VTS</span>\n     <span class=\"k\">where</span> <span class=\"n\">VTS</span><span class=\"p\">.</span><span class=\"n\">start_time</span> <span class=\"k\">between</span> <span class=\"p\">(</span><span class=\"k\">select</span> <span class=\"k\">min</span><span class=\"p\">(</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">&#39;%s&#39;</span><span class=\"p\">,</span> <span class=\"n\">TS</span><span class=\"p\">.</span><span class=\"n\">week</span><span class=\"p\">))</span> <span class=\"k\">from</span> <span class=\"n\">TS</span><span class=\"p\">)</span>\n           <span class=\"k\">and</span> <span class=\"p\">(</span><span class=\"k\">select</span> <span class=\"k\">max</span><span class=\"p\">(</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">&#39;%s&#39;</span><span class=\"p\">,</span> <span class=\"n\">TS</span><span class=\"p\">.</span><span class=\"n\">week</span><span class=\"p\">))</span> <span class=\"k\">from</span> <span class=\"n\">TS</span><span class=\"p\">)</span>\n     <span class=\"k\">group</span> <span class=\"k\">by</span> <span class=\"n\">week</span><span class=\"p\">)</span>\n<span class=\"k\">select</span> <span class=\"p\">(</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"s1\">&#39;%s&#39;</span><span class=\"p\">,</span> <span class=\"n\">TS</span><span class=\"p\">.</span><span class=\"n\">week</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"k\">timestamp</span><span class=\"p\">,</span> <span class=\"c1\">-- +0 forces the column to be an int</span>\n       <span class=\"n\">TS</span><span class=\"p\">.</span><span class=\"n\">week</span> <span class=\"k\">as</span> <span class=\"n\">week</span><span class=\"p\">,</span>\n       <span class=\"n\">coalesce</span><span class=\"p\">(</span><span class=\"n\">SE</span><span class=\"p\">.</span><span class=\"n\">bDist</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bDist</span><span class=\"p\">,</span>\n       <span class=\"n\">coalesce</span><span class=\"p\">(</span><span class=\"n\">SE</span><span class=\"p\">.</span><span class=\"n\">bDuration</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bDuration</span><span class=\"p\">,</span>\n       <span class=\"n\">coalesce</span><span class=\"p\">(</span><span class=\"n\">SE</span><span class=\"p\">.</span><span class=\"n\">bTss</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">bTss</span><span class=\"p\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">TS</span> <span class=\"k\">left</span> <span class=\"k\">join</span> <span class=\"n\">SE</span> <span class=\"k\">on</span> <span class=\"n\">TS</span><span class=\"p\">.</span><span class=\"n\">week</span> <span class=\"o\">=</span> <span class=\"n\">SE</span><span class=\"p\">.</span><span class=\"n\">week</span><span class=\"p\">;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This query is somewhat large, but it illustrates that many complex things can be done in SQL, and these things simplify the processing of the data. Note that the query above accepts two parameters (the question marks, <code>?</code>), which can be used to supply a date range for which to return data.</p>\n\n<h2 id=\"loading-the-data-into-a-racket-data-frame\">Loading the data into a Racket data-frame</h2>\n\n<p>With the SQL query ready, we can start working on the Racket code which reads the data. First, we&rsquo;ll need a connection to the database &mdash; in the SQLite case, this is a path to a file and the connection is opened using <code>sqlite3-connect</code>. The database is opened in read-only mode, as we only run queries on it, never update the database.</p>\n\n<p>Next, we&rsquo;ll need to access the actual SQL query written previously. I prefer to store the SQL query in a separate file and read it in at runtime; the <code>define-sql-statement</code> function is a helper function defined in <strong>dbutil.rkt</strong>, it reads a SQL query from a file and produces a <code>virtual-statement</code> which can be used as a parameter to all query functions in the <code>db</code> package. There are a few alternatives available: the query could have been stored as a string inside the source code, or defined using one of the Racket packages that define a SQL DSL in the code, but I prefer storing the SQL code separately because I can run it directly in the SQLite command line utility and validate the query results independently from the Racket code.</p>\n\n<p>Lastly, the function <code>fetch-irisk-data</code> will construct a <strong>data-frame</strong> from the results of running the query. Since the SQL query requires two UNIX timestamps for the start and end of the date range, and UNIX timestamps are difficult to use directly, the function takes two parameters: number of weeks in the past to fetch data from and number of weeks in the future to make predictions and calculates the parameters for the query.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">database-file</span> <span class=\"s2\">\"path-to-database.db\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">db</span> <span class=\"p\">(</span><span class=\"n\">sqlite3-connect</span> <span class=\"kd\">#:database</span> <span class=\"n\">database-file</span> <span class=\"kd\">#:mode</span> <span class=\"o\">'</span><span class=\"ss\">read-only</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(form._((lib._racket/runtime-path..rkt)._define-runtime-path))\" style=\"color: inherit\">define-runtime-path</a></span> <span class=\"n\">query-file</span> <span class=\"s2\">\"./irisk-query.sql\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">irisk-sql</span> <span class=\"p\">(</span><span class=\"n\">define-sql-statement</span> <span class=\"n\">query-file</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fetch-irisk-data</span> <span class=\"n\">db</span> <span class=\"n\">weeks-back</span> <span class=\"n\">weeks-forward</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">now</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((quote._~23~25kernel)._current-seconds))\" style=\"color: inherit\">current-seconds</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">df</span> <span class=\"p\">(</span><span class=\"n\">df-read/sql</span>\n              <span class=\"n\">db</span>\n              <span class=\"p\">(</span><span class=\"n\">irisk-sql</span><span class=\"p\">)</span>\n              <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">now</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">weeks-back</span> <span class=\"mi\">7</span> <span class=\"mi\">24</span> <span class=\"mi\">3600</span><span class=\"p\">))</span>\n              <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">now</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">weeks-forward</span> <span class=\"mi\">7</span> <span class=\"mi\">24</span> <span class=\"mi\">3600</span><span class=\"p\">))))</span>\n  <span class=\"c1\">;; Mark the timestamp series as sorted, so we can do lookups on it.</span>\n  <span class=\"p\">(</span><span class=\"n\">df-set-sorted</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span><span class=\"p\">)</span>\n  <span class=\"n\">df</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>With only a small amount of code, we can load the data in Racket and start exploring it in the REPL:</p>\n\n<pre><code>&gt; (define df (fetch-irisk-data db 10 4))\n&gt; (df-describe df)\ndata-frame: 11 columns, 14 rows\nproperties:\nseries:\n              NAs           min           max          mean        stddev\n  bDist         0             0         94.66         34.79         34.68\n  bDuration     0             0             3          1.15          1.15\n  bTss          0             0         191.8         77.99         77.04\n  rDist         0             0         20.04          8.83          8.29\n  rDuration     0             0          4.44          1.46          1.49\n  rTss          0             0        322.49         115.4        122.29\n  sDist         0             0           4.2          1.05          1.38\n  sDuration     0             0          1.87          0.46          0.61\n  sTss          0             0         91.32         23.79         30.83\n  timestamp     0    1543795200    1551657600    1547726400    2438026.74\n  week          0        +inf.0        -inf.0        +nan.0        +nan.0\n&gt;</code></pre>\n\n<p>The data frame contains a series for each column retrieved by the SQL query, we now need to add the &ldquo;load&rdquo; series &mdash; for each of the series in the data frame, we&rsquo;ll add a corresponding load series, containing a smoothed average. <code>add-smoothed-series</code> constructs a single such series, while <code>add-all-smoothed-series</code> creates all the load series:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"n\">base-series</span> <span class=\"n\">load-series</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">smoothed</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">df-add-derived</span>\n   <span class=\"n\">df</span>\n   <span class=\"n\">load-series</span>                          <span class=\"c1\">; series name to create</span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"n\">base-series</span><span class=\"p\">)</span>                   <span class=\"c1\">; selected series</span>\n   <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span>\n     <span class=\"c1\">;; &#39;l&#39; is a list containing a \"row\" of the selected series, since we only</span>\n     <span class=\"c1\">;; select one series (base-series), the list contains one element, which</span>\n     <span class=\"c1\">;; we extract here:</span>\n     <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">value</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">l</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n     <span class=\"c1\">;; this weeks volume contributes to next weeks load, so we return the</span>\n     <span class=\"c1\">;; previous smoothed value (`begin0`) and computing the next one.</span>\n     <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin0))\" style=\"color: inherit\">begin0</a></span> <span class=\"n\">smoothed</span>\n       <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">smoothed</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"mi\">1</span> <span class=\"n\">factor</span><span class=\"p\">)</span> <span class=\"n\">smoothed</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">factor</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"n\">value</span> <span class=\"mi\">0</span><span class=\"p\">))))))))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">add-all-smoothed-series</span> <span class=\"n\">df</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"s2\">\"sDuration\"</span> <span class=\"s2\">\"sDurationLoad\"</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"s2\">\"sDist\"</span> <span class=\"s2\">\"sDistLoad\"</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"s2\">\"sTss\"</span> <span class=\"s2\">\"sTssLoad\"</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"s2\">\"bDuration\"</span> <span class=\"s2\">\"bDurationLoad\"</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"s2\">\"bDist\"</span> <span class=\"s2\">\"bDistLoad\"</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"s2\">\"bTss\"</span> <span class=\"s2\">\"bTssLoad\"</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"s2\">\"rDuration\"</span> <span class=\"s2\">\"rDurationLoad\"</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"s2\">\"rDist\"</span> <span class=\"s2\">\"rDistLoad\"</span> <span class=\"n\">factor</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">add-smoothed-series</span> <span class=\"n\">df</span> <span class=\"s2\">\"rTss\"</span> <span class=\"s2\">\"rTssLoad\"</span> <span class=\"n\">factor</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"plotting-the-data\">Plotting the data</h2>\n\n<p>With the data ready, we can start exploring it in the DrRacket REPL. For example, to plot the weekly bike durations and the duration load, we can type the following in DrRacket:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"p\">(</span><span class=\"n\">plot</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"n\">points</span> <span class=\"p\">(</span><span class=\"n\">df-select*</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"s2\">\"bDuration\"</span><span class=\"p\">))</span>\n              <span class=\"p\">(</span><span class=\"n\">lines</span> <span class=\"p\">(</span><span class=\"n\">df-select*</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"s2\">\"bDurationLoad\"</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<div class=\"figure\"><img src=\"/img/a022/basic-plot.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>While the above plot was simple to generate, it is not very attractive and does not present the information in a useful way. There are several ways to improve this plot, below are some of the things that can be easily done to improve its appearance.</p>\n\n<p>The default colors used by the plot library are very basic, but the <code>racket/draw</code> package provides a <a href=\"https://docs.racket-lang.org/draw/color-database___.html?q=the-color-database\">color database</a> which allows selecting nice colors by their names:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">dot-color</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-color-database</span> <span class=\"n\">find-color</span> <span class=\"s2\">\"SeaGreen\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">warning-color</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-color-database</span> <span class=\"n\">find-color</span> <span class=\"s2\">\"DarkGoldenrod\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">danger-color</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-color-database</span> <span class=\"n\">find-color</span> <span class=\"s2\">\"Firebrick\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">bike-bg-color</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-color-database</span> <span class=\"n\">find-color</span> <span class=\"s2\">\"LavenderBlush\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">this-week-color</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-color-database</span> <span class=\"n\">find-color</span> <span class=\"s2\">\"RoyalBlue\"</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>By default, the plot package calculates the limits of the plot so that all the data fits snuggly on the plot area, this however makes places some of the dots at the edge of the plot area, making them difficult to see. We can calculate the upper limit limit of the plot using the <code>df-statistics</code> function and increase it slightly:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">stats</span> <span class=\"p\">(</span><span class=\"n\">df-statistics</span> <span class=\"n\">df</span> <span class=\"s2\">\"bDuration\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">load-stats</span> <span class=\"p\">(</span><span class=\"n\">df-statistics</span> <span class=\"n\">df</span> <span class=\"s2\">\"bDurationLoad\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">max-y</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mf\">1.2</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._max))\" style=\"color: inherit\">max</a></span> <span class=\"p\">(</span><span class=\"n\">statistics-max</span> <span class=\"n\">stats</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mf\">1.6</span> <span class=\"p\">(</span><span class=\"n\">statistics-max</span> <span class=\"n\">load-stats</span><span class=\"p\">)))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The line for the &ldquo;load&rdquo; series has several edges, as there is one data point for each week, we can smooth it out using the <code>spline</code> function (part of the <code>data-frame</code> package). While doing it we can actually plot two lines: a &ldquo;warning&rdquo; line at 20% increase of the load and a &ldquo;danger&rdquo; line t 60% increase of the load:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">load-data</span> <span class=\"p\">(</span><span class=\"n\">df-select*</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"s2\">\"bDurationLoad\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">load-fn</span> <span class=\"p\">(</span><span class=\"n\">spline</span> <span class=\"n\">load-data</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">warning-line</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"p\">(</span><span class=\"n\">load-fn</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mf\">1.2</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">danger-line</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"p\">(</span><span class=\"n\">load-fn</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"mf\">1.6</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Given that some of the data is in the past, and some is in the future, we can plot a vertical rule where the current week is. To find the X value of the current week, we can use <code>df-index-of</code> and <code>df-ref</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">now-index</span> <span class=\"p\">(</span><span class=\"n\">df-index-of</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((quote._~23~25kernel)._current-seconds))\" style=\"color: inherit\">current-seconds</a></span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">now-value</span> <span class=\"p\">(</span><span class=\"n\">df-ref</span> <span class=\"n\">df</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._max))\" style=\"color: inherit\">max</a></span> <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sub1))\" style=\"color: inherit\">sub1</a></span> <span class=\"n\">now-index</span><span class=\"p\">))</span> <span class=\"s2\">\"timestamp\"</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Finally, we can use plot parameters to make the X axis a date axis, instead of printing integer values for the UNIX timestamps, plus we can add a title and clear the labels for the X and Y axis (their meaning should be obvious and allows for a more compact plot)</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/parameters.html#(form._((lib._racket/private/more-scheme..rkt)._parameterize))\" style=\"color: inherit\">parameterize</a></span> <span class=\"p\">([</span><span class=\"n\">plot-title</span> <span class=\"s2\">\"Bike Duration\"</span><span class=\"p\">]</span>\n               <span class=\"p\">[</span><span class=\"n\">plot-background</span> <span class=\"n\">bike-bg-color</span><span class=\"p\">]</span>\n               <span class=\"p\">[</span><span class=\"n\">plot-x-ticks</span> <span class=\"p\">(</span><span class=\"n\">date-ticks</span><span class=\"p\">)]</span>\n               <span class=\"p\">[</span><span class=\"n\">plot-y-label</span> <span class=\"no\">#f</span><span class=\"p\">]</span>\n               <span class=\"p\">[</span><span class=\"n\">plot-x-label</span> <span class=\"no\">#f</span><span class=\"p\">])</span>\n      <span class=\"p\">(</span><span class=\"n\">plot-snip</span>\n       <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span>\n        <span class=\"p\">(</span><span class=\"n\">tick-grid</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"n\">warning-line</span> <span class=\"kd\">#:color</span> <span class=\"n\">warning-color</span> <span class=\"kd\">#:width</span> <span class=\"mi\">3</span> <span class=\"kd\">#:style</span> <span class=\"o\">'</span><span class=\"ss\">dot</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"n\">danger-line</span> <span class=\"kd\">#:color</span> <span class=\"n\">danger-color</span> <span class=\"kd\">#:width</span> <span class=\"mi\">3</span> <span class=\"kd\">#:style</span> <span class=\"o\">'</span><span class=\"ss\">dot</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">points</span> <span class=\"n\">data</span>\n                <span class=\"kd\">#:sym</span> <span class=\"o\">'</span><span class=\"ss\">fullcircle</span>\n                <span class=\"kd\">#:size</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"p\">(</span><span class=\"n\">point-size</span><span class=\"p\">)</span> <span class=\"mf\">1.5</span><span class=\"p\">)</span>\n                <span class=\"kd\">#:fill-color</span> <span class=\"n\">dot-color</span>\n                <span class=\"kd\">#:color</span> <span class=\"n\">dot-color</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">vrule</span> <span class=\"n\">now-value</span>\n               <span class=\"kd\">#:color</span> <span class=\"n\">this-week-color</span>\n               <span class=\"kd\">#:width</span> <span class=\"mf\">2.0</span>\n               <span class=\"kd\">#:style</span> <span class=\"o\">'</span><span class=\"ss\">short-dash</span><span class=\"p\">))</span>\n       <span class=\"kd\">#:y-min</span> <span class=\"mi\">0</span> <span class=\"kd\">#:y-max</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._max))\" style=\"color: inherit\">max</a></span> <span class=\"n\">max-y</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>And here is the same data, this time plotted with all the enhancements discussed above:</p>\n\n<div class=\"figure\"><img src=\"/img/a022/enhanced-plot.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h3 id=\"interactive-info-display-on-mouse-hover\">Interactive info display on mouse hover</h3>\n\n<p>There is a lot of data available to display, but showing it on the plot would result in a lot of clutter. We can, however, add a hover callback which can display information about the week where the mouse pointer is. The <code>plot</code>, or <code>plot-snip</code> functions produce a <code>snip%</code> object, rather than an image, and snips are interactive objects which DrRacket knows how to manage. The plot snips support a &ldquo;hover callback&rdquo; which is a callback invoked whenever the mouse is over the plot area. This callback can than add further elements to the plot. You can read more about interactive plots <a href=\"/2018/03/interactive-overlays-with-the-racket-plot-package-update.html\">here</a>.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">format-value</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></span> <span class=\"n\">x</span> <span class=\"kd\">#:precision</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">hover-callback</span> <span class=\"n\">snip</span> <span class=\"n\">event</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">renderers</span> <span class=\"o\">'</span><span class=\"p\">())</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">add-renderer</span> <span class=\"n\">r</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">renderers</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">r</span> <span class=\"n\">renderers</span><span class=\"p\">)))</span>\n\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">snip</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n    <span class=\"c1\">;; Find the position of the mouse in the current data frame, extract the</span>\n    <span class=\"c1\">;; information for the current location and display a vertical line plus</span>\n    <span class=\"c1\">;; a pict containing information about the plot.</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"n\">df-index-of</span> <span class=\"n\">df</span> <span class=\"s2\">\"timestamp\"</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"n\">df-row-count</span> <span class=\"n\">df</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">ts</span> <span class=\"p\">(</span><span class=\"n\">df-ref</span> <span class=\"n\">df</span> <span class=\"n\">index</span> <span class=\"s2\">\"timestamp\"</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">week</span> <span class=\"p\">(</span><span class=\"n\">df-ref</span> <span class=\"n\">df</span> <span class=\"n\">index</span> <span class=\"s2\">\"week\"</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">vol</span> <span class=\"p\">(</span><span class=\"n\">df-ref</span> <span class=\"n\">df</span> <span class=\"n\">index</span> <span class=\"s2\">\"bDuration\"</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">vol-warning</span> <span class=\"p\">(</span><span class=\"n\">warning-line</span> <span class=\"n\">ts</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">vol-danger</span> <span class=\"p\">(</span><span class=\"n\">danger-line</span> <span class=\"n\">ts</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"n\">add-renderer</span> <span class=\"p\">(</span><span class=\"n\">vrule</span> <span class=\"n\">ts</span> <span class=\"kd\">#:width</span> <span class=\"mf\">1.0</span> <span class=\"kd\">#:color</span> <span class=\"s2\">\"gray\"</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"n\">add-renderer</span> <span class=\"p\">(</span><span class=\"n\">points</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">ts</span> <span class=\"n\">vol</span><span class=\"p\">))</span>\n                            <span class=\"kd\">#:sym</span> <span class=\"o\">'</span><span class=\"ss\">fullcircle</span>\n                            <span class=\"kd\">#:size</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"p\">(</span><span class=\"n\">point-size</span><span class=\"p\">)</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span>\n                            <span class=\"kd\">#:fill-color</span> <span class=\"n\">hl-dot-color</span>\n                            <span class=\"kd\">#:color</span> <span class=\"n\">hl-dot-color</span><span class=\"p\">))</span>\n\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">badge</span> <span class=\"p\">(</span><span class=\"n\">make-hover-badge</span>\n                     <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span>\n                      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"s2\">\"Danger\"</span> <span class=\"p\">(</span><span class=\"n\">format-value</span> <span class=\"n\">vol-danger</span><span class=\"p\">))</span>\n                      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"s2\">\"Warning\"</span> <span class=\"p\">(</span><span class=\"n\">format-value</span> <span class=\"n\">vol-warning</span><span class=\"p\">))</span>\n                      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"s2\">\"Actual\"</span> <span class=\"p\">(</span><span class=\"n\">format-value</span> <span class=\"n\">vol</span><span class=\"p\">))</span>\n                      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"s2\">\"Week\"</span> <span class=\"n\">week</span><span class=\"p\">))))</span>\n\n      <span class=\"p\">(</span><span class=\"n\">add-renderer</span> <span class=\"p\">(</span><span class=\"n\">pu-label</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">badge</span><span class=\"p\">))))</span>\n\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-overlay-renderers</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._null~3f))\" style=\"color: inherit\">null?</a></span> <span class=\"n\">renderers</span><span class=\"p\">)</span> <span class=\"no\">#f</span> <span class=\"n\">renderers</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The function above makes use of two utility functions defined in <a href=\"\">plot-util.rkt</a>, <code>make-hover-badge</code> creates a <code>pict</code> with the label to display, and <code>pu-label</code> creates a render which will show up on the plot.</p>\n\n<p>The <code>hover-callback</code> can be installed in the plot snip after it was created but before returning it to DrRacket for display:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">mkplot</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"n\">plot-snip</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/stx-patterns.html#(form._((lib._racket/private/stxcase-scheme..rkt)._......))\" style=\"color: inherit\">...</a></span><span class=\"p\">))</span>\n   <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-mouse-event-callback</span> <span class=\"n\">hover-callback</span><span class=\"p\">)</span>\n   <span class=\"n\">snip</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<div class=\"figure\"><img src=\"/img/a022/hover-plot.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"creating-a-standalone-application\">Creating a standalone application</h2>\n\n<p>Exploring plots in the interactive DrRacket REPL is what makes Racket powerful and attractive to use, it is however inconvenient to start DrRacket and produce these plots manually every time I want to look at the data. Fortunately, it is easy to build a standalone GUI application to show these plots in a window, so I can simply have a link on my desktop to start it up and look at the plots.</p>\n\n<p>The plot snips which are displayed in the DrRacket REPL can also be used directly inside an <code>editor-canvas%</code> (including the mouse-hover functionality). It is somewhat complex to use an <code>editor-canvas%</code> for this purpose, I plan to write blog post on this subject, but for now, you can have a look at the <a href=\"https://github.com/alex-hhh/AL2-IRisk-Dashboard/blob/master/plot-container.rkt\">plot-container.rkt</a> file for the implementation &mdash; this is a class which allows packaging multiple plots in a canvas, handling the layout and resize for them. The plots are created identically &mdash; there is a function which is passed in the series to plot, plus some additional data, and they are added to this canvas.</p>\n\n<p>This is a basic GUI application (at least as far as the GUI part goes), but there are a few tricks and techniques which makes the application easier to use.</p>\n\n<h3 id=\"finding-the-location-of-the-database\">Finding the location of the database</h3>\n\n<p>The application needs access to the ActivityLog2 database, and its location is stored in the ActivityLog2 preferences file. Racket provides a mechanism for storing and retrieving key-value pairs into a file using the <code><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._put-preferences))\" style=\"color: inherit\">put-preferences</a></code>, <code><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._get-preference))\" style=\"color: inherit\">get-preference</a></code> functions. Simple wrappers around these functions (called <code>get-pref</code> and <code>put-pref</code>), which change the default setting file, allows storing per-application information. Finding the location of the database, is a simple matter of knowing which key it is stored under:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">database-file</span>\n  <span class=\"p\">(</span><span class=\"n\">get-pref</span> <span class=\"o\">'</span><span class=\"ss\">activity-log:database-file</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">()</span> <span class=\"no\">#f</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The application is set up to always open the database file that was last opened in ActivityLog2. There is also some code to handle the case where no database file is present &mdash; this simply displays an error message.</p>\n\n<h3 id=\"restoring-the-window-size\">Restoring the window size</h3>\n\n<p>Well behaved applications will remember their settings even after they are closed and reopened. For this application, there are not many settings, but the size of the window is one of them &mdash; rather than having a fixed window size, the application will save its window size in the preferences file on exit and restore it when it is reopened. This way, I can resize the application to the size I want and this size will be remembered when I reopen the application.</p>\n\n<p>Restoring frame dimensions is simple, they are retrieved from the preference file, with some suitable defaults if they don&rsquo;t exist, than the frame is created with these dimensions:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">;; retrieve previous dimensions and maximized flag</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">dims</span> <span class=\"p\">(</span><span class=\"n\">get-pref</span> <span class=\"o\">'</span><span class=\"ss\">irisk-dashboard:frame-dimensions</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"mi\">1200</span> <span class=\"mi\">750</span><span class=\"p\">))))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">maximized?</span> <span class=\"p\">(</span><span class=\"n\">get-pref</span> <span class=\"o\">'</span><span class=\"ss\">irisk-dashboard:frame-maximized</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">()</span> <span class=\"no\">#f</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">tl</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">frame%</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._init))\" style=\"color: inherit\">init</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span><span class=\"p\">)</span>\n                <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">on-close</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">show</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n                  <span class=\"p\">(</span><span class=\"n\">on-toplevel-close</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span><span class=\"p\">)))</span>\n              <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"AL2 IRisk Dashboard\"</span><span class=\"p\">]</span>\n              <span class=\"p\">[</span><span class=\"n\">width</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._car))\" style=\"color: inherit\">car</a></span> <span class=\"n\">dims</span><span class=\"p\">)]</span>\n              <span class=\"p\">[</span><span class=\"n\">height</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cdr))\" style=\"color: inherit\">cdr</a></span> <span class=\"n\">dims</span><span class=\"p\">)]))</span>\n<span class=\"c1\">;; maximize the frame if it was maximized last time</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">maximized?</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">tl</span> <span class=\"n\">maximize</span> <span class=\"n\">maximized?</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>To save the dimensions on exit, the <code>on-close</code> method in the <code>frame%</code> class is overridden, to call <code>on-toplevel-close</code>, which is defined below &mdash; this functions saves the current dimensions into the preferences file:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-toplevel-close</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">frame</span> <span class=\"n\">is-maximized?</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">frame</span> <span class=\"n\">is-fullscreened?</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((quote._~23~25kernel)._let-values))\" style=\"color: inherit\">let-values</a></span> <span class=\"p\">(([</span><span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">frame</span> <span class=\"n\">get-size</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"n\">put-pref</span> <span class=\"o\">'</span><span class=\"ss\">irisk-dashboard:frame-dimensions</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"n\">put-pref</span> <span class=\"o\">'</span><span class=\"ss\">irisk-dashboard:frame-maximized</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">frame</span> <span class=\"n\">is-maximized?</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"avoiding-flickering-plots\">Avoiding flickering plots</h3>\n\n<p>A windows dimensions are only computed when the window is shown and this means that plot snips will not know their size until the window is shown. If they are created and added to the container before the container is shown, they will be shown as the wrong size, showing an ugly redraw as they are resized. This situation can be avoided by delaying the creation of the plots until the canvas is shown, by overriding the <code>on-superwindow-show</code> method to call <code>on-canvas-show</code>, which will query the canvas size and create the plots at their correct dimensions:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">canvas</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">plot-container%</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._init))\" style=\"color: inherit\">init</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">on-superwindow-show</span> <span class=\"n\">shown?</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">shown?</span>\n             <span class=\"p\">(</span><span class=\"n\">on-canvas-show</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span><span class=\"p\">))))</span>\n       <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">tl</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"building-an-executable-and-a-distribution\">Building an executable and a distribution</h3>\n\n<p>Racket allows building stand-alone executables, which are applications that will run on systems that don&rsquo;t have Racket installed. There are several ways to create executables: from the DrRacket GUI, from another racket program using the <code>compiler/embed</code> module, or from the command line using <code>raco</code>. To create an executable from the command line, you can use the command:</p>\n\n<pre><code>raco exe --gui --embed-dlls -o AL2-IRisk.exe main.rkt</code></pre>\n\n<p>The resulting executable will however still reference some files in the source directory. In our case, this is the SQL query that was used to retrieve the data. It is possible to tell Racket to create a distribution, which is a directory containing the executable, plus any files it references using <code>define-runtime-path</code>, to the resulting application is truly standalone. The command below will package the executable and the SQL query in the &ldquo;AL2-IRisk&rdquo; folder, which can than be installed independently of Racket:</p>\n\n<pre><code>raco distribute ./AL2-IRisk AL2-IRisk.exe</code></pre>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>This application is a prototype, and you can find the full source <a href=\"https://github.com/alex-hhh/AL2-IRisk-Dashboard\">here</a>. I will use it for a while, tweaking a few things as I continue to use it and have more experience with the data. If this proves to be a good idea, the code will be added to ActivityLog2 and this prototype discarded &mdash; this is what prototypes are for. If it turns out that it is not very useful information, it is no big loss, as it did not take too long to write and this is the advantage of prototypes. In fact, this blog post has more lines than the actual application, and it also took longer to write.</p>") (u . "/img/a022/thumb.png")) ((? . 15) f post (u . "Building a GUI Application for the Password Generator") (? . 15) 1553658954 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2019/03/password-generator-gui.html" . windows) (u . "/2019/03/password-generator-gui.html") (u . "2019-03-23T10:45:15") (? . 23) (? . 24) (c (u . "racket")) (u . "\n<p>In the <a href=\"/2019/03/password-generator.html\">previous blog post</a>, we built a password generator and packaged it as a command line utility, in this blog post we&rsquo;ll look at how to build a GUI application with the same functionality and look at some of the techniques of building GUI applications in Racket.</p>") #t (u . "\n<p>In the <a href=\"/2019/03/password-generator.html\">previous blog post</a>, we built a password generator and packaged it as a command line utility, in this blog post we&rsquo;ll look at how to build a GUI application with the same functionality and look at some of the techniques of building GUI applications in Racket.</p>\n<!-- more-->\n\n<p>If you only need to generate passwords once in a while, you might forget the options for the password generator and the first command when using it would always be <code>raco pwgen --help</code> to remind you of the options. If this is the case, a GUI application might be a better option since it can present the user choices directly, and, more importantly, it can remember its settings automatically. For example, if you prefer to always generate lower case passwords with 128 bit strength and grouping the letters, the password application can remember the settings and always start up with the last selection:</p>\n\n<div class=\"figure\"><img src=\"/img/a024/pwgen.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The process of generating the passwords was explained in the <a href=\"/2019/03/password-generator.html\">previous blog post</a> and will not be repeated here. You may wish to have a look at that post to understand the password generation mechanism and options, as this blog post will only discuss the GUI aspects of the application.</p>\n\n<h2 id=\"building-a-gui-in-the-repl\">Building a GUI in the REPL</h2>\n\n<p>You can build GUI applications interactively from DrRacket by starting with an empty <code>#lang racket/gui</code> file, evaluating it to change the REPL language to <code>racket/gui</code>, than start typing your application in the REPL. For example, we can create the application window using:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">toplevel</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">frame%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Password Generator\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">width</span> <span class=\"mi\">300</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">height</span> <span class=\"mi\">200</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The window is now created and ready, but not yet visible, we can show it by sending it the <code>show</code> message:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">toplevel</span> <span class=\"n\">show</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>We can now add the settings, password and bottom panels, and notice how the window contents is updated:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">settings-panel</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">group-box-panel%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Options\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]))</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">password-panel</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">group-box-panel%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Password\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]))</span>\n<span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">bottom-pane</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">horizontal-pane%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This can be followed by adding the &ldquo;Alphabet&rdquo; and &ldquo;Strength&rdquo; choices and the &ldquo;Group Letters&rdquo; check-box:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">alphabet</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">choice%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">settings-panel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Alphabet \"</span><span class=\"p\">]</span>\n    <span class=\"p\">[</span><span class=\"n\">choices</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"Full\"</span> <span class=\"s2\">\"Normal\"</span> <span class=\"s2\">\"Lower Case\"</span> <span class=\"s2\">\"Simplified\"</span><span class=\"p\">)]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">bit-count</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">choice%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">settings-panel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Strength \"</span><span class=\"p\">]</span>\n    <span class=\"p\">[</span><span class=\"n\">choices</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"64 bits\"</span> <span class=\"s2\">\"96 bits\"</span> <span class=\"s2\">\"128 bits\"</span> <span class=\"s2\">\"256 bits\"</span> <span class=\"s2\">\"512 bits\"</span> <span class=\"s2\">\"1024 bits\"</span><span class=\"p\">)]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">group</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">check-box%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">settings-panel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Group letters\"</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>At this point, we might not like the vertical arrangement for these controls, so we can instruct the settings panel to change its layout to horizontal mode:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">settings-panel</span> <span class=\"n\">set-orientation</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>We can continue adding the other controls than hook up the functionality to build the application step-by-step. This is an interactive process which you can see below, and if you haven&rsquo;t written a GUI application in Racket before, it might be useful to try it out. Of course, this way of writing the application does not scale well beyond trivial programs, not to mention you have to type the entire application every time you start DrRacket. It is be more productive to start writing the application code in a file, but it is worth keeping in mind that you can write some GUI code, evaluate it in DrRacket, than start experimenting inside the REPL &mdash; this is the same interactive program development that one can use for non-GUI programs.</p>\n\n<div id=\"myCarousel\" class=\"carousel slide\" data-ride=\"carousel\"><!-- Indicators--> \n <ol class=\"carousel-indicators\">\n  <li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"1\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"2\"></li>\n  <li data-target=\"#myCarousel\" data-slide-to=\"3\"></li></ol> <!-- Wrapper for slides--> \n <div class=\"carousel-inner\">\n  <div class=\"item active\"><img src=\"/img/a024/t1.png\" alt=\"Creating the frame\" /></div> \n  <div class=\"item\"><img src=\"/img/a024/t2.png\" alt=\"Panels Added\" /></div> \n  <div class=\"item\"><img src=\"/img/a024/t3.png\" alt=\"Alphabet and Strength buttons\" /></div> \n  <div class=\"item\"><img src=\"/img/a024/t4.png\" alt=\"Horizontal Layout\" /></div></div> <!-- Left and right controls--> <a class=\"left carousel-control\" href=\"#myCarousel\" data-slide=\"prev\"><span class=\"glyphicon glyphicon-chevron-left\"></span> <span class=\"sr-only\">Previous</span></a> <a class=\"right carousel-control\" href=\"#myCarousel\" data-slide=\"next\"><span class=\"glyphicon glyphicon-chevron-right\"></span> <span class=\"sr-only\">Next</span></a></div>\n\n<h2 id=\"racket-gui-basics\">Racket GUI Basics</h2>\n\n<p>In the previous section, we used some Racket classes which correspond to GUI elements: <code>frame%</code>, <code>group-box-panel%</code>, <code>horizontal-pane%</code>, <code>choice%</code> and <code>check-box%</code>, and it is not too difficult to figure out what is going on just by reading the code, but if you are new to the GUI library, it might be worth clarifying a few things.</p>\n\n<p>There&rsquo;s a Racket class for each GUI element and these classes can be grouped in three categories:</p>\n\n<ul>\n <li><strong>toplevel windows</strong> represent windows that the operating system manages. A  GUI application needs at least one such window and all other GUI elements  are contained in such an object. In our application we will use a  <code>frame%</code> for the toplevel window, but there is also a  <code>dialog%</code> class for creating dialog boxes.</li>\n <li><strong>containers</strong> are GUI elements which group other GUI elements in certain  arrangements. Most containers are not visible directly, but the  <code>group-box-panel%</code> used in the example above is an exception, it  displays a label and a frame around the GUI elements it contains. Examples  of containers are <code>horizontal-pane%</code> and <code>vertical-pane%</code>,  which define their own layout. For custom layout, the developer will need  to define their own containers, by extending <code>panel%</code> or  <code>pane%</code>. The toplevel windows, such as <code>frame%</code>, are also  containers and multiple GUI elements can be added to them directly.</li>\n <li><strong>controls</strong> are GUI elements which present information to the user or allow  used input: <code>text-field%</code>, <code>choice%</code> and <code>button%</code>  are examples of such gui elements.</li></ul>\n\n<p>GUI elements in Racket form a <strong>parent-child hierarchy</strong> with the toplevel window being at the top. This is reflected in the <code>parent</code> init field that must be specified for every GUI control as it is created. This hierarchy helps control the layout of the controls in the window. Here is the GUI control hierarchy for the Password Generator application:</p>\n\n<div class=\"figure\"><img src=\"/img/a024/hierarchy.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><strong>Layout control</strong> for the controls in a window is achieved through the use of container objects, for example, the <code>toplevel</code> frame% object will place all its children vertically, top to bottom, these children being the <code>settings-panel</code>, <code>password-panel</code> and the <code>bottom-pane</code>, these in turn place their own children horizontally one after the other. Each of the containers will place their child elements such that they fill out the available space available to the container itself. The layout mechanism does not allow precise control over the layout, unless one writes their own container objects, that its the developer cannot specify the exact location of a GUI element. This mechanism is simple to use and produces good results for most of the cases. Containers can be nested to an arbitrary depth and the following init arguments are available to allow further control over the layout:</p>\n\n<ul>\n <li><code>min-width</code>, <code>min-height</code> are init arguments passed to GUI controls and  containers to specify a minimum width and height, if not specified, the  control will compute its minimum dimensions based on its contents.</li>\n <li><code>stretchable-width</code> and <code>stretchable-height</code> are init arguments supported by  GUI controls and containers which are used to indicate if the GUI control  can stretch in the respective direction when more space is available.</li>\n <li><code>border</code> is an init argument for containers, and specifies the number of  pixels to leave as as margin around its children GUI elements</li>\n <li><code>spacing</code> is an init argument for containers which specifies the minimum  space to leave between children GUI elements</li>\n <li><code>alignment</code> is an init argument for containers, used to specify how to align  children elements which cannot be stretched.</li></ul>\n\n<p><strong>User input</strong> from the application is achieved through <strong>callbacks</strong>: each GUI control has a <code>callback</code> init argument which is invoked when the user interacts with the control. The exact time when a callback is invoked depends on the type of control: a button&rsquo;s callback is invoked when the button is pressed, a text fields callback is invoked when the user edits the contents of the field. When callbacks are invoked, regardless of the type of control, they always get passed two arguments: the control that generated the event and the actual event that triggered it. Most of the time, these arguments will not be used by the callback, but they are occasionally useful: for example, the callback for a <code>choice%</code> control can use its arguments to determine which element was actually selected, since this information is not passed to the callback. We will see an example of this usage later in this blog post.</p>\n\n<p>The GUI controls are designed such that new classes can be derived from them to allow the developer to implement <strong>custom behavior</strong> for the application. Unfortunately, after spending some time developing GUI applications in Racket, I came to the conclusion that this is required for pretty much every time one tries to develop a useful application in Racket. Even the simple password generator application will make use of this feature, so it is best to be aware of it. The Racket GUI documentation explains which methods can be overridden for every GUI control to customize its behavior.</p>\n\n<h2 id=\"building-the-application\">Building the application</h2>\n\n<p>To build the actual application, we need to place the experimental code in a Racket source file, so it can be saved and reused. The first things we define are the top-level window and the containers which will hold the GUI controls, they will allow us to control the layout of the GUI controls: the <code>frame%</code> object will place its child items, the <code>settings-panel</code>, <code>password-panel</code> and <code>bottom-pane</code>, one below the other, in the order in which they are created, making creation order important even though there is no direct dependencies between the child panels. The frame is created with a default width and height, but these are minimum values only, and the size of the frame will be calculated such that all items added to it will fit.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">;; Implementation defined later</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-toplevel-close</span> <span class=\"n\">window</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">toplevel</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">frame%</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._init))\" style=\"color: inherit\">init</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">on-close</span><span class=\"p\">)</span>\n           <span class=\"p\">(</span><span class=\"n\">on-toplevel-close</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span><span class=\"p\">)))</span>\n       <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Password Generator\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">width</span> <span class=\"mi\">600</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">height</span> <span class=\"mi\">275</span><span class=\"p\">]</span>\n       <span class=\"p\">[</span><span class=\"n\">border</span> <span class=\"mi\">15</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">settings-panel</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">group-box-panel%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Options\"</span><span class=\"p\">]</span>\n       <span class=\"p\">[</span><span class=\"n\">border</span> <span class=\"mi\">15</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">spacing</span> <span class=\"mi\">20</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">alignment</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"ss\">center</span> <span class=\"ss\">center</span><span class=\"p\">)]</span> <span class=\"p\">[</span><span class=\"n\">stretchable-height</span> <span class=\"no\">#f</span><span class=\"p\">]))</span>\n\n<span class=\"c1\">;; a group-box-panel% has vertical orientation by default, change to horizontal</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">settings-panel</span> <span class=\"n\">set-orientation</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">password-panel</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">group-box-panel%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Password\"</span><span class=\"p\">]</span>\n       <span class=\"p\">[</span><span class=\"n\">border</span> <span class=\"mi\">15</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">spacing</span> <span class=\"mi\">20</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">stretchable-height</span> <span class=\"no\">#f</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">password-panel</span> <span class=\"n\">set-orientation</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">bottom-pane</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">horizontal-pane%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">border</span> <span class=\"mi\">15</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">spacing</span> <span class=\"mi\">20</span><span class=\"p\">]))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">toplevel</span> <span class=\"n\">show</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>In the code above, we did not create a <code>frame%</code> object directly, instead an object derived from <code>frame%</code> is used: this overrides the <code>on-close</code> method to call an <code>on-toplevel-close</code> function, which is a function invoked when the application will close.</p>\n\n<h3 id=\"gui-controls-in-the-settings-panel\">GUI controls in the <code>settings-panel</code></h3>\n\n<p>Next, we need to create the GUI controls which display information and interact with the user. The alphabet selection for the password is done using a <code>choice%</code> control, which will display a selection and a drop down menu allowing the user to select between several possibilities. The control has a <code>choices</code> init argument, which specifies the list of strings to display to the user and allows determining the current selection using the <code>get-selection</code> method, which returns a number. This interface is prone to subtle bugs, since it is difficult to keep the contents of the <code>choice%</code> control in sync with the data that the application needs to use. To avoid such problems, we define a &ldquo;data mapping&rdquo; of names to the actual data: the <code>password-alphabets</code> list maps an alphabet name to an actual alphabet, which were defined in the <a href=\"/2019/03/password-generator.html\">previous blog post</a>. The <code>choices</code> init argument is initialized by extracting the names from <code>password-alphabets</code>, and each time we want to retrieve the actual alphabet, we can use the index returned by <code>get-selection</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">;; Implementation defined later</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-alphabet-choice</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">password-alphabets</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"s2\">\"Full\"</span> <span class=\"n\">full-alphabet</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"s2\">\"Normal\"</span> <span class=\"n\">normal-alphabet</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"s2\">\"Lower Case\"</span> <span class=\"n\">lower-case-alphabet</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"s2\">\"Simplified\"</span> <span class=\"n\">simplified-alphabet</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">alphabet</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">choice%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">settings-panel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Alphabet \"</span><span class=\"p\">]</span>\n       <span class=\"p\">[</span><span class=\"n\">choices</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"n\">password-alphabets</span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">callback</span> <span class=\"n\">on-alphabet-choice</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The choice of password strength, the bit count for the random number, is defined in a similar way. Here we restrict selection to a predefined number of bits to keep things simple &mdash; we could have used a text field to allow the user to enter an arbitrary value, but this would have increased complexity, as we would have to validate the input.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">;; Implementation defined later</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-bit-count-choice</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">password-bits</span>\n  <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s2\">\"64 bits\"</span> <span class=\"mi\">64</span><span class=\"p\">)</span>   <span class=\"p\">(</span><span class=\"s2\">\"96 bits\"</span> <span class=\"mi\">96</span><span class=\"p\">)</span>   <span class=\"p\">(</span><span class=\"s2\">\"128 bits\"</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"s2\">\"256 bits\"</span> <span class=\"mi\">256</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"s2\">\"512 bits\"</span> <span class=\"mi\">512</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"s2\">\"1024 bits\"</span> <span class=\"mi\">1024</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">bit-count</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">choice%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">settings-panel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Strength \"</span><span class=\"p\">]</span>\n       <span class=\"p\">[</span><span class=\"n\">choices</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"n\">password-bits</span><span class=\"p\">)]</span>\n       <span class=\"p\">[</span><span class=\"n\">callback</span> <span class=\"n\">on-bit-count-choice</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The &ldquo;group letters&rdquo; option is a simple check box, since the only two possible values are &ldquo;on&rdquo; or &ldquo;off&rdquo;:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">;; Implementation defined later</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-group-letters</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">group</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">check-box%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">settings-panel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Group letters\"</span><span class=\"p\">]</span>\n       <span class=\"p\">[</span><span class=\"n\">callback</span> <span class=\"n\">on-group-letters</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"gui-controls-in-the-password-panel\">GUI controls in the <code>password-panel</code></h3>\n\n<p>The password will be shown to the user in a <code>text-field%</code> with a larger font. The <code>text-field%</code> was chosen because it allows the user to select the contents of the field to copy it to the clipboard (a <code>message%</code> would not have worked for this purpose), but this has the disadvantage that the user can change the password by typing into the field, but since this is his or her password, this is not a big problem:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">font</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-font-list</span> <span class=\"n\">find-or-create-font</span> <span class=\"mi\">16</span> <span class=\"o\">'</span><span class=\"ss\">modern</span> <span class=\"o\">'</span><span class=\"ss\">normal</span> <span class=\"o\">'</span><span class=\"ss\">normal</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">password</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">text-field%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">password-panel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"no\">#f</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">init-value</span> <span class=\"s2\">\"\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">font</span> <span class=\"n\">font</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Next to the password field, we add a button to copy the contents to the clipboard. Since this functionality does not depend on the other controls, we can implement the callback directly: when the button is clicked, the contents of the <code>password</code> field are retrieved and placed in the clipboard using <code>set-clipboard-string</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-copy-to-clipboard</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">pw</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">password</span> <span class=\"n\">get-value</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-clipboard</span> <span class=\"n\">set-clipboard-string</span> <span class=\"n\">pw</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((quote._~23~25kernel)._current-milliseconds))\" style=\"color: inherit\">current-milliseconds</a></span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">copy</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">button%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">password-panel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Copy\"</span><span class=\"p\">]</span>\n       <span class=\"p\">[</span><span class=\"n\">callback</span> <span class=\"n\">on-copy-to-clipboard</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"gui-controls-in-the-bottom-pane\">GUI controls in the <code>bottom-pane</code></h3>\n\n<p>The bottom part of the window contains two buttons: a &ldquo;New Password&rdquo; button can be used to generate a new password and a &ldquo;Close&rdquo; button to close the application. The buttons are defined just like the &ldquo;Copy&rdquo; button above, but there&rsquo;s an additional invisible <code>message%</code> GUI control, its purpose is to force the <code>bottom-pane</code> to align the two buttons to the right: since the invisible message is defined as stretchable (<code>stretchable-width</code> is <code>#t</code>), it will take up all the available space in the panel, while the two buttons will only occupy the minimum space they need, since buttons are created as non-stretchable by default. This is an example of a layout technique that can be used and it might be useful to experiment with removing this GUI control and changing the <code>stretchable-width</code> for the other GUI control, to better understand how to control the layout of the GUI controls:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">invisible</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">message%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">bottom-pane</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">stretchable-width</span> <span class=\"no\">#t</span><span class=\"p\">]))</span>\n\n<span class=\"c1\">;; Implementation defined later</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-new-password</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">new-password</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">button%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">bottom-pane</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"New Password\"</span><span class=\"p\">]</span>\n       <span class=\"p\">[</span><span class=\"n\">callback</span> <span class=\"n\">on-new-password</span><span class=\"p\">]))</span>\n\n<span class=\"c1\">;; Implementation defined later</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-close-form</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/void.html#(def._((quote._~23~25kernel)._void))\" style=\"color: inherit\">void</a></span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">close</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">button%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">bottom-pane</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Close\"</span><span class=\"p\">]</span>\n       <span class=\"p\">[</span><span class=\"n\">callback</span> <span class=\"n\">on-close-form</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"handling-user-input-and-generating-the-password\">Handling user input and generating the password</h3>\n\n<p>If you run the application as it is now, you&rsquo;ll notice that the GUI shows up correctly, but there is no response from the application when the user selects the various options &mdash; this is because all the callback we defined are empty.</p>\n\n<p>This application does only one thing: it generates a password based on the currently selected password options, and this can be implemented as a single function, <code>refresh-password</code> which queries the state of the <code>alphabet</code>, <code>bit-count</code> and <code>group</code> GUI controls and calls <code>random-bignum</code> and <code>encode-bignum</code>, which were defined in the <a href=\"/2019/03/password-generator.html\">previous blog post</a>.</p>\n\n<p>To make things more interesting, the password generation is split into two parts: when the user selects a new bit count for the password strength, a new password will be generated, but when the user just changes the alphabet or grouping, the same key is encoded according to the new selection. This is achieved by keeping the <code>key</code> a global value and making <code>refresh-password</code> reusing it by default and only generating a new key when <code>key</code> is <code>#f</code></p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">key</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">refresh-password</span><span class=\"p\">)</span>\n  <span class=\"c1\">;; Generate a key if we don&#39;t have one</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"n\">key</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">bit-count</span> <span class=\"n\">get-selection</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">bits</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._second))\" style=\"color: inherit\">second</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">password-bits</span> <span class=\"n\">index</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">key</span> <span class=\"p\">(</span><span class=\"n\">random-bignum</span> <span class=\"n\">bits</span><span class=\"p\">)))</span>\n  <span class=\"c1\">;; Encode the password based on the alphabet and group settings</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">a</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">alphabet</span> <span class=\"n\">get-selection</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._second))\" style=\"color: inherit\">second</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">password-alphabets</span> <span class=\"n\">index</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">group?</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">group</span> <span class=\"n\">get-value</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">encoded-key</span> <span class=\"p\">(</span><span class=\"n\">encode-bignum</span> <span class=\"n\">key</span> <span class=\"n\">a</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">group?</span> <span class=\"mi\">4</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"sc\">#\\-</span><span class=\"p\">))</span>\n  <span class=\"c1\">;; Set the contents of the `password-field` to password</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">password</span> <span class=\"n\">set-value</span> <span class=\"n\">encoded-key</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">password</span> <span class=\"n\">focus</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>With this, all the callback for the <code>alphabet</code>, <code>bit-count</code>, <code>group</code> and <code>new-password</code> can be updated to just call <code>refresh-password</code>. The callbacks for the <code>bit-count</code> and <code>new-password</code> will also clear the key:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-alphabet-choice</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">refresh-password</span><span class=\"p\">))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-bit-count-choice</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">key</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">refresh-password</span><span class=\"p\">))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-group-letters</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">refresh-password</span><span class=\"p\">))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-new-password</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">key</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">refresh-password</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"saving-and-restoring-the-application-state\">Saving and restoring the application state</h3>\n\n<p>When the GUI controls are created, they will always default to an initial state: a <code>choice%</code> will show its first item selected and a <code>check-box%</code> will be unchecked, unless a value is specified when it is created. A user might expect to see their last selection when they start the application again, this way, for example, if they always want to use the &ldquo;Lower Case&rdquo; alphabet, they can change it once, and the setting will be remembered when the application starts up again.</p>\n\n<p>This functionality needs to be implemented in two parts: when the application is closed, the current state is saved and when the application is started the last saved state (if any) is restored. Racket provides two functions <code><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._get-preference))\" style=\"color: inherit\">get-preference</a></code> and <code><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._put-preferences))\" style=\"color: inherit\">put-preferences</a></code> that can be used to store and retrieve preferences and we&rsquo;ll use these.</p>\n\n<p>The toplevel <code>frame%</code> was created to call <code>on-toplevel-close</code> when the user closes the window. This function will retrieve the current state from the relevant GUI controls and save this using <code><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._put-preferences))\" style=\"color: inherit\">put-preferences</a></code>. The callback for the <code>close</code> button will also invoke <code>on-toplevel-close</code>. When saving the state it is tempting to save the simplest thing: in our case the index in the choice controls, but the index can change if the choices are re-ordered or elements are added or removed. This code will save the actual alphabet name or bit count value, which have better chance of surviving an application refactoring.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-toplevel-close</span> <span class=\"n\">frame</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">alphabet-name</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">alphabet</span> <span class=\"n\">get-selection</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">password-alphabets</span> <span class=\"n\">index</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">bits-name</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">bit-count</span> <span class=\"n\">get-selection</span><span class=\"p\">)])</span>\n      <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">password-bits</span> <span class=\"n\">index</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">group?</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">group</span> <span class=\"n\">get-value</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._put-preferences))\" style=\"color: inherit\">put-preferences</a></span>\n   <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"ss\">ah-password-generator:alphabet</span>\n     <span class=\"ss\">ah-password-generator:bit-count</span>\n     <span class=\"ss\">ah-password-generator:group?</span><span class=\"p\">)</span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"n\">alphabet-name</span> <span class=\"n\">bits-name</span> <span class=\"n\">group?</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">frame</span> <span class=\"n\">show</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-close-form</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">on-toplevel-close</span> <span class=\"n\">toplevel</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Than, when the application starts, the settings are retrieved using <code><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._get-preference))\" style=\"color: inherit\">get-preference</a></code> and the code has multiple levels of error checking: First, if <code>get-preference</code> does not find a value, it returns a suitable default &mdash; this will happen when the user runs the application for the first time. Next, the <code><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._index-where))\" style=\"color: inherit\">index-where</a></code> might not find the stored value, so the code will select the first item instead. It is always a good idea to check the values retrieved from outside the application, even if these values were saved by the application at an earlier time: the application might have been updated between the time it saved the values and reading them:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">((</span><span class=\"n\">previous-choice</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._get-preference))\" style=\"color: inherit\">get-preference</a></span> <span class=\"o\">'</span><span class=\"ss\">ah-password-generator:alphabet</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">()</span> <span class=\"s2\">\"Lower Case\"</span><span class=\"p\">)))</span>\n       <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._index-where))\" style=\"color: inherit\">index-where</a></span> <span class=\"n\">password-alphabets</span>\n                           <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">previous-choice</span><span class=\"p\">)))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">alphabet</span> <span class=\"n\">set-selection</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"n\">index</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">((</span><span class=\"n\">previous-choice</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._get-preference))\" style=\"color: inherit\">get-preference</a></span> <span class=\"o\">'</span><span class=\"ss\">ah-password-generator:bit-count</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">()</span> <span class=\"s2\">\"96 bits\"</span><span class=\"p\">)))</span>\n       <span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._index-where))\" style=\"color: inherit\">index-where</a></span> <span class=\"n\">password-bits</span>\n                           <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._first))\" style=\"color: inherit\">first</a></span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">previous-choice</span><span class=\"p\">)))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">bit-count</span> <span class=\"n\">set-selection</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"n\">index</span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">previous-choice</span>\n       <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Filesystem.html#(def._((lib._racket/file..rkt)._get-preference))\" style=\"color: inherit\">get-preference</a></span> <span class=\"o\">'</span><span class=\"ss\">ah-password-generator:group?</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">()</span> <span class=\"no\">#f</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">group</span> <span class=\"n\">set-value</span> <span class=\"n\">previous-choice</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"n\">refresh-password</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">toplevel</span> <span class=\"n\">show</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"building-a-stand-alone-executable\">Building a stand-alone executable</h2>\n\n<p>You can run this application directly from DrRacket, but this is not very practical for a user, however Racket allows building standalone executables, which is very convenient for us. Executables can be built for Linux, Windows and MacOS, and with similar command line arguments, but the example below shows how build an executable on Windows. Since this is a GUI application, it will need an icon, otherwise Racket will use the default Racket icon for it. As an example, I choose a <a href=\"http://www.iconarchive.com/show/papirus-apps-icons-by-papirus-team/preferences-desktop-user-password-icon.html\">padlock icon</a> from IconArchive and downloaded the ICO version for Windows. To create the executable, you will need to run the &ldquo;raco&rdquo; command below:</p>\n\n<pre><code>raco exe --gui --embed-dlls --ico pwgen-gui.ico -o PasswordGenerator.exe pwgen-gui.rkt </code></pre>\n\n<p>Normally, an executable produced this way will depend on other racket libraries and files, and we would need a &ldquo;raco distribute&rdquo; command to create a stand-alone distribution. However, the <code>--embed-dlls</code> option tells raco to put all dependent DLLs in the executable, so it can run without any other supporting files.</p>\n\n<h2 id=\"source-code\">Source code</h2>\n\n<p>The entire application in available in this <a href=\"https://gist.github.com/alex-hhh/6acbbb8ebca47c4cfaa2540499494af6\">Github Gist</a> and you can download the icon from <a href=\"http://www.iconarchive.com/show/papirus-apps-icons-by-papirus-team/preferences-desktop-user-password-icon.html\">here</a>.</p>") (u . "/img/a024/thumb.png")) ((? . 8) f post (u . "Chess Game Using Racket's Pasteboard") (? . 8) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/10/chess-game-using-racket-s-pasteboard.html" . windows) (u . "/2018/10/chess-game-using-racket-s-pasteboard.html") (u . "2018-10-12T19:35:13") (? . 2) (? . 7) (c (u . "racket")) (u . "\n<p>The Racket GUI library provides an &ldquo;editor toolkit&rdquo; which can be used to implement programs that use an interactive graphical canvas where objects can be moved around with the mouse. This toolkit has <a href=\"http://docs.racket-lang.org/gui/editor-overview.html\">good reference documentation</a>, however this documentation can be somewhat overwhelming, and it is not always clear how to begin writing such interactive application, or how to achieve some basic functionality, so I wrote a tutorial on how to implement a chess board game in Racket using the <code>pasteboard%</code> and <code>snip%</code> classes which are part of the GUI library.</p>") #t (u . "\n<p>The Racket GUI library provides an &ldquo;editor toolkit&rdquo; which can be used to implement programs that use an interactive graphical canvas where objects can be moved around with the mouse. This toolkit has <a href=\"http://docs.racket-lang.org/gui/editor-overview.html\">good reference documentation</a>, however this documentation can be somewhat overwhelming, and it is not always clear how to begin writing such interactive application, or how to achieve some basic functionality, so I wrote a tutorial on how to implement a chess board game in Racket using the <code>pasteboard%</code> and <code>snip%</code> classes which are part of the GUI library.</p>\n<!-- more-->\n\n<p>This tutorial presents a step-by-step guide on how to create a chess board application using only the Racket GUI toolkit. While it uses chess as an example application, it is meant to illustrate how to create new <code>snip%</code> objects and how to manage them inside <code>pasteboard%</code> objects, and rather than enumerating all the features of the <code>pasteboard%</code> class, it just shows the ones that are needed to solve the immediate problems of implementing the game. The tutorial will not implement a complete chess game, as in you will not be able to play a game of chess against the computer with this program &mdash; it will only deal with the graphical interface of the chess game.</p>\n\n<p>The topics that I wanted to cover turned out to be too long for a single blog post, so the final program does not provide a payable game, I plan to write another blog post covering some more topics related to this.</p>\n\n<div class=\"figure\"><img src=\"/img/a017/chess-board.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"chess-pieces-as-snip-objects\">Chess pieces as snip objects</h2>\n\n<p>The first thing we need in a chess game are the chess pieces, and to keep the application simple, we will use the Unicode characters for the chess pieces, so each piece will actually be displayed as text. There are 12 chess pieces in total listed below with their name, mnemonic letter and Unicode code point. The Unicode glyphs, as displayed below, are too small to be used in the game, but they can be rendered using a larger font to make them bigger.</p>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td style=\"text-align: left\">Name</td>\n    <td style=\"text-align: center\">Mnemonic</td>\n    <td style=\"text-align: center\">Unicode Character Code</td>\n    <td style=\"text-align: center\">Unicode Character</td></tr></thead>\n  <tbody>\n   <tr>\n    <td style=\"text-align: left\">White King</td>\n    <td style=\"text-align: center\">K</td>\n    <td style=\"text-align: center\">#\\u2654</td>\n    <td style=\"text-align: center\">♔</td></tr>\n   <tr>\n    <td style=\"text-align: left\">White Queen</td>\n    <td style=\"text-align: center\">Q</td>\n    <td style=\"text-align: center\">#\\u2655</td>\n    <td style=\"text-align: center\">♕</td></tr>\n   <tr>\n    <td style=\"text-align: left\">White Rook</td>\n    <td style=\"text-align: center\">R</td>\n    <td style=\"text-align: center\">#\\u2656</td>\n    <td style=\"text-align: center\">♖</td></tr>\n   <tr>\n    <td style=\"text-align: left\">White Bishop</td>\n    <td style=\"text-align: center\">B</td>\n    <td style=\"text-align: center\">#\\u2657</td>\n    <td style=\"text-align: center\">♗</td></tr>\n   <tr>\n    <td style=\"text-align: left\">White Knight</td>\n    <td style=\"text-align: center\">N</td>\n    <td style=\"text-align: center\">#\\u2658</td>\n    <td style=\"text-align: center\">♘</td></tr>\n   <tr>\n    <td style=\"text-align: left\">White Pawn</td>\n    <td style=\"text-align: center\">P</td>\n    <td style=\"text-align: center\">#\\u2659</td>\n    <td style=\"text-align: center\">♙</td></tr>\n   <tr>\n    <td style=\"text-align: left\">Black King</td>\n    <td style=\"text-align: center\">k</td>\n    <td style=\"text-align: center\">#\\u265A</td>\n    <td style=\"text-align: center\">♚</td></tr>\n   <tr>\n    <td style=\"text-align: left\">Black Queen</td>\n    <td style=\"text-align: center\">q</td>\n    <td style=\"text-align: center\">#\\u265B</td>\n    <td style=\"text-align: center\">♛</td></tr>\n   <tr>\n    <td style=\"text-align: left\">Black Rook</td>\n    <td style=\"text-align: center\">r</td>\n    <td style=\"text-align: center\">#\\u265C</td>\n    <td style=\"text-align: center\">♜</td></tr>\n   <tr>\n    <td style=\"text-align: left\">Black Bishop</td>\n    <td style=\"text-align: center\">b</td>\n    <td style=\"text-align: center\">#\\u265D</td>\n    <td style=\"text-align: center\">♝</td></tr>\n   <tr>\n    <td style=\"text-align: left\">Black Pawn</td>\n    <td style=\"text-align: center\">p</td>\n    <td style=\"text-align: center\">#\\u265F</td>\n    <td style=\"text-align: center\">♟</td></tr></tbody></table></div>\n\n<p>Before we can write the <code>snip%</code> for the chess pieces, we need to define a &ldquo;snip class&rdquo;. This name is misleading, as we are not defining a <code>class%</code>, but an instance of the <code>snip-class%</code> object. This &ldquo;snip class&rdquo; is used when serializing snips from the pasteboard. We won&rsquo;t use this functionality here, but we still need to define one. Since we don&rsquo;t use serialization facilities the definition is very simple, and shown below. The class name, as passed to <code>set-classname</code> needs to be unique between all the snip classes used by the application:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-piece-snip-class</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(def._((lib._racket/private/class-internal..rkt)._make-object))\" style=\"color: inherit\">make-object</a></span>\n   <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">snip-class%</span>\n     <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">set-classname</span> <span class=\"s2\">\"chess-piece-snip\"</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The snip class object needs to be registered with the Racket editor gui, and this is done using the call below:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"p\">(</span><span class=\"n\">get-the-snip-class-list</span><span class=\"p\">)</span> <span class=\"n\">add</span> <span class=\"n\">chess-piece-snip-class</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>We will use a single snip class for all chess pieces, since the only difference between them is how they are displayed. To have a minimal working snip, three things need to be present in the derived class:</p>\n\n<ul>\n <li>a call to <code>set-snipclass</code> which associates the snip instance with the snip  class that was previously defined</li>\n <li>a <code>get-extent</code> method which the <code>pasteboard%</code> uses to determine the size of  the snip</li>\n <li>a <code>draw</code> method, which is used to draw the snip onto the pasteboard canvas.</li></ul>\n\n<p>Our <code>chess-piece%</code> snip class receives three arguments in the constructor: a <code>glyph</code>, which is a string representing the Unicode character for the piece, a <code>font</code> used to render the glyph and a <code>size</code> which is the size in pixels of the chess piece (since the piece is a square it will have the same width and height). The font object could already determine the size of the piece, but a separate size parameter allows us to define chess pieces that are larger than the glyph that they display (as an exercise, you can experiment with different variations of font and size in the <code>make-chess-piece</code> defined later).</p>\n\n<p>The <code>get-extent</code> method is used by the <code>pasteboard%</code> to obtain the dimensions of the snip. The implementation is straightforward, as it just reports the <code>size</code> as both the <code>width</code> and <code>height</code>, but the actual method call is somewhat unusual: a device context, <code>dc</code> is passed in, together with the position of the snip on the canvas as the <code>x</code> and <code>y</code> coordinates, in return, the <code>pasteboard%</code> expects the <code>width</code>, <code>height</code> and some other parameters to be filled in by our object (the other parameters have to do with snips that are part of a text editor and represent text, they don&rsquo;t concern us here, so they are set to 0). The method is somewhat unusual as it uses <code>box</code>-es for the output parameters, so we need to use <code>box-set!</code> to set the output value.</p>\n\n<p>The <code>draw</code> method is used to paint the snip contents onto the canvas. It receives the device context, <code>dc</code> and the snip position on the canvas. The method also receives other parameters which would allow re-drawing only the parts of the snip that actually need updating, but our code always draws the entire snip contents. Our implementation simply draws the glyph in the middle of the snip area, but nothing else, so the actual snip appears transparent, with only the chess piece being drawn.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-piece%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">snip%</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._init-field))\" style=\"color: inherit\">init-field</a></span> <span class=\"n\">glyph</span> <span class=\"n\">font</span> <span class=\"n\">size</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">set-snipclass</span> <span class=\"n\">chess-piece-snip-class</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">get-extent</span> <span class=\"n\">dc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">width</span> <span class=\"n\">height</span> <span class=\"n\">descent</span> <span class=\"n\">space</span> <span class=\"n\">lspace</span> <span class=\"n\">rspace</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">width</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._set-box!))\" style=\"color: inherit\">set-box!</a></span> <span class=\"n\">width</span> <span class=\"n\">size</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">height</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._set-box!))\" style=\"color: inherit\">set-box!</a></span> <span class=\"n\">height</span> <span class=\"n\">size</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">descent</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._set-box!))\" style=\"color: inherit\">set-box!</a></span> <span class=\"n\">descent</span> <span class=\"mf\">0.0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">space</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._set-box!))\" style=\"color: inherit\">set-box!</a></span> <span class=\"n\">space</span> <span class=\"mf\">0.0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">lspace</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._set-box!))\" style=\"color: inherit\">set-box!</a></span> <span class=\"n\">lspace</span> <span class=\"mf\">0.0</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">rspace</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/boxes.html#(def._((quote._~23~25kernel)._set-box!))\" style=\"color: inherit\">set-box!</a></span> <span class=\"n\">rspace</span> <span class=\"mf\">0.0</span><span class=\"p\">)))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">draw</span> <span class=\"n\">dc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">.</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-font</span> <span class=\"n\">font</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-text-foreground</span> <span class=\"s2\">\"black\"</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">glyph-width</span> <span class=\"n\">glyph-height</span> <span class=\"n\">baseline</span> <span class=\"n\">extra-space</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">get-text-extent</span> <span class=\"n\">glyph</span> <span class=\"n\">font</span> <span class=\"no\">#t</span><span class=\"p\">))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">ox</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">size</span> <span class=\"n\">glyph-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n            <span class=\"p\">(</span><span class=\"n\">oy</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">size</span> <span class=\"n\">glyph-height</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">draw-text</span> <span class=\"n\">glyph</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">x</span> <span class=\"n\">ox</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">y</span> <span class=\"n\">oy</span><span class=\"p\">))))</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Creating <code>chess-piece%</code> instances is inconvenient, as we have to remember the Unicode glyph for each chess piece, as well as the font and size to use for them (and preferably to create all pieces of the same font and size). To simplify their, we can write a function, <code>make-chess-piece</code> which receives the piece mnemonic (K for king, Q for queen, etc) and creates the piece. Thus to create a white king piece, we can just call <code>(make-chess-piece \"K\")</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-piece-data</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash))\" style=\"color: inherit\">hash</a></span>\n   <span class=\"s2\">\"K\"</span> <span class=\"sc\">#\\u2654</span> <span class=\"s2\">\"Q\"</span> <span class=\"sc\">#\\u2655</span> <span class=\"s2\">\"R\"</span> <span class=\"sc\">#\\u2656</span> <span class=\"s2\">\"B\"</span> <span class=\"sc\">#\\u2657</span> <span class=\"s2\">\"N\"</span> <span class=\"sc\">#\\u2658</span> <span class=\"s2\">\"P\"</span> <span class=\"sc\">#\\u2659</span>\n   <span class=\"s2\">\"k\"</span> <span class=\"sc\">#\\u265A</span> <span class=\"s2\">\"q\"</span> <span class=\"sc\">#\\u265B</span> <span class=\"s2\">\"r\"</span> <span class=\"sc\">#\\u265C</span> <span class=\"s2\">\"b\"</span> <span class=\"sc\">#\\u265D</span> <span class=\"s2\">\"n\"</span> <span class=\"sc\">#\\u265E</span> <span class=\"s2\">\"p\"</span> <span class=\"sc\">#\\u265F</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">make-chess-piece</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#(form._((lib._syntax/parse..rkt)._id))\" style=\"color: inherit\">id</a></span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">glyph</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></span> <span class=\"n\">chess-piece-data</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#(form._((lib._syntax/parse..rkt)._id))\" style=\"color: inherit\">id</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">font</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-font-list</span> <span class=\"n\">find-or-create-font</span> <span class=\"mi\">20</span> <span class=\"o\">'</span><span class=\"ss\">default</span> <span class=\"o\">'</span><span class=\"ss\">normal</span> <span class=\"o\">'</span><span class=\"ss\">normal</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">chess-piece%</span> <span class=\"p\">[</span><span class=\"n\">glyph</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span> <span class=\"n\">glyph</span><span class=\"p\">)]</span> <span class=\"p\">[</span><span class=\"n\">font</span> <span class=\"n\">font</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">size</span> <span class=\"mi\">35</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Finally, we can write some test code to check how our snips work: we&rsquo;ll need a <code>pasteboard%</code> instance to hold the chess piece snips, and an <code>editor-canvas%</code> to display the contents of this pasteboard. As a test, we insert an instance of each chess piece type, so we can see how they look:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">;; The pasteboard% that will hold and manage the chess pieces</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">board</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">pasteboard%</span><span class=\"p\">))</span>\n\n<span class=\"c1\">;; Toplevel window for our application</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">toplevel</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">frame%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Chess Board\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">width</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mi\">50</span> <span class=\"mi\">8</span><span class=\"p\">)]</span> <span class=\"p\">[</span><span class=\"n\">height</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mi\">50</span> <span class=\"mi\">8</span><span class=\"p\">)]))</span>\n\n<span class=\"c1\">;; The canvas which will display the pasteboard contents</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">canvas</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">editor-canvas%</span>\n                    <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]</span>\n                    <span class=\"p\">[</span><span class=\"n\">style</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"ss\">no-hscroll</span> <span class=\"ss\">no-vscroll</span><span class=\"p\">)]</span>\n                    <span class=\"p\">[</span><span class=\"n\">horizontal-inset</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"p\">[</span><span class=\"n\">vertical-inset</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n                    <span class=\"p\">[</span><span class=\"n\">editor</span> <span class=\"n\">board</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">toplevel</span> <span class=\"n\">show</span> <span class=\"no\">#t</span><span class=\"p\">)</span> <span class=\"c1\">;; show the toplevel frame</span>\n\n<span class=\"c1\">;; Insert one of each of the chess pieces onto the board, so we can see them</span>\n<span class=\"c1\">;; and drag them around.</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#(form._((lib._syntax/parse..rkt)._id))\" style=\"color: inherit\">id</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-hash-keys))\" style=\"color: inherit\">in-hash-keys</a></span> <span class=\"n\">chess-piece-data</span><span class=\"p\">)])</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"n\">make-chess-piece</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/syntax/Library_Syntax_Classes_and_Literal_Sets.html#(form._((lib._syntax/parse..rkt)._id))\" style=\"color: inherit\">id</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">board</span> <span class=\"n\">insert</span> <span class=\"n\">piece</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/private/base..rkt)._random))\" style=\"color: inherit\">random</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mi\">50</span> <span class=\"mi\">6</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/private/base..rkt)._random))\" style=\"color: inherit\">random</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mi\">50</span> <span class=\"mi\">6</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>You can find the entire program in this <a href=\"https://gist.github.com/alex-hhh/4b534a8f5633a4ee65a605822a85dfe3\">GitHub Gist</a> and if you run it you will get the result as shown below. With only about 65 lines of code we already have an application which can display chess pieces and move them around a board using the mouse. The board however does not look like a chess board at all, so we need to work on that next.</p>\n\n<div class=\"figure\"><img src=\"/img/a017/chess-board1low.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"drawing-the-chess-board\">Drawing the chess board</h2>\n\n<p>To display the chess board pattern on the background, we can create a derived <code>pasteboard%</code> class and implement the <code>on-paint</code> method. Since the chess board itself is static and the user does not interact with it, this approach is the simplest. The <code>on-paint</code> method is invoked twice during each repaint: once before the snips are painted and once after. The <code>before?</code> parameter tells us which invocation it is. The method also receives a device context, <code>dc</code>, plus some other parameters which determine the area that needs repainting &mdash; these parameters would help in speeding up complex redraw operations, but since our drawing needs are simple, we just redraw the entire board every time. Our implementation simply calls the <code>draw-chess-board</code> function (defined later) when the <code>on-paint</code> is invoked to draw the background:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">on-paint</span> <span class=\"n\">before?</span> <span class=\"n\">dc</span> <span class=\"o\">.</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">before?</span>\n        <span class=\"p\">(</span><span class=\"n\">draw-chess-board</span> <span class=\"n\">dc</span><span class=\"p\">)))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>draw-chess-board</code> function is shown below. It paints the checkered pattern of the board on the entire size of the device context, which is the canvas area. To assist the player identifying squares in chess notation, such as &ldquo;d3&rdquo;, it also paints the rank and file values on the left and bottom edges.</p>\n\n<p>A few points about this code are worth mentioning:</p>\n\n<ul>\n <li>The racket device context based drawing follows the same principles as in  any other language that uses such device contexts: drawing resources such as  brushes, pens and fonts must be created and set on the device context and  draw operations such as <code>draw-rectangle</code>, or <code>draw-text</code> use the last set  drawing resource.</li>\n <li>Creating drawing resources, such as <code>pen%</code>, <code>brush%</code> and <code>font%</code> objects  directly is expensive, so Racket provides a &ldquo;manager&rdquo; type object which only  creates them as needed:<code>the-pen-list</code>, <code>the-brush-list</code>, <code>the-font-list</code>.  Because of this, we don&rsquo;t need to keep these objects around in the class, we  can simply retrieve them every time <code>draw-chess-board</code> is invoked.</li>\n <li>The method clears the device context before drawing &mdash; since the method is  supposed to cover the entire area of the board and we only draw the &ldquo;black&rdquo;  squares, this is the simplest method to ensure that no previous image data  is left over from previous drawing operations.</li>\n <li>The code does not assume that the board is a certain size, or even that it  is a rectangle. Instead, it determines the size dynamically and calculates  the explicit width and height of each square, as well as the positions of  the labels. This is helpful, this function will not have to change if a  chess board of a different size is created, and will also handle dynamic  resizes of the canvas.</li></ul>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">draw-chess-board</span> <span class=\"n\">dc</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">brush</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-brush-list</span> <span class=\"n\">find-or-create-brush</span> <span class=\"s2\">\"gray\"</span> <span class=\"o\">'</span><span class=\"ss\">solid</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">pen</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-pen-list</span> <span class=\"n\">find-or-create-pen</span> <span class=\"s2\">\"black\"</span> <span class=\"mi\">1</span> <span class=\"o\">'</span><span class=\"ss\">transparent</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">font</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-font-list</span> <span class=\"n\">find-or-create-font</span> <span class=\"mi\">8</span> <span class=\"o\">'</span><span class=\"ss\">default</span> <span class=\"o\">'</span><span class=\"ss\">normal</span> <span class=\"o\">'</span><span class=\"ss\">normal</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">dc-width</span> <span class=\"n\">dc-height</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">get-size</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cell-width</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">dc-width</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cell-height</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">dc-height</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">margin</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    \n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">clear</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-brush</span> <span class=\"n\">brush</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-pen</span> <span class=\"n\">pen</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-font</span> <span class=\"n\">font</span><span class=\"p\">)</span>\n  \n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for*))\" style=\"color: inherit\">for*</a></span> <span class=\"p\">([</span><span class=\"n\">row</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span> <span class=\"mi\">8</span><span class=\"p\">)]</span> <span class=\"p\">[</span><span class=\"n\">col</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span> <span class=\"mi\">8</span><span class=\"p\">)]</span>\n         <span class=\"kd\">#:when</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._odd~3f))\" style=\"color: inherit\">odd?</a></span> <span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._even~3f))\" style=\"color: inherit\">even?</a></span> <span class=\"n\">col</span><span class=\"p\">))</span>\n                    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._even~3f))\" style=\"color: inherit\">even?</a></span> <span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._odd~3f))\" style=\"color: inherit\">odd?</a></span> <span class=\"n\">col</span><span class=\"p\">))))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">col</span> <span class=\"n\">cell-width</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">row</span> <span class=\"n\">cell-height</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">draw-rectangle</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">cell-width</span> <span class=\"n\">cell-height</span><span class=\"p\">))</span>\n\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([(</span><span class=\"n\">rank</span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-indexed))\" style=\"color: inherit\">in-indexed</a></span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"8\"</span> <span class=\"s2\">\"7\"</span> <span class=\"s2\">\"6\"</span> <span class=\"s2\">\"5\"</span> <span class=\"s2\">\"4\"</span> <span class=\"s2\">\"3\"</span> <span class=\"s2\">\"2\"</span> <span class=\"s2\">\"1\"</span><span class=\"p\">))])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">[</span><span class=\"n\">_0</span> <span class=\"n\">h</span> <span class=\"n\">_1</span> <span class=\"n\">_2</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">get-text-extent</span> <span class=\"n\">rank</span> <span class=\"n\">font</span> <span class=\"no\">#t</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">index</span> <span class=\"n\">cell-height</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">cell-height</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">h</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">draw-text</span> <span class=\"n\">rank</span> <span class=\"n\">margin</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n  \n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span> <span class=\"n\">index</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-indexed))\" style=\"color: inherit\">in-indexed</a></span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"a\"</span> <span class=\"s2\">\"b\"</span> <span class=\"s2\">\"c\"</span> <span class=\"s2\">\"d\"</span> <span class=\"s2\">\"e\"</span> <span class=\"s2\">\"f\"</span> <span class=\"s2\">\"g\"</span> <span class=\"s2\">\"h\"</span><span class=\"p\">))])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">[</span><span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"n\">_1</span> <span class=\"n\">_2</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">get-text-extent</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span> <span class=\"n\">font</span> <span class=\"no\">#t</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">index</span> <span class=\"n\">cell-width</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">cell-width</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">w</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">draw-text</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">dc-height</span> <span class=\"n\">h</span> <span class=\"n\">margin</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>To use the code, we need to instantiate our new <code>chess-board%</code> class for the board object, but the rest of the main program remains the same:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">board</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">chess-board%</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>You can find the updated program in this <a href=\"https://gist.github.com/alex-hhh/3474167bcb3e19cce4923420f9818b4f\">GitHub Gist</a> and if you run it you will get the result as shown below. We now have a chess board on which to move the pieces, but the pieces can still freely move on the board. We need to restrict the valid location of each chess piece to one of the squares and we will address this in the next section.</p>\n\n<div class=\"figure\"><img src=\"/img/a017/chess-board2low.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"positioning-the-chess-pieces-on-the-board\">Positioning the chess pieces on the board</h2>\n\n<p>The pasteboard and snips use a coordinate system that is based on pixels, with the origin in the top left corner of the canvas, but a chess board is divided in only 64 squares forming an 8x8 grid. In addition to this, the chess game uses a &ldquo;rank&rdquo; and &ldquo;file&rdquo; coordinate system, where the <em>rank</em> represents the row on the board and it is numbered from 1 to 8, 1 being at the bottom, while the <em>file</em> are the columns of the board, labeled using letters from &ldquo;a&rdquo; to &ldquo;h&rdquo;.</p>\n\n<p>Since each chess piece needs to know its location, we can store it directly into the <code>chess-piece%</code> object, as the <code>location</code> field with as setter and getter method. We allow the location to be <code>#f</code> which represents a piece that is not on the board. <code>make-chess-piece</code> will also have to be updated to allow passing an optional location to the created chess piece</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-piece%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">snip%</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._init-field))\" style=\"color: inherit\">init-field</a></span> <span class=\"n\">glyph</span> <span class=\"n\">font</span> <span class=\"n\">size</span> <span class=\"p\">[</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"no\">#f</span><span class=\"p\">])</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/public))\" style=\"color: inherit\">define/public</a></span> <span class=\"p\">(</span><span class=\"n\">set-location</span> <span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"n\">l</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/public))\" style=\"color: inherit\">define/public</a></span> <span class=\"p\">(</span><span class=\"n\">get-location</span><span class=\"p\">)</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>\n\n    <span class=\"c1\">;; rest of the chess-piece% remains the same</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The chess pieces are added to the chess board using the <code>insert</code> method, which allows placing a snip at any coordinate, or at (0, 0) if no coordinates are specified. To place a snip in its correct position, based on the location stored inside the snip, we can derive the <code>pasteboard%</code>&rsquo;s <code>after-insert</code> method, which is invoked after each snip is inserted and call <code>position-piece</code> for the snip:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-insert</span> <span class=\"n\">chess-piece</span> <span class=\"o\">.</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._rest))\" style=\"color: inherit\">rest</a></span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"n\">position-piece</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">chess-piece</span><span class=\"p\">))</span>\n    \n    <span class=\"c1\">;; rest of the chess-board% definition remains the same</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>position-piece</code> takes a chess piece, finds the <code>x</code>, <code>y</code> coordinate for it on the chess board based on the location stored inside the snip and moves the piece to that location using the <code>pasteboard%</code>s <code>move-to</code> method. This function calculates the position based on the current canvas width and height, rather than pre-calculating the square positions, so it will work correctly regardless of the size of the board, or even if it is invoked when the size of the board changes:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">embedded-gui</span><span class=\"p\">)</span> <span class=\"c1\">; for snip-width and snip-height</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">position-piece</span> <span class=\"n\">board</span> <span class=\"n\">piece</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">canvas-width</span> <span class=\"n\">canvas-height</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">c</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">board</span> <span class=\"n\">get-canvas</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">c</span> <span class=\"n\">get-size</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">square-width</span> <span class=\"n\">square-height</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">canvas-width</span> <span class=\"mi\">8</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">canvas-height</span> <span class=\"mi\">8</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">rank</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"n\">location-&gt;rank-file</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">piece</span> <span class=\"n\">get-location</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((quote._~23~25kernel)._define-values))\" style=\"color: inherit\">define-values</a></span> <span class=\"p\">(</span><span class=\"n\">square-x</span> <span class=\"n\">square-y</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span> <span class=\"n\">square-width</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">rank</span> <span class=\"n\">square-height</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">piece-width</span> <span class=\"p\">(</span><span class=\"n\">snip-width</span> <span class=\"n\">piece</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">piece-height</span> <span class=\"p\">(</span><span class=\"n\">snip-height</span> <span class=\"n\">piece</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">board</span> <span class=\"n\">move-to</span> <span class=\"n\">piece</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">square-x</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">square-width</span> <span class=\"n\">piece-width</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">square-y</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">square-height</span> <span class=\"n\">piece-height</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>location-&gt;rank-file</code> function, used by <code>position-piece</code>, converts a chess board location into the row and column of the corresponding square on the board. It is simpler for our program to use chess board locations, written as &ldquo;d3&rdquo; or &ldquo;f5&rdquo;, as they can be read as imputs from the user or from a file:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">location-&gt;rank-file</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string~3f))\" style=\"color: inherit\">string?</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(def._((quote._~23~25kernel)._raise-argument-error))\" style=\"color: inherit\">raise-argument-error</a></span> <span class=\"o\">'</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"s2\">\"valid chess position a1 .. h8\"</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span>\n    <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._index-of))\" style=\"color: inherit\">index-of</a></span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"sc\">#\\a</span> <span class=\"sc\">#\\b</span> <span class=\"sc\">#\\c</span> <span class=\"sc\">#\\d</span> <span class=\"sc\">#\\e</span> <span class=\"sc\">#\\f</span> <span class=\"sc\">#\\g</span> <span class=\"sc\">#\\h</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-ref))\" style=\"color: inherit\">string-ref</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"mi\">0</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">rank</span>\n    <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._index-of))\" style=\"color: inherit\">index-of</a></span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"sc\">#\\8</span> <span class=\"sc\">#\\7</span> <span class=\"sc\">#\\6</span> <span class=\"sc\">#\\5</span> <span class=\"sc\">#\\4</span> <span class=\"sc\">#\\3</span> <span class=\"sc\">#\\2</span> <span class=\"sc\">#\\1</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-ref))\" style=\"color: inherit\">string-ref</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">rank</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(def._((quote._~23~25kernel)._raise-argument-error))\" style=\"color: inherit\">raise-argument-error</a></span> <span class=\"o\">'</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"s2\">\"valid chess position a1 .. h8\"</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"n\">rank</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._file))\" style=\"color: inherit\">file</a></span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>We can now write a function which loads a chess game onto the board. The game is encoded as a string with the piece mnemonic followed by its position. For example, &ldquo;Ra1&rdquo; means that the white rook is at square &ldquo;a1&rdquo;. The function just parses the string, creates the chess pieces and inserts them onto the board. Also, the first thing this function does is to clear the board of previous pieces, by calling the <code>pasteboard%</code>&rsquo;s <code>clear</code> method:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">initial</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span>\n   <span class=\"s2\">\"Ra1Nb1Bc1Qd1Ke1Bf1Ng1Rh1\"</span>\n   <span class=\"s2\">\"Pa2Pb2Pc2Pd2Pe2Pf2Pg2Ph2\"</span>\n   <span class=\"s2\">\"pa7pb7pc7pd7pe7pf7pg7ph7\"</span>\n   <span class=\"s2\">\"ra8nb8bc8qd8ke8bf8ng8rh8\"</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">setup-board</span> <span class=\"n\">board</span> <span class=\"n\">position</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">board</span> <span class=\"n\">clear</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">piece-count</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span> <span class=\"n\">position</span><span class=\"p\">)</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">index</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-range))\" style=\"color: inherit\">in-range</a></span> <span class=\"n\">piece-count</span><span class=\"p\">)])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">pos</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">index</span> <span class=\"mi\">3</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">name</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._substring))\" style=\"color: inherit\">substring</a></span> <span class=\"n\">position</span> <span class=\"n\">pos</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">pos</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._substring))\" style=\"color: inherit\">substring</a></span> <span class=\"n\">position</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">pos</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">pos</span><span class=\"p\">)</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">board</span> <span class=\"n\">insert</span> <span class=\"p\">(</span><span class=\"n\">make-chess-piece</span> <span class=\"n\">name</span> <span class=\"n\"><a href=\"http://docs.racket-lang.org/xml/index.html#(def._((lib._xml/main..rkt)._location))\" style=\"color: inherit\">location</a></span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>If you run the program now, you will notice that, while the chess pieces are correctly positioned initially, when the board is resized, the pieces will stay in place, instead of moving with their respective squares. We can fix this by repositioning the pieces when the board is resized: the <code>on-display-size</code> method is q called when the canvas changes size, and inside it we can iterate over all the snips in the pasteboard and simply call <code>position-piece</code> for each one. Since <code>position-piece</code> looks at the location of a piece (&ldquo;d3&rdquo;, &ldquo;f5&rdquo;, etc) and always takes the current canvas size into consideration, it will move the piece at its correct location. The code that repositions the snip pieces is also wrapped in <code>begin-edit-sequence</code>/<code>end-edit-sequence</code> method calls on the pasteboard. These calls ensure that the pasteboard will not be refreshed while the snips are moved and it will only be refreshed at the end after all snips were moved to their new locations. It is a good idea to wrap any code that modifies more than one snip in a <code>begin-edit-sequence</code>/<code>end-edit-sequence</code> block, otherwise the pasteboard will refresh more than necessary and graphics performance will be poor.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">on-display-size</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">begin-edit-sequence</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"n\">loop</span> <span class=\"p\">([</span><span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">find-first-snip</span><span class=\"p\">)])</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">snip</span>\n          <span class=\"p\">(</span><span class=\"n\">position-piece</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">snip</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">next</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">end-edit-sequence</span><span class=\"p\">))</span>\n      \n    <span class=\"c1\">;; rest of the chess-board% definition remains the same</span>\n\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>You can find the updated program in this <a href=\"https://gist.github.com/alex-hhh/96604c1a01b9ae77e5f1227536f6cb67\">GitHub Gist</a> and if you run it you will get the result as shown below. While the pieces are in place now, they can still be moved to arbitrary positions, so it is time to start implementing some game logic now, this however is left for <a href=\"/2018/10/chess-game-using-racket-s-pasteboard-part-2.html\">another blog post</a>.</p>\n\n<div class=\"figure\"><img src=\"/img/a017/chess-board3low.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>") (u . "/img/a017/thumb.png")) ((? . 12) f post (u . "Interactive Overlays With the Racket Plot Package -- Update") (? . 12) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/03/interactive-overlays-with-the-racket-plot-package-update.html" . windows) (u . "/2018/03/interactive-overlays-with-the-racket-plot-package-update.html") (u . "2018-03-20T10:12:10") (? . 0) (? . 11) (c (u . "racket")) (u . "\n<p>I announced my <a href=\"/2018/02/interactive-overlays-with-the-racket-plot-package.html\">original</a> plot overlay implementation on the <a href=\"https://groups.google.com/forum/#!forum/racket-users\">Racket Users</a> mailing list and the Racket developers were enthusiastic about these improvements and they suggested that I contribute them to the main plot package. They also suggested a different approach for implementing this feature, which results in more flexibility for implementing overlays.</p>") #t (u . "\n<p>I announced my <a href=\"/2018/02/interactive-overlays-with-the-racket-plot-package.html\">original</a> plot overlay implementation on the <a href=\"https://groups.google.com/forum/#!forum/racket-users\">Racket Users</a> mailing list and the Racket developers were enthusiastic about these improvements and they suggested that I contribute them to the main plot package. They also suggested a different approach for implementing this feature, which results in more flexibility for implementing overlays.</p>\n<!-- more-->\n\n<p>The code has now been added to the official racket <a href=\"https://github.com/racket/plot\">plot</a> repository and these features will be available in the next Racket release. If you want to try them now, you will need to clone and install the package locally &mdash; <a href=\"http://localhost:3001/2018/01/changing-built-in-racket-packages.html\">this blog post</a> may be of assistance.</p>\n\n<p>The new implementation relies on using existing plot renderers for the overlays themselves and it is not always obvious how to use it: the only new API functions added are <code>set-mouse-event-callback</code> and <code>set-overlay-renderers</code> methods to the <code>snip%</code> object returned by <code>plot-snip</code>. The examples below are meant as a tutorial on how to achieve basic tasks using this new functionality. For more real world examples of what is possible to build using this feature, see the <a href=\"/2018/02/interactive-overlays-with-the-racket-plot-package.html\">original</a> post.</p>\n\n<h2 id=\"display-the-current-value-of-a-function\">Display the current value of a function</h2>\n\n<p>Perhaps the simplest example of overlays is to display the current value of a function at the mouse position. The code below is all that is needed to achieve this. You can evaluate it in DrRacket to obtain the plot:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">plot</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">((</span><span class=\"n\">make-current-value-renderer</span> <span class=\"n\">fn</span><span class=\"p\">)</span> <span class=\"n\">snip</span> <span class=\"n\">event</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">overlays</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-event-type</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\">motion</span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"n\">vrule</span> <span class=\"n\">x</span> <span class=\"kd\">#:style</span> <span class=\"o\">'</span><span class=\"ss\">long-dash</span><span class=\"p\">)</span>\n               <span class=\"p\">(</span><span class=\"n\">point-label</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\">fn</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"kd\">#:anchor</span> <span class=\"o\">'</span><span class=\"ss\">auto</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-overlay-renderers</span> <span class=\"n\">overlays</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"n\">plot-snip</span> <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sin))\" style=\"color: inherit\">sin</a></span><span class=\"p\">)</span> <span class=\"kd\">#:x-min</span> <span class=\"mi\">0</span> <span class=\"kd\">#:x-max</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mi\">2</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._pi))\" style=\"color: inherit\">pi</a></span><span class=\"p\">)</span> <span class=\"kd\">#:y-min</span> <span class=\"mf\">-1.5</span> <span class=\"kd\">#:y-max</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-mouse-event-callback</span> <span class=\"p\">(</span><span class=\"n\">make-current-value-renderer</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sin))\" style=\"color: inherit\">sin</a></span><span class=\"p\">))</span>\n<span class=\"n\">snip</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>&hellip; and it looks like this:</p>\n\n<div class=\"figure\"><img src=\"/img/a012/current-value.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The <code>make-current-value-renderer</code> is a function that produces a callback to be attached to a plot snip. The callback is invoked with four parameters: the <code>snip</code> that calls the callback, the mouse <code>event</code>, and <code>x</code> and <code>y</code> coordinates for the mouse event. The <code>x</code> and <code>y</code> are in plot coordinates, meaning they map to the domain of the data displayed in the plot. The callback creates a <code>vrule</code> and a <code>point-label</code> renderer and adds these to the plot using the <code>set-overlay-renderers</code>. Each time <code>set-overlay-renderers</code> is called, any previous overlay renderers are discarded.</p>\n\n<p>You can also pass <code>#f</code> to <code>set-overlay-renderers</code> and this will remove the overlays. This feature is used in the example above: when the form <code>(and\nx y (eq?  (send event get-event-type) 'motion) ...)</code> evaluates to <code>#f</code>, clearing the overlays. Thus, overlays are added only when the mouse is over the actual plot area, <code>x</code> and <code>y</code> are not <code>#f</code> and when the mouse event is a motion event.</p>\n\n<h2 id=\"display-the-current-value-of-a-function-the-fancy-version\">Display the current value of a function, the fancy version</h2>\n\n<p>The <code>point-label</code> renderer used in the previous example has a limited amount of customization for the displayed text: first, the label can only be a text string, second, only the font, size and color of the text can be adjusted, but not the background. For more complex cases, there is the <code>point-pict</code> renderer, which allows displaying and arbitrary <code>pict</code> instead of the label. The built in Racket <a href=\"http://docs.racket-lang.org/pict/index.html\">pict library</a> allows creating sophisticated pictures, including the <code>dc</code> pict constructor, which allows drawing arbitrary graphics on a device context.</p>\n\n<div class=\"figure\"><img src=\"/img/a012/current-value-fancy.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>In the example above, the &ldquo;label&rdquo; displayed is constructed using a pict so that the angle is displayed as a pie slice. The <code>make-tag</code> function prepares the picture using standard <code>pict</code> constructors. The only addition is the <code>pie-slice</code> function, which draws a pie slice using the <code>dc</code> pict constructor.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">pict</span> <span class=\"n\">racket/draw</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">pie-slice</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._angle))\" style=\"color: inherit\">angle</a></span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">nangle</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">npi</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._floor))\" style=\"color: inherit\">floor</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._angle))\" style=\"color: inherit\">angle</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mi\">2</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._pi))\" style=\"color: inherit\">pi</a></span><span class=\"p\">)))))</span>\n                   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._angle))\" style=\"color: inherit\">angle</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mi\">2</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._pi))\" style=\"color: inherit\">pi</a></span> <span class=\"n\">npi</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">draw</span> <span class=\"n\">dc</span> <span class=\"n\">dx</span> <span class=\"n\">dy</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">draw-arc</span> <span class=\"n\">dx</span> <span class=\"n\">dy</span> <span class=\"n\">w</span> <span class=\"n\">h</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">nangle</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">nangle</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"n\">dc</span> <span class=\"n\">draw</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">item-font</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">the-font-list</span> <span class=\"n\">find-or-create-font</span> <span class=\"mi\">12</span> <span class=\"o\">'</span><span class=\"ss\">default</span> <span class=\"o\">'</span><span class=\"ss\">normal</span> <span class=\"o\">'</span><span class=\"ss\">normal</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">background</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(def._((lib._racket/private/class-internal..rkt)._make-object))\" style=\"color: inherit\">make-object</a></span> <span class=\"n\">color%</span> <span class=\"mh\">#xff</span> <span class=\"mh\">#xf8</span> <span class=\"mh\">#xdc</span> <span class=\"mf\">0.8</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">make-tag</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"n\">hc-append</span>\n             <span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"s2\">\"sin(\"</span> <span class=\"n\">item-font</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"n\">colorize</span> <span class=\"p\">(</span><span class=\"n\">pie-slice</span> <span class=\"mi\">15</span> <span class=\"mi\">15</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"s2\">\"black\"</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"s2\">\") <a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a> \"</span> <span class=\"n\">item-font</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></span> <span class=\"n\">y</span> <span class=\"kd\">#:precision</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"n\">item-font</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">r</span> <span class=\"p\">(</span><span class=\"n\">filled-rounded-rectangle</span>\n             <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"n\">pict-width</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"n\">pict-height</span> <span class=\"n\">p</span><span class=\"p\">)</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"mf\">-0.2</span>\n             <span class=\"kd\">#:draw-border?</span> <span class=\"no\">#f</span> <span class=\"kd\">#:color</span> <span class=\"n\">background</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"n\">cc-superimpose</span> <span class=\"n\">r</span> <span class=\"n\">p</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>point-label</code> can be replaced with <code>point-pict</code> to display the fancy label, while the rest of the example remains unchanged.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">((</span><span class=\"n\">make-current-value-renderer</span> <span class=\"n\">fn</span><span class=\"p\">)</span> <span class=\"n\">snip</span> <span class=\"n\">event</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">overlays</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-event-type</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\">motion</span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">pict</span> <span class=\"p\">(</span><span class=\"n\">make-tag</span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\">fn</span> <span class=\"n\">x</span><span class=\"p\">))))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"n\">vrule</span> <span class=\"n\">x</span> <span class=\"kd\">#:style</span> <span class=\"o\">'</span><span class=\"ss\">long-dash</span><span class=\"p\">)</span>\n                 <span class=\"p\">(</span><span class=\"n\">point-pict</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"n\">pict</span> <span class=\"kd\">#:anchor</span> <span class=\"o\">'</span><span class=\"ss\">auto</span> <span class=\"kd\">#:point-sym</span> <span class=\"o\">'</span><span class=\"ss\">none</span><span class=\"p\">)))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-overlay-renderers</span> <span class=\"n\">overlays</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"show-the-tangent-of-a-function\">Show the tangent of a function</h2>\n\n<p>The plot renderers used as overlays can be any valid renderer for the plot. In the example below, the plot is set up to render the tangent of a function at the current mouse position. <code>make-tangent-renderer</code> is the function calculating the tangent and adding a new <code>function</code> renderer to the plot.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">plot</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">((</span><span class=\"n\">make-tangent-renderer</span> <span class=\"n\">fn</span> <span class=\"n\">derivative</span><span class=\"p\">)</span> <span class=\"n\">snip</span> <span class=\"n\">event</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">overlays</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-event-type</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\">motion</span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">((</span><span class=\"n\">slope</span> <span class=\"p\">(</span><span class=\"n\">derivative</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n                <span class=\"p\">(</span><span class=\"n\">intercept</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"p\">(</span><span class=\"n\">fn</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">slope</span> <span class=\"n\">x</span><span class=\"p\">)))</span>\n                <span class=\"p\">(</span><span class=\"n\">tangent</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">slope</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"n\">intercept</span><span class=\"p\">))))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"n\">tangent</span> <span class=\"kd\">#:color</span> <span class=\"s2\">\"blue\"</span><span class=\"p\">)</span>\n                 <span class=\"p\">(</span><span class=\"n\">points</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\">fn</span> <span class=\"n\">x</span><span class=\"p\">))))))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-overlay-renderers</span> <span class=\"n\">overlays</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"n\">plot-snip</span> <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sin))\" style=\"color: inherit\">sin</a></span><span class=\"p\">)</span> <span class=\"kd\">#:x-min</span> <span class=\"mi\">-5</span> <span class=\"kd\">#:x-max</span> <span class=\"mi\">5</span> <span class=\"kd\">#:y-min</span> <span class=\"mf\">-1.5</span> <span class=\"kd\">#:y-max</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-mouse-event-callback</span> <span class=\"p\">(</span><span class=\"n\">make-tangent-renderer</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sin))\" style=\"color: inherit\">sin</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._cos))\" style=\"color: inherit\">cos</a></span><span class=\"p\">))</span>\n<span class=\"n\">snip</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>&hellip; which looks like this:</p>\n\n<div class=\"figure\"><img src=\"/img/a012/tangent.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"select-a-range-in-a-plot-by-dragging-the-mouse\">Select a range in a plot by dragging the mouse</h2>\n\n<p>The mouse event that is passed to the callback can be used to check for mouse button presses and releases, which in turn can be used to implement some GUI operations. In this example, a simple drag select is implemented: the <code>left-down</code> mouse event marks the start of a selection, and the <code>x</code> position is saved into <code>drag-start</code>. While the left button is held down, any motion events will display a <code>rectangles</code> renderer with the selected area, making the selected area appear shaded. The drag operation ends when the mouse button is released, in the example, the selected area is simply removed, but other functionality can be easily implemented.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">plot</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">drag-start</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">drag-selection-callback</span> <span class=\"n\">snip</span> <span class=\"n\">event</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/case.html#(form._((lib._racket/private/more-scheme..rkt)._case))\" style=\"color: inherit\">case</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-event-type</span><span class=\"p\">)</span>\n    <span class=\"p\">((</span><span class=\"n\">left-down</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">drag-start</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n    <span class=\"p\">((</span><span class=\"n\">left-up</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">drag-start</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n    <span class=\"p\">((</span><span class=\"n\">motion</span><span class=\"p\">)</span>\n     <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">overlays</span>\n       <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">x</span> <span class=\"n\">drag-start</span>\n            <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span>\n             <span class=\"p\">(</span><span class=\"n\">rectangles</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"p\">(</span><span class=\"n\">ivl</span> <span class=\"n\">drag-start</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">ivl</span> <span class=\"mf\">-inf.0</span> <span class=\"mf\">+inf.0</span><span class=\"p\">)))</span>\n                         <span class=\"kd\">#:color</span> <span class=\"s2\">\"blue\"</span> <span class=\"kd\">#:alpha</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"n\">point-label</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mf\">0.5</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">drag-start</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                          <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._radians-~3edegrees))\" style=\"color: inherit\">radians-&gt;degrees</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._abs))\" style=\"color: inherit\">abs</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">x</span> <span class=\"n\">drag-start</span><span class=\"p\">)))</span> <span class=\"kd\">#:precision</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                          <span class=\"kd\">#:anchor</span> <span class=\"o\">'</span><span class=\"ss\">center</span> <span class=\"kd\">#:point-sym</span> <span class=\"o\">'</span><span class=\"ss\">none</span><span class=\"p\">))))</span>\n     <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-overlay-renderers</span> <span class=\"n\">overlays</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"n\">plot-snip</span> <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sin))\" style=\"color: inherit\">sin</a></span><span class=\"p\">)</span> <span class=\"kd\">#:x-min</span> <span class=\"mi\">-5</span> <span class=\"kd\">#:x-max</span> <span class=\"mi\">5</span> <span class=\"kd\">#:y-min</span> <span class=\"mf\">-1.5</span> <span class=\"kd\">#:y-max</span> <span class=\"mf\">1.5</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-mouse-event-callback</span> <span class=\"n\">drag-selection-callback</span><span class=\"p\">)</span>\n<span class=\"n\">snip</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>&hellip; and here is what it looks like:</p>\n\n<div class=\"figure\"><img src=\"/img/a012/drag-select.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"histogram-and-bar-chart-plots\">Histogram and bar chart plots</h2>\n\n<p>Histogram plots pose a special challenge as the X domain in the plot area does not directly represent the histogram slots. To convert an X plot coordinate back into the histogram slot, the following information is used:</p>\n\n<ul>\n <li>The X domain is the real axis, starting at 0 by default</li>\n <li>The distance between each histogram bar is specified by the  discrete-histogram-skip parameter or the #:skip argument to the  discrete-histogram renderer</li>\n <li>The width of each histogram bar is one minus discrete-histogram-gap, or the  #:gap parameter passed to the renderer.</li>\n <li>Multiple histograms can be shown, each having a different starting point, as  specified by the #:x-min parameter</li></ul>\n\n<p>The function <code>xposition-&gt;histogram-slot</code> converts an X position back to the histogram series and the slot within that series:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">xposition-&gt;histogram-slot</span> <span class=\"n\">xposition</span>\n                                   <span class=\"p\">(</span><span class=\"n\">skip</span> <span class=\"p\">(</span><span class=\"n\">discrete-histogram-skip</span><span class=\"p\">))</span>\n                                   <span class=\"p\">(</span><span class=\"n\">gap</span> <span class=\"p\">(</span><span class=\"n\">discrete-histogram-gap</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">((</span><span class=\"n\">slot</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-floor))\" style=\"color: inherit\">exact-floor</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">xposition</span> <span class=\"n\">skip</span><span class=\"p\">)))</span>\n         <span class=\"p\">(</span><span class=\"n\">offset</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">xposition</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">skip</span> <span class=\"n\">slot</span><span class=\"p\">)))</span>\n         <span class=\"p\">(</span><span class=\"n\">series</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-floor))\" style=\"color: inherit\">exact-floor</a></span> <span class=\"n\">offset</span><span class=\"p\">))</span>\n         <span class=\"p\">(</span><span class=\"n\">on-bar?</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">gap</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">offset</span> <span class=\"n\">series</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">gap</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">on-bar?</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"n\">series</span> <span class=\"n\">slot</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"no\">#f</span> <span class=\"no\">#f</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>With that function defined, we can implement an &ldquo;on-hover&rdquo; functionality, which display the current value for the bar under the mouse:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">plot</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">series1</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"ss\">Eggs</span> <span class=\"mf\">1.5</span><span class=\"p\">)</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"ss\">Bacon</span> <span class=\"mf\">2.5</span><span class=\"p\">)</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"ss\">Pancakes</span> <span class=\"mf\">3.5</span><span class=\"p\">)))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">series2</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"o\">#</span><span class=\"p\">(</span><span class=\"ss\">Eggs</span> <span class=\"mf\">1.4</span><span class=\"p\">)</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"ss\">Bacon</span> <span class=\"mf\">2.3</span><span class=\"p\">)</span> <span class=\"o\">#</span><span class=\"p\">(</span><span class=\"ss\">Pancakes</span> <span class=\"mf\">3.1</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fetch-value-at</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((quote._~23~25kernel)._let-values))\" style=\"color: inherit\">let-values</a></span> <span class=\"p\">(((</span><span class=\"n\">series</span> <span class=\"n\">slot</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">xposition-&gt;histogram-slot</span> <span class=\"n\">x</span> <span class=\"mf\">2.5</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">series</span> <span class=\"n\">slot</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"n\">series</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">((</span><span class=\"n\">s</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">series</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"n\">series1</span> <span class=\"n\">series2</span><span class=\"p\">))</span>\n                <span class=\"p\">(</span><span class=\"n\">b</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">s</span> <span class=\"n\">slot</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector-ref))\" style=\"color: inherit\">vector-ref</a></span> <span class=\"n\">b</span> <span class=\"mi\">1</span><span class=\"p\">)))))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-hover</span> <span class=\"n\">snip</span> <span class=\"n\">event</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">ovelays</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-event-type</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\">motion</span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">value</span> <span class=\"p\">(</span><span class=\"n\">fetch-value-at</span> <span class=\"n\">x</span><span class=\"p\">)))</span>\n           <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">value</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span> <span class=\"n\">y</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"n\">point-label</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"~a minutes\"</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n                                   <span class=\"kd\">#:anchor</span> <span class=\"o\">'</span><span class=\"ss\">auto</span> <span class=\"kd\">#:point-sym</span> <span class=\"o\">'</span><span class=\"ss\">none</span><span class=\"p\">))))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-overlay-renderers</span> <span class=\"n\">ovelays</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"n\">plot-snip</span>\n              <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span>\n               <span class=\"p\">(</span><span class=\"n\">discrete-histogram</span> <span class=\"n\">series1</span> <span class=\"kd\">#:skip</span> <span class=\"mf\">2.5</span> <span class=\"kd\">#:x-min</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n               <span class=\"p\">(</span><span class=\"n\">discrete-histogram</span> <span class=\"n\">series2</span> <span class=\"kd\">#:skip</span> <span class=\"mf\">2.5</span> <span class=\"kd\">#:x-min</span> <span class=\"mi\">1</span> <span class=\"kd\">#:color</span> <span class=\"mi\">2</span> <span class=\"kd\">#:line-color</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n              <span class=\"kd\">#:x-label</span> <span class=\"s2\">\"Breakfast Food\"</span> <span class=\"kd\">#:y-label</span> <span class=\"s2\">\"Cooking Time (minutes)\"</span> <span class=\"kd\">#:y-max</span> <span class=\"mi\">4</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-mouse-event-callback</span> <span class=\"n\">on-hover</span><span class=\"p\">)</span>\n<span class=\"n\">snip</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The end result is shown below:</p>\n\n<div class=\"figure\"><img src=\"/img/a012/histogram.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"how-to-embed-plots-in-gui-applications\">How to embed plots in GUI applications</h2>\n\n<p>The <code>snip</code> object produced by <code>plot-snip</code> will be displayed correctly by DrRacket in the REPL window, however some more work is needed to embed plots in GUI applications. The <code>mrlib/snip-canvas</code> library provides a <code>snip-canvas%</code> object that can hold a <code>snip</code>. The <code>snip-canvas%</code> is a GUI object and can be added to a <code>frame%</code> or <code>panel%</code>. The example below extends the first example to show the plot in a separate window. The snip creation code is wrapped inside the <code>make-plot-snip</code> function and this function is passed to the <code>snip-canvas%</code> constructor to add the snip to the canvas. When the code below is run, the plot should show up in a separate frame, similar to what <code>plot-frame</code> does. The canvas itself can of course be created as part of a more sophisticated GUI.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">racket/gui</span> <span class=\"n\">mrlib/snip-canvas</span> <span class=\"n\">plot</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">((</span><span class=\"n\">make-current-value-renderer</span> <span class=\"n\">fn</span><span class=\"p\">)</span> <span class=\"n\">snip</span> <span class=\"n\">event</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">overlays</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-event-type</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\">motion</span><span class=\"p\">)</span>\n         <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"n\">vrule</span> <span class=\"n\">x</span> <span class=\"kd\">#:style</span> <span class=\"o\">'</span><span class=\"ss\">long-dash</span><span class=\"p\">)</span>\n               <span class=\"p\">(</span><span class=\"n\">point-label</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">x</span> <span class=\"p\">(</span><span class=\"n\">fn</span> <span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"kd\">#:anchor</span> <span class=\"o\">'</span><span class=\"ss\">auto</span><span class=\"p\">))))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-overlay-renderers</span> <span class=\"n\">overlays</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">make-plot-snip</span> <span class=\"n\">width</span> <span class=\"n\">height</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">snip</span>  <span class=\"p\">(</span><span class=\"n\">plot-snip</span> <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sin))\" style=\"color: inherit\">sin</a></span><span class=\"p\">)</span>\n                           <span class=\"kd\">#:x-min</span> <span class=\"mi\">0</span> <span class=\"kd\">#:x-max</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mi\">2</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._pi))\" style=\"color: inherit\">pi</a></span><span class=\"p\">)</span> <span class=\"kd\">#:y-min</span> <span class=\"mf\">-1.5</span> <span class=\"kd\">#:y-max</span> <span class=\"mf\">1.5</span>\n                           <span class=\"kd\">#:width</span> <span class=\"n\">width</span> <span class=\"kd\">#:height</span> <span class=\"n\">height</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-mouse-event-callback</span> <span class=\"p\">(</span><span class=\"n\">make-current-value-renderer</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sin))\" style=\"color: inherit\">sin</a></span><span class=\"p\">))</span>\n  <span class=\"n\">snip</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">toplevel</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">frame%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Plot\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">width</span> <span class=\"mi\">500</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">height</span> <span class=\"mi\">200</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">canvas</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">snip-canvas%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">make-snip</span> <span class=\"n\">make-plot-snip</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">toplevel</span> <span class=\"n\">show</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>This functionality will be available in the next Racket version (after 6.12). If you want to use it before that, you will have to install the plot package from the <a href=\"https://github.com/racket/plot\">GitHub repository</a> &mdash; these modifications run fine in Racket 6.11 and 6.12 at least.</p>\n\n<p>The full running examples for the plots in this blog post are available in this <a href=\"https://gist.github.com/alex-hhh/67a67d791ee6c73d3c13e50981cf43cf\">GitHub Gist</a></p>") (u . "/img/a012/thumb.png")) ((? . 16) f post (u . "Interactive Overlays With the Racket Plot Package") (? . 16) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/02/interactive-overlays-with-the-racket-plot-package.html" . windows) (u . "/2018/02/interactive-overlays-with-the-racket-plot-package.html") (u . "2018-02-03T08:08:05") (? . 17) (? . 0) (c (u . "racket")) (u . "\n<p>The <a href=\"http://docs.racket-lang.org/plot/index.html\">Racket plot package</a> produces interactive <code>snip%</code> objects which allow zooming of the plot area. While this is a cool and sometimes useful feature, the functionality is hard coded in the <code>plot-snip%</code> class inside the package. I extended the package to allow the user to customize the interactive features of the plot, to display additional information when the user hovers the mouse over the plot.</p>") #t (u . "\n<p>The <a href=\"http://docs.racket-lang.org/plot/index.html\">Racket plot package</a> produces interactive <code>snip%</code> objects which allow zooming of the plot area. While this is a cool and sometimes useful feature, the functionality is hard coded in the <code>plot-snip%</code> class inside the package. I extended the package to allow the user to customize the interactive features of the plot, to display additional information when the user hovers the mouse over the plot.</p>\n<!-- more-->\n\n<hr />\n\n<p><strong>Update 20 Mar 2018</strong> There is an updated <a href=\"/2018/03/interactive-overlays-with-the-racket-plot-package-update.html\">blog post</a> detailing the actual code that made it into the official racket plot package. The overall functionality and capabilities remain the same but the API is different.</p>\n\n<hr />\n\n<h2 id=\"a-simple-example\">A simple example</h2>\n\n<p>Here is a simple example that replaces the default zoom behavior of the plots with code that displays the current value of the function at the mouse location:</p>\n\n<div class=\"figure\"><img src=\"/img/a010/plot-hover-5.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<hr />\n\n<p><strong>NOTE:</strong> The above plot was generated by running inside DrRacket the source code shown below. The program depends on a special build of the plot library which you can find <a href=\"https://github.com/alex-hhh/plot/tree/ah/interactive-overlays\">here</a>, note that the code is on the &ldquo;ah/interactive-overlays&rdquo; branch. You will need to install this as a local package. If you don&rsquo;t know how to do that, <a href=\"/2018/01/changing-built-in-racket-packages.html\">this post</a> may help.</p>\n\n<hr />\n\n<p>The program works by first creating a plot object using the <code>plot-snip</code> function. Next, the callback <code>on-hover</code> is added to the resulting plot snip object using <code>set-mouse-callback</code>. This callback is invoked each time the mouse moves over the plot and the X and Y coordinates passed to the callback are in the plot domain, in the example above, X will be between &ndash;10 and 10, as this was specified to the plot function, and Y will be between &ndash;1 and 1 which is the range of the sine function. The callback itself can add any number of overlays to the plot and they will be shown. In this example, it adds a vertical line, a marker at the function value at the mouse location and a label where the mouse cursor is.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">racket</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">plot</span> <span class=\"n\">pict</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">add-pict-overlay</span> <span class=\"n\">plot-snip</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">pict</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">plot-snip</span> <span class=\"n\">add-general-overlay</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">dc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">draw-pict</span> <span class=\"n\">pict</span> <span class=\"n\">dc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"n\">pict-width</span> <span class=\"n\">pict</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">pict-height</span> <span class=\"n\">pict</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-hover</span> <span class=\"n\">snip</span> <span class=\"n\">event</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">clear-overlays</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">sx</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sin))\" style=\"color: inherit\">sin</a></span> <span class=\"n\">x</span><span class=\"p\">))</span>\n    <span class=\"c1\">;; Add vertical line at current position</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-vrule-overlay</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"c1\">;; Mark the value on the plot at the current position</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-mark-overlay</span> <span class=\"n\">x</span> <span class=\"n\">sx</span> <span class=\"kd\">#:radius</span> <span class=\"mi\">10</span> <span class=\"kd\">#:label</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></span> <span class=\"n\">sx</span> <span class=\"kd\">#:precision</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n    <span class=\"c1\">;; Add a picture at the current mouse location</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"n\">vl-append</span> <span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"X Value ~a\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></span> <span class=\"n\">x</span> <span class=\"kd\">#:precision</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n                         <span class=\"p\">(</span><span class=\"n\">text</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"Y Value ~a\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></span> <span class=\"n\">sx</span> <span class=\"kd\">#:precision</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n    <span class=\"p\">(</span><span class=\"n\">add-pict-overlay</span> <span class=\"n\">snip</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">p</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">refresh-overlays</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"n\">plot-snip</span> <span class=\"p\">(</span><span class=\"n\">function</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._sin))\" style=\"color: inherit\">sin</a></span><span class=\"p\">)</span>\n                        <span class=\"kd\">#:x-min</span> <span class=\"mi\">-10</span> <span class=\"kd\">#:x-max</span> <span class=\"mi\">10</span> \n                        <span class=\"kd\">#:width</span> <span class=\"mi\">400</span> <span class=\"kd\">#:height</span> <span class=\"mi\">250</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-mouse-callback</span> <span class=\"n\">on-hover</span><span class=\"p\">)</span>\n<span class=\"n\">snip</span> <span class=\"c1\">; show the snip in the REPL.</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"vertical-rule-and-function-value\">Vertical rule and function value</h2>\n\n<p>The image below shows the application of this basic idea to an actual use case: to show the current value of the data at the mouse location. This example is a bit more complex, as there are two linked plots and when the mouse hovers over one of them, the current value at that position is shown on both of them &mdash; this mechanism can be extended to any number of plots.</p>\n\n<div class=\"figure\"><img src=\"/img/a010/plot-hover-1.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This example is from the <a href=\"/2017/09/introducing-activitylog2.html\">ActivityLog2</a> application. This is implemented in the <code>draw-marker-at</code> method in the <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/rkt/inspect-graphs.rkt#L627\">rkt/inspect-graphs.rkt</a> file.</p>\n\n<h2 id=\"highlight-regions\">Highlight regions</h2>\n\n<p>Another use case is to highlight a region on the plot. In the image below, the current lap of an activity is highlighted when the user selects a lap on the left. This functionality could also be achieved using the <code>lines-interval</code> plot renderer, but this requires redrawing the entire render tree each time a new lap is highlighted. Since a usual bike ride contains between 5000 and 10000 data points rendering it takes some time and the lap highlight would introduce unpleasant delays.</p>\n\n<div class=\"figure\"><img src=\"/img/a010/plot-hover-2.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This is implemented in the <code>highlight-interval</code> method in the <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/rkt/inspect-graphs.rkt#L752\">rkt/inspect-graphs.rkt</a> file.</p>\n\n<h2 id=\"display-complex-information\">Display complex information</h2>\n\n<p>Sometimes a plot is based on complex underlying information and displaying it is really useful. The data for the power-duration plot shown below is constructed as follows:</p>\n\n<ul>\n <li>for each bike session, the mean maximal values are determined for a set of  predefined durations&mdash; that is, the best power maintained over 10s, 15s,  1min, etc, over the entire ride.</li>\n <li>for each duration, the best power for that duration is selected from the  list of sessions</li>\n <li>spline interpolation is used to plot these power values as a function of  duration (the purple line on the plot)</li>\n <li>a theoretical power-duration model is fitted over this data</li></ul>\n\n<p>This is a lot of information, which ultimately is represented as two curves on a plot. Using interactive overlays, the underlying data can be explored: the maximal power and modeled maximal power at the current duration, and the two original data points from which the interpolation is done, including the date when the bike sessions occurred.</p>\n\n<div class=\"figure\"><img src=\"/img/a010/plot-hover-3.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This is implemented in the <code>plot-hover-callback</code> in the <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/rkt/trends-bavg.rkt#L575\">rkt/trends-bavg.rkt</a> file.</p>\n\n<h2 id=\"displaying-information-on-histogram-plots\">Displaying information on histogram plots</h2>\n\n<p>Histogram plots benefit from displaying additional information about the bar under the cursor. In the example below, the underlying cummulative times that form the basis for the histogram bars are displayed when the mouse is moved over the relevant section.</p>\n\n<div class=\"figure\"><img src=\"/img/a010/plot-hover-4.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Histogram plots pose a special challenge as the plot X domain does not directly represent the histogram slots. To convert an X plot coordinate back into the histogram slot, the following information is used:</p>\n\n<ul>\n <li>The X domain is the real axis, starting at 0 by default</li>\n <li>The distance between each histogram bar is specified by the  <code>discrete-histogram-skip</code> parameter or the <code>#:skip</code> argument to the  <code>discrete-histogram</code> renderer</li>\n <li>The width of each histogram bar is one minus <code>discrete-histogram-gap</code>, or  the <code>#:gap</code> parameter passed to the renderer.</li>\n <li>Multiple histograms can be shown, each having a different starting point, as  specified by the <code>#:x-min</code> parameter</li></ul>\n\n<p>The function below converts an X position back to the histogram series and the slot within that series:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">xposition-&gt;histogram-slot</span> <span class=\"n\">xposition</span>\n                                   <span class=\"p\">(</span><span class=\"n\">skip</span> <span class=\"p\">(</span><span class=\"n\">discrete-histogram-skip</span><span class=\"p\">))</span>\n                                   <span class=\"p\">(</span><span class=\"n\">gap</span> <span class=\"p\">(</span><span class=\"n\">discrete-histogram-gap</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">((</span><span class=\"n\">slot</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-floor))\" style=\"color: inherit\">exact-floor</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">xposition</span> <span class=\"n\">skip</span><span class=\"p\">)))</span>\n         <span class=\"p\">(</span><span class=\"n\">offset</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">xposition</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">skip</span> <span class=\"n\">slot</span><span class=\"p\">)))</span>\n         <span class=\"p\">(</span><span class=\"n\">series</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-floor))\" style=\"color: inherit\">exact-floor</a></span> <span class=\"n\">offset</span><span class=\"p\">))</span>\n         <span class=\"p\">(</span><span class=\"n\">on-bar?</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">gap</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">offset</span> <span class=\"n\">series</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">gap</span> <span class=\"mi\">2</span><span class=\"p\">)))))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">on-bar?</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"n\">series</span> <span class=\"n\">slot</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/values.html#(def._((quote._~23~25kernel)._values))\" style=\"color: inherit\">values</a></span> <span class=\"no\">#f</span> <span class=\"no\">#f</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The example in the image above is implemented in the <code>plot-hover-callback</code> method in the <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/rkt/trends-trivol.rkt#L280\">rkt/trends-trivol.rkt</a> file. There are other examples of adding overlays to histogram plots in the <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/rkt/inspect-histogram.rkt#L268\">rkt/inspect-histogram.rkt</a>, <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/rkt/trends-trivol.rkt#L280\">rkt/trends-hist.rkt</a>, <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/rkt/trends-tiz.rkt#L290\">rkt/trends-tiz.rkt</a> and <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/rkt/trends-vol.rkt#L251\">rkt/trends-vol.rkt</a> files.</p>\n\n<h2 id=\"summary-of-the-new-plot-snip-methods\">Summary of the new <code>plot-snip%</code> methods</h2>\n\n<p>The following methods were added to the <code>snip%</code> object returned by <code>plot-snip%</code>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-mouse-callback</span> <span class=\"n\">callback</span><span class=\"p\">)</span>\n<span class=\"n\">callback:</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/data-structure-contracts.html#(def._((lib._racket/contract/base..rkt)._or/c))\" style=\"color: inherit\">or/c</a></span> <span class=\"no\">#f</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))\" style=\"color: inherit\">-&gt;</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Object_and_Class_Contracts.html#(def._((lib._racket/class..rkt)._is-a~3f/c))\" style=\"color: inherit\">is-a?/c</a></span> <span class=\"n\">2d-plot-snip%</span><span class=\"p\">)</span> \n                       <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Object_and_Class_Contracts.html#(def._((lib._racket/class..rkt)._is-a~3f/c))\" style=\"color: inherit\">is-a?/c</a></span> <span class=\"n\">mouse-event%</span><span class=\"p\">)</span>\n                       <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/data-structure-contracts.html#(def._((lib._racket/contract/base..rkt)._or/c))\" style=\"color: inherit\">or/c</a></span> <span class=\"no\">#f</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))\" style=\"color: inherit\">number?</a></span><span class=\"p\">)</span> \n                       <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/data-structure-contracts.html#(def._((lib._racket/contract/base..rkt)._or/c))\" style=\"color: inherit\">or/c</a></span> <span class=\"no\">#f</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))\" style=\"color: inherit\">number?</a></span><span class=\"p\">)</span> \n                       <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/data-structure-contracts.html#(def._((lib._racket/contract/private/misc..rkt)._any/c))\" style=\"color: inherit\">any/c</a></span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">clear-overlays</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">refresh-overlays</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-mark-overlay</span>\n    <span class=\"n\">x</span> <span class=\"n\">y</span>\n    <span class=\"kd\">#:radius</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"kd\">#:pen</span> <span class=\"p\">(</span><span class=\"n\">pen</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n    <span class=\"kd\">#:brush</span> <span class=\"p\">(</span><span class=\"n\">brush</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n    <span class=\"kd\">#:label</span> <span class=\"p\">(</span><span class=\"n\">label</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n    <span class=\"kd\">#:label-offset</span> <span class=\"p\">(</span><span class=\"n\">offset</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"kd\">#:label-font</span> <span class=\"p\">(</span><span class=\"n\">font</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n    <span class=\"kd\">#:label-fg-color</span> <span class=\"p\">(</span><span class=\"n\">fg-color</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n    <span class=\"kd\">#:label-bg-color</span> <span class=\"p\">(</span><span class=\"n\">bg-color</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n    \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-vrule-overlay</span> <span class=\"n\">x</span> <span class=\"kd\">#:pen</span> <span class=\"p\">(</span><span class=\"n\">pen</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-hrule-overlay</span> <span class=\"n\">y</span> <span class=\"kd\">#:pen</span> <span class=\"p\">(</span><span class=\"n\">pen</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-xrule-overlay</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"kd\">#:pen</span> <span class=\"p\">(</span><span class=\"n\">pen</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-vrange-overlay</span> <span class=\"n\">xmin</span> <span class=\"n\">xmax</span> <span class=\"kd\">#:brush</span> <span class=\"p\">(</span><span class=\"n\">brush</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-hrange-overlay</span> <span class=\"n\">ymin</span> <span class=\"n\">ymax</span> <span class=\"kd\">#:brush</span> <span class=\"p\">(</span><span class=\"n\">brush</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-rect-overlay</span> <span class=\"n\">xmin</span> <span class=\"n\">xmax</span> <span class=\"n\">ymin</span> <span class=\"n\">ymax</span> <span class=\"kd\">#:brush</span> <span class=\"p\">(</span><span class=\"n\">brush</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">add-general-overlay</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">draw-fn</span> <span class=\"n\">width</span> <span class=\"n\">height</span> <span class=\"kd\">#:offset</span> <span class=\"p\">(</span><span class=\"n\">offset</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"n\">draw-fn:</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/function-contracts.html#(form._((lib._racket/contract/base..rkt)._-~3e))\" style=\"color: inherit\">-&gt;</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Object_and_Class_Contracts.html#(def._((lib._racket/class..rkt)._is-a~3f/c))\" style=\"color: inherit\">is-a?/c</a></span> <span class=\"n\">dc%</span><span class=\"p\">)</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))\" style=\"color: inherit\">number?</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))\" style=\"color: inherit\">number?</a></span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><code>set-mouse-callback</code> arranges for CALLBACK to be invoked when the mouse hovers over the plot, or when #f is passed, disable the callback. When a hover callback is active, the default &ldquo;zoom on mouse drag&rdquo; behavior of the plot snip is disabled.</p>\n\n<p>The callback is invoked with the snip, the mouse event and the X, Y coordinates where the mouse is. The X, Y coordinates are in plot coordinate system, the domain over which data is being plotted.</p>\n\n<p>The CALLBACK will also be invoked with X and Y being #f when the mouse is over the plot snip, but outside the actual plot area.</p>\n\n<p>The snip% object passed to the callback will always be the one that generated the event and it should be used to add any overlays. Plot snips can be copied (they certainly are when they are shown in DrRacket), and it is easy to receive hover events from a copy and adding overlays to the original.</p>\n\n<hr />\n\n<p><code>clear-overlays</code> will clear all overlays added to the snip. The overlays are only cleared when this method is called, so a callback that adds overlays as the mouse moves should start by clearing the previous overlays.</p>\n\n<hr />\n\n<p><code>refresh-overlays</code> will refresh the plot area and draw the overlays. Overlays are not drawn when they are added, so a callback that adds overlays should finish by refreshing the overlays. Originally, each of the <code>add-*-overlay</code> function contained an internal refresh, but this resulted in the plot being refreshed too many times: once after each overlay was added.</p>\n\n<hr />\n\n<p><code>add-mark-overlay</code> will add a marker overlay at position X Y on the plot (X and Y are in plot coordinates). The marker is a circle of RADIUS drawn with PEN and BRUSH, or if these parameters are #f a default pen and brush is used. If RADIUS is 0 or negative, the circle is not drawn, this can be used to draw the LABEL only.</p>\n\n<p>LABEL, if not #f, is a string drawn next to the marker, it will be offset in X and Y axes by OFFSET pixels and will be drawn in one of the &ldquo;top-right&rdquo;, &ldquo;top-left&rdquo;, &ldquo;bottom-right&rdquo;, &ldquo;bottom-left&rdquo; positions such that the label is always inside the plot. For example, the label is drawn top-right of the marker by default, but if this would result in the label being drawn off screen on the right, it will be moved to &ldquo;top-left&rdquo; position.</p>\n\n<p>FONT, FG-COLOR and BG-COLOR are the font, foreground, and background colors for the label. If they are #f, default values are used.</p>\n\n<hr />\n\n<p><code>add-vrule-overlay</code> adds a vertical line at position X (in plot coordinates) using PEN.</p>\n\n<hr />\n\n<p><code>add-hrule-overlay</code> adds a horizontal line at position Y (in plot coordinates) using PEN.</p>\n\n<hr />\n\n<p><code>add-xrule-overlay</code> adds both a vertical and horizontal lines to the plot such that they intersect at X, Y (in plot coordinates). The lines are drawn using PEN. This method is equivalent to adding a vertical line at X and a horizontal line at Y, but it is more efficient.</p>\n\n<hr />\n\n<p><code>add-vrange-overlay</code> adds a rectangle overlay between XMIN and XMAX, in plot cordinates, for the entire height of the plot.</p>\n\n<hr />\n\n<p><code>add-hrange-overlay</code> adds a rectangle overlay between YMIN and YMAX, in plot cordinates, for the entire width of the plot.</p>\n\n<hr />\n\n<p><code>add-rect-overlay</code> adds a rectangle overlay between the points XMIN, YMIN, XMAX, YMAX, in plot coordinates.</p>\n\n<hr />\n\n<p><code>add-general-overlay</code> will add an overlay that is drawn by a user specified function, DRAWN-FN, at X Y (in plot coordinates) adjusted by OFFSET (in pixels) to either &ldquo;top-right&rdquo;, &ldquo;top-left&rdquo;, &ldquo;bottom-right&rdquo;, &ldquo;bottom-left&rdquo;, such that the drawing area is visible on the plot. WIDTH and HEIGHT represent the dimensions of the picture that will be drawn by DRAWN-FN and they are used to determine the adjustment position relative to the X, Y coordinates.</p>\n\n<p>The function will be invoked with a draw context and X, Y coordinates (in DC coordinates).</p>\n\n<p>This method can be used to draw a pict at a specified position, by using a wrapper such as shown below. This was not included in the plot interface, to avoid a dependency of the plot package on the pict package.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">add-pict-overlay</span> <span class=\"n\">plot-snip</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">pict</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">plot-snip</span> <span class=\"n\">add-general-overlay</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">dc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">draw-pict</span> <span class=\"n\">pict</span> <span class=\"n\">dc</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"n\">pict-width</span> <span class=\"n\">pict</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">pict-height</span> <span class=\"n\">pict</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"source-code\">Source code</h2>\n\n<p>You can find the code for the updated plot library <a href=\"https://github.com/alex-hhh/plot/tree/ah/interactive-overlays\">here</a>, note that the code is on the &ldquo;ah/interactive-overlays&rdquo; branch. You will need to install this as a local package. If you don&rsquo;t know how to do that, <a href=\"/2018/01/changing-built-in-racket-packages.html\">this post</a> may help.</p>\n\n<p>There is also a <a href=\"https://github.com/racket/plot/pull/32\">pull request</a> to get these changes back into the main plot library.</p>") (u . "/img/a010/thumb.png")) ((? . 18) f post (u . "An enhanced text-field% GUI control for Racket") (? . 18) 1551966034 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/11/an-enhanced-text-field-gui-control-for-racket.html" . windows) (u . "/2018/11/an-enhanced-text-field-gui-control-for-racket.html") (u . "2018-11-21T20:28:28") (? . 19) (? . 14) (c (u . "racket")) (u . "\n<p>The Racket GUI library provides a <code>text-field%</code> control which allows input of arbitrary text, but only basic functionality by default. However, the class is designed to be extensible and in this article we&rsquo;ll look at how to extend this control to provide a more modern input control with a cue text and input data validation.</p>") #t (u . "\n<p>The Racket GUI library provides a <code>text-field%</code> control which allows input of arbitrary text, but only basic functionality by default. However, the class is designed to be extensible and in this article we&rsquo;ll look at how to extend this control to provide a more modern input control with a cue text and input data validation.</p>\n<!-- more-->\n\n<hr />\n\n<p><strong>Update 05/03/2019</strong>: This code is now available as a <a href=\"https://pkgs.racket-lang.org/package/gui-widget-mixins\">Racket Package</a> which can be installed using <code>raco pkg install gui-widget-mixins</code>. You can read the documentation for this package <a href=\"https://docs.racket-lang.org/gui-widget-mixins/index.html\">here</a> or visit the <a href=\"https://github.com/alex-hhh/gui-widget-mixins\">GitHub repository</a>.</p>\n\n<hr />\n\n<h2 id=\"an-initial-basic-example\">An initial, basic example</h2>\n\n<p>For the purposes of this example, we&rsquo;ll use a simple application which asks the user to enter a valid date, in the format &ldquo;DD/MM/YYYY&rdquo;, and checks if this date is valid. This is the type of user interface that most people would come up with if they consulted the Racket GUI reference documentation.</p>\n\n<div class=\"figure\"><img src=\"/img/a020/einput-a.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The program is simple enough that it can be written with just a few lines of code:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">toplevel</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">frame%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Test Dialog\"</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">input</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">text-field%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Enter a <a href=\"http://docs.racket-lang.org/reference/time.html#(def._((lib._racket/private/base..rkt)._date))\" style=\"color: inherit\">date</a> \"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">button-callback</span> <span class=\"n\">b</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">text</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">input</span> <span class=\"n\">get-value</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"n\">string-&gt;date</span> <span class=\"n\">text</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">message-box</span> <span class=\"s2\">\"OK\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"Date is valid: ~a\"</span> <span class=\"n\">text</span><span class=\"p\">)</span> <span class=\"n\">toplevel</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"ss\">no-icon</span> <span class=\"ss\">ok</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"n\">message-box</span> <span class=\"s2\">\"Error\"</span> <span class=\"s2\">\"Invalid Date, expecting DD/MM/YYYY\"</span> <span class=\"n\">toplevel</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"ss\">stop</span> <span class=\"ss\">ok</span><span class=\"p\">)))))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">button%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Check\"</span><span class=\"p\">]</span>\n     <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]</span>\n     <span class=\"p\">[</span><span class=\"n\">font</span> <span class=\"n\">font</span><span class=\"p\">]</span>\n     <span class=\"p\">[</span><span class=\"n\">callback</span> <span class=\"n\">button-callback</span><span class=\"p\">])</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">toplevel</span> <span class=\"n\">show</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The program creates a <code>frame%</code> object, named <code>toplevel</code> which is the toplevel window, than adds two controls: a <code>text-field%</code> named <code>input</code> and a button named <code>check</code>. The callback, which is invoked when the button is pressed, will retrieve the contents of the input field, check if it is a valid date and display a message informing the user if the date is valid or not.</p>\n\n<p>To make the application complete, we need to implement our own <code>string-&gt;date</code> function which converts the string from the text input into a date, or returns <code>#f</code> if the string is not a valid date. This function will be used to validate the user input:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">racket/date</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">string-&gt;date</span> <span class=\"n\">str</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">([</span><span class=\"n\">t</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-trim))\" style=\"color: inherit\">string-trim</a></span> <span class=\"n\">str</span><span class=\"p\">)]</span>\n         <span class=\"p\">[</span><span class=\"n\">m</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/regexp.html#(def._((quote._~23~25kernel)._regexp-match))\" style=\"color: inherit\">regexp-match</a></span> <span class=\"s2\">\"^([0-9]+)/([0-9]+)/([0-9]+)$\"</span> <span class=\"n\">t</span><span class=\"p\">)])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">m</span>\n         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">day</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._string-~3enumber))\" style=\"color: inherit\">string-&gt;number</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">m</span> <span class=\"mi\">1</span><span class=\"p\">)))</span>\n               <span class=\"p\">(</span><span class=\"n\">month</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._string-~3enumber))\" style=\"color: inherit\">string-&gt;number</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">m</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>\n               <span class=\"p\">(</span><span class=\"n\">year</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._string-~3enumber))\" style=\"color: inherit\">string-&gt;number</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></span> <span class=\"n\">m</span> <span class=\"mi\">3</span><span class=\"p\">))))</span>\n           <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(form._((lib._racket/private/more-scheme..rkt)._with-handlers))\" style=\"color: inherit\">with-handlers</a></span> <span class=\"p\">(((</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"no\">#t</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"no\">#f</span><span class=\"p\">)))</span>\n             <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((lib._racket/date..rkt)._find-seconds))\" style=\"color: inherit\">find-seconds</a></span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">day</span> <span class=\"n\">month</span> <span class=\"n\">year</span><span class=\"p\">))))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>This program is not user friendly: while the input field accepts any text, the program will reject some inputs and only inform the user about the bad contents after a button is pressed. Plus, there is no hint in the dialog what the valid data format is, and adding this information to the form will just take up more space &mdash; this is not a big problem in a form with one input field, but most GUI forms have several inputs on them and there might not be enough room for such info to be displayed. We will look on how to address some of these usability problems in the sections below.</p>\n\n<h2 id=\"displaying-a-cue-text-when-the-input-field-is-empty\">Displaying a cue text when the input field is empty</h2>\n\n<p>As space on a GUI form is at a premium, it makes sense to provide some additional hints inside the input field itself when the field is empty. In the previous example program, the user is asked to enter a date, however it is not clear what date format to use, it could be &ldquo;DD/MM/YYYY&rdquo;, &ldquo;MM/DD/YYYY&rdquo; or any one of the many other formats; we can improve the user experience by displaying the cue text &ldquo;DD/MM/YYYY&rdquo; when the field is empty, to indicate the format the date is expected.</p>\n\n<div class=\"figure\"><img src=\"/img/a020/einput-b.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>To distinguish the cue text from the normal input field contents, the cue text will be displayed using a different color. The underlying <code>text%</code> object used by the <code>text-field%</code> field already supports text coloring by using <a href=\"http://docs.racket-lang.org/gui/style-delta_.html?q=style-delta%25\">style-delta%</a> objects &mdash; these objects encapsulate a &ldquo;change&rdquo; to the way a piece of text is rendered, and they are simpler to use than specifying every aspect of the rendering (font, size, alignment, etc). We will define two style delta objects that change the color of the text in the input field: a gray one for the cue text and a black one for the actual input contents:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cue-text-style</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">grey-text</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">style-delta%</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">grey-text</span> <span class=\"n\">set-delta-foreground</span> <span class=\"s2\">\"gray\"</span><span class=\"p\">)</span>\n    <span class=\"n\">grey-text</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">normal-text-style</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">black-text</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">style-delta%</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">black-text</span> <span class=\"n\">set-delta-foreground</span> <span class=\"s2\">\"black\"</span><span class=\"p\">)</span>\n    <span class=\"n\">black-text</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>For the cue text itself, we need to extend the <code>text-field%</code> to add a mechanism that inserts the cue text when the field is empty and removes it just before the user starts to type some text into the field. The entire class definition is shown below, and while it is somewhat long, it is relatively easy to understand. First, the underlying foundation parts:</p>\n\n<ul>\n <li>the class adds a <code>cue</code> init field, which will allow the user to specify what  the cue text will be.</li>\n <li>the <code>callback</code> init field is also intercepted, this is used by the  <code>text-field%</code> to inform the user that the contents of the field have changed  &mdash; we will override this callback to prevent the user from receiving  notifications about the cue text.</li>\n <li>a <code>showing-cue?</code> member variable is added, which will keep track of whether  the cue or the user input is shown in the field.</li>\n <li>for convenience, the <code>editor</code> variable holds a reference to the  <code>text-field</code> internal <code>text%</code> field.</li>\n <li>the <code>maybe-insert-cue</code> and <code>clear-cue</code> functions are responsible for  inserting the cue text or clearing it, and also changing the color of the  text for the cue.</li></ul>\n\n<p>To actually insert and remove the cue text at the right moments, we need to intercept a few methods and initialization steps:</p>\n\n<p>The <code>on-subwindow-char</code> is overridden to remove the cue text and maybe insert it back after each char is processed. Rather than trying to process each character and determine if it needs to insert or remove the cue, it is simpler to just remove it, let the parent class process the character and maybe re-insert it if the editor is still empty at the end. We cannot actually insert the cue text while the method is running, so the call to <code>maybe-insert-cue</code> is run using a <code>queue-callback</code> which will ensure that the call will be made in the toplevel event processing loop of the application. Note that the result of <code>on-subwindow-char</code> is important so we return it from our overridden method via <code>begin0</code>.</p>\n\n<p>The <code>text-field%</code> class has a <code>callback</code> field which can be used by the user to receive notifications each time the contents of the field changes. Since we don&rsquo;t want the user to receive notifications for inserting and removing the cue text, any user supplied callback is wrapped by <code>on-callback</code> and only invoked if the cue text is not showing.</p>\n\n<p>We also need to override the <code>set-value</code> and <code>get-value</code> methods to make sure that any values is not inserted over the cue text and the user cannot obtain the cue text as part of a <code>get-value</code> call. As with the <code>on-subwindow-char</code>, in <code>set-value</code> it is simpler to just clear the cue, let the parent class process the <code>set-value</code> call than maybe re-insert the cue text.</p>\n\n<p>Finally, inside the class there is a call to <code>maybe-insert-cue</code>, right at the end. This will run as part of the object initialization when a new <code>cue-text-field%</code> is created and will ensure that a cue will be inserted if the user does not pass a value for contents of the field at initialization time.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">cue-text-field%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">text-field%</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._init-field))\" style=\"color: inherit\">init-field</a></span> <span class=\"p\">[</span><span class=\"n\">cue</span> <span class=\"s2\">\"\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">callback</span> <span class=\"no\">#f</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span> <span class=\"p\">[</span><span class=\"n\">callback</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">c</span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"n\">on-callback</span> <span class=\"n\">c</span> <span class=\"n\">e</span><span class=\"p\">))])</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">showing-cue?</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">editor</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-editor</span><span class=\"p\">))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">maybe-insert-cue</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"n\">showing-cue?</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span> <span class=\"p\">(</span><span class=\"n\">text-empty?</span> <span class=\"n\">editor</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send*))\" style=\"color: inherit\">send*</a></span> <span class=\"n\">editor</span>\n          <span class=\"p\">(</span><span class=\"n\">change-style</span> <span class=\"n\">cue-text-style</span> <span class=\"o\">'</span><span class=\"ss\">start</span> <span class=\"o\">'</span><span class=\"ss\">end</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"n\">insert</span> <span class=\"n\">cue</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"n\">move-position</span> <span class=\"o\">'</span><span class=\"ss\">home</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">showing-cue?</span> <span class=\"no\">#t</span><span class=\"p\">)))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">clear-cue</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">showing-cue?</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send*))\" style=\"color: inherit\">send*</a></span> <span class=\"n\">editor</span>\n          <span class=\"p\">(</span><span class=\"n\">erase</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"n\">change-style</span> <span class=\"n\">normal-text-style</span> <span class=\"o\">'</span><span class=\"ss\">start</span> <span class=\"o\">'</span><span class=\"ss\">end</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">showing-cue?</span> <span class=\"no\">#f</span><span class=\"p\">)))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">on-subwindow-char</span> <span class=\"n\">receiver</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"n\">clear-cue</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin0))\" style=\"color: inherit\">begin0</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._super))\" style=\"color: inherit\">super</a></span> <span class=\"n\">on-subwindow-char</span> <span class=\"n\">receiver</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">queue-callback</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">()</span> <span class=\"p\">(</span><span class=\"n\">maybe-insert-cue</span><span class=\"p\">)))))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-callback</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">callback</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span> <span class=\"n\">showing-cue?</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"n\">callback</span> <span class=\"n\">control</span> <span class=\"n\">event</span><span class=\"p\">)))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">set-value</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"n\">clear-cue</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._super))\" style=\"color: inherit\">super</a></span> <span class=\"n\">set-value</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"n\">maybe-insert-cue</span><span class=\"p\">))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">get-value</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">showing-cue?</span> <span class=\"s2\">\"\"</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._super))\" style=\"color: inherit\">super</a></span> <span class=\"n\">get-value</span><span class=\"p\">)))</span>\n\n    <span class=\"p\">(</span><span class=\"n\">maybe-insert-cue</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>All that remains is to replace the input field in the initial application with a <code>cue-text-field%</code> and provide a cue text, and the cue text will be displayed. This is an improvement over the first example, but it still allows the user to enter an invalid date, so the validation code has to stay as before. The next section will look at how to improve this.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">input</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">cue-text-field%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Enter a <a href=\"http://docs.racket-lang.org/reference/time.html#(def._((lib._racket/private/base..rkt)._date))\" style=\"color: inherit\">date</a> \"</span><span class=\"p\">]</span>\n                   <span class=\"p\">[</span><span class=\"n\">cue</span> <span class=\"s2\">\"DD/MM/YYYY\"</span><span class=\"p\">]</span>\n                   <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"validating-the-contents-of-the-input-field\">Validating the contents of the input field</h2>\n\n<p>Another way to improve the user experience by providing data validation in the input field. While any value can be entered in the field, we can run a validation routine and flag invalid inputs, for example by changing the background of the field to red when values are invalid. We can also add some callbacks for the field so that other GUI elements (such as a &ldquo;Save&rdquo; button) are disabled when the contents of the field is invalid.</p>\n\n<div class=\"figure\"><img src=\"/img/a020/einput-c.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>We can write a new class to derive from <code>text-field%</code> which provides validation for the input. The class will make use of two functions: <code>string-&gt;data</code> converts the input field contents into some user data type (such as an integer representing the Unix time stamp, in our example program) and a <code>data-&gt;string</code> structure which converts a user defined data type into the text to be displayed in the field. The implementation also relies on the <code>string-&gt;data</code> function returning <code>#f</code> for invalid strings &mdash; this convention prevents us from using the validating field for boolean values, but <code>check-box%</code> controls are much better for that purpose anyway.</p>\n\n<p>The class definition is shown below, and as with the cue text class, it is relatively simple to understand:</p>\n\n<ul>\n <li>the <code>allow-empty?</code> init field allows specifying whether the empty fields are  valid or not &mdash; this is somewhat simpler to manage than requiring  <code>string-&gt;data</code> to handle empty values.</li>\n <li><code>good-bg</code> and <code>bad-bg</code> are colors to use for the &ldquo;good&rdquo; or valid background  and for the &ldquo;bad&rdquo; or invalid one, for the &ldquo;good&rdquo; background color we choose  the default background use by the <code>text-field%</code> via the  <code>get-field-background</code> method, for the &ldquo;bad&rdquo; background color we use a shade  of red.</li>\n <li>the <code>valid-value?</code> function checks if the value is valid &mdash; it checks for  empty strings first than calls the user supplied <code>string-&gt;data</code> function</li>\n <li>the <code>validate</code> function checks if the current contents of the field is valid  or not, and updates the background accordingly.</li></ul>\n\n<p>As with the cue text, we will need to intercept the <code>on-subwindow-char</code> method and perform the data validation. For convenience, the <code>set-value</code> method is also overridden to allow setting a user value instead of a string &mdash; this is converted by the <code>data-&gt;string</code> value. Finally, a <code>get-converted-value</code> value method is provided to return the validated contents of the field.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">validating-field%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">text-field%</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._init-field))\" style=\"color: inherit\">init-field</a></span> <span class=\"n\">string-&gt;data</span> <span class=\"n\">data-&gt;string</span> <span class=\"p\">[</span><span class=\"n\">allow-empty?</span> <span class=\"no\">#f</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._super-new))\" style=\"color: inherit\">super-new</a></span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">good-bg</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-field-background</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">bad-bg</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(def._((lib._racket/private/class-internal..rkt)._make-object))\" style=\"color: inherit\">make-object</a></span> <span class=\"n\">color%</span> <span class=\"mi\">255</span> <span class=\"mi\">120</span> <span class=\"mi\">124</span><span class=\"p\">))</span> <span class=\"c1\">; red</span>\n    \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">valid-value?</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">t</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-trim))\" style=\"color: inherit\">string-trim</a></span> <span class=\"n\">data</span><span class=\"p\">)])</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">allow-empty?</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span> <span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">))</span> <span class=\"p\">(</span><span class=\"n\">string-&gt;data</span> <span class=\"n\">t</span><span class=\"p\">))))</span>\n    \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">valid?</span> <span class=\"p\">(</span><span class=\"n\">valid-value?</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-value</span><span class=\"p\">))])</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">set-field-background</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">valid?</span> <span class=\"n\">good-bg</span> <span class=\"n\">bad-bg</span><span class=\"p\">))))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">on-subwindow-char</span> <span class=\"n\">receiver</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin0))\" style=\"color: inherit\">begin0</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._super))\" style=\"color: inherit\">super</a></span> <span class=\"n\">on-subwindow-char</span> <span class=\"n\">receiver</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">)))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">set-value</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._super))\" style=\"color: inherit\">super</a></span> <span class=\"n\">set-value</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string~3f))\" style=\"color: inherit\">string?</a></span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"n\">data-&gt;string</span> <span class=\"n\">v</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/public))\" style=\"color: inherit\">define/public</a></span> <span class=\"p\">(</span><span class=\"n\">get-converted-value</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">([</span><span class=\"n\">v</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/string..rkt)._string-trim))\" style=\"color: inherit\">string-trim</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-value</span><span class=\"p\">))])</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"n\">valid-value?</span> <span class=\"n\">v</span><span class=\"p\">)</span>\n             <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._empty))\" style=\"color: inherit\">empty</a></span> <span class=\"p\">(</span><span class=\"n\">string-&gt;data</span> <span class=\"n\">v</span><span class=\"p\">)))))</span>\n\n    <span class=\"p\">(</span><span class=\"n\">validate</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>All that remains is to replace the input field in the initial application with a <code>validating-field%</code> and provide the conversion functions. The background is now highlighted red when invalid values are entered, and the <code>get-converted-value</code> method can be used to check if the value is valid or not. The <code>validating-field%</code> class could be extended in several ways which would make it more useful:</p>\n\n<ul>\n <li>a callback which is called when the contents become valid or invalid &mdash; this  could be used for example to enable/disable a &ldquo;Save&rdquo; button in the form</li>\n <li>a callback which is invoked with the value whenever it changes &mdash; this could  be used to dynamically update a GUI form without having to click &ldquo;Save&rdquo;.</li></ul>\n\n<p>These tasks are left as an exercise for the interested reader :-)</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">;; NOTE: string-&gt;date already defined</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">date-&gt;string</span> <span class=\"n\">seconds</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((lib._racket/private/base..rkt)._date))\" style=\"color: inherit\">date</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((quote._~23~25kernel)._seconds-~3edate))\" style=\"color: inherit\">seconds-&gt;date</a></span> <span class=\"n\">seconds</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((quote._~23~25kernel)._date-day))\" style=\"color: inherit\">date-day</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((lib._racket/private/base..rkt)._date))\" style=\"color: inherit\">date</a></span><span class=\"p\">)</span> <span class=\"kd\">#:width</span> <span class=\"mi\">2</span> <span class=\"kd\">#:left-pad-string</span> <span class=\"s2\">\"0\"</span><span class=\"p\">)</span>\n   <span class=\"s2\">\"/\"</span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((quote._~23~25kernel)._date-month))\" style=\"color: inherit\">date-month</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((lib._racket/private/base..rkt)._date))\" style=\"color: inherit\">date</a></span><span class=\"p\">)</span> <span class=\"kd\">#:width</span> <span class=\"mi\">2</span> <span class=\"kd\">#:left-pad-string</span> <span class=\"s2\">\"0\"</span><span class=\"p\">)</span>\n   <span class=\"s2\">\"/\"</span>\n   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((quote._~23~25kernel)._date-year))\" style=\"color: inherit\">date-year</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/time.html#(def._((lib._racket/private/base..rkt)._date))\" style=\"color: inherit\">date</a></span><span class=\"p\">)</span> <span class=\"kd\">#:width</span> <span class=\"mi\">4</span> <span class=\"kd\">#:left-pad-string</span> <span class=\"s2\">\"0\"</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">input</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">validating-field%</span>\n                   <span class=\"p\">[</span><span class=\"n\">string-&gt;data</span> <span class=\"n\">string-&gt;date</span><span class=\"p\">]</span>\n                   <span class=\"p\">[</span><span class=\"n\">data-&gt;string</span> <span class=\"n\">date-&gt;string</span><span class=\"p\">]</span>\n                   <span class=\"p\">[</span><span class=\"n\">allow-empty?</span> <span class=\"no\">#t</span><span class=\"p\">]</span>\n                   <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Enter a <a href=\"http://docs.racket-lang.org/reference/time.html#(def._((lib._racket/private/base..rkt)._date))\" style=\"color: inherit\">date</a> \"</span><span class=\"p\">]</span>\n                   <span class=\"p\">[</span><span class=\"n\">font</span> <span class=\"n\">font</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"combining-the-cue-text-and-validation-using-mixins\">Combining the cue text and validation using mixins</h2>\n\n<p>We have constructed two classes, <code>cue-text-field%</code> and <code>validating-field%</code>, both of them providing useful extensions to <code>text-field%</code>, however they cannot be used together, since both derive from <code>text-field%</code> directly. The two obvious solutions to this problem would be:</p>\n\n<ul>\n <li>combining the two classes into an <code>enhanced-input-field%</code> and implement both  pieces of functionality in one place</li>\n <li>either deriving <code>validating-field%</code> from <code>cue-text-field%</code> or vice versa so  we have the combined functionality.</li></ul>\n\n<p>In Racket, there is a third option: to use &ldquo;mixins&rdquo;. You can read about them in the <a href=\"http://docs.racket-lang.org/guide/classes.html?q=mixins#%28part._.Mixins%29\">Racket documentation</a>, but a simple explanation may be sufficient. The basic idea behind them is that, in Racket, a class, such as <code>text-field%</code> is also a value which can be passed as an argument to a function. This allows us to write a function which takes a class as a parameter and returns a new class which is derived from the first one. The mixin concept is not strictly necessary, but can express some ideas more elegantly, in particular, the &ldquo;cue text&rdquo; and &ldquo;data validation&rdquo; concepts are implemented as mixins on the <code>text-field%</code> field and this allows us to easily create an input field class that has only a cue text, only data validation, or both.</p>\n\n<div class=\"figure\"><img src=\"/img/a020/einput-d.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>In our case, we can define the <code>cue-text-field%</code> and <code>validating-field%</code> as mixin functions, taking a base class as a parameter and returning a new class implementing the respective functionality:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">cue-mixin</span> <span class=\"n\">default-cue</span> <span class=\"n\">base-class</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/objectutils.html#(def._((lib._racket/private/class-internal..rkt)._subclass~3f))\" style=\"color: inherit\">subclass?</a></span> <span class=\"n\">base-class</span> <span class=\"n\">text-field%</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(def._((quote._~23~25kernel)._error))\" style=\"color: inherit\">error</a></span> <span class=\"s2\">\"cue-mixin: parent is <a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a> derived from text-field%\"</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">base-class</span>\n    <span class=\"c1\">;; cue-text-field% class implementation here</span>\n    <span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">validating-mixin</span> <span class=\"n\">string-&gt;data</span> <span class=\"n\">data-&gt;string</span> <span class=\"n\">base-class</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/objectutils.html#(def._((lib._racket/private/class-internal..rkt)._subclass~3f))\" style=\"color: inherit\">subclass?</a></span> <span class=\"n\">base-class</span> <span class=\"n\">text-field%</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(def._((quote._~23~25kernel)._error))\" style=\"color: inherit\">error</a></span> <span class=\"s2\">\"validating-mixin: parent is <a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a> derived from text-field%\"</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">base-class</span>\n    <span class=\"c1\">;; validating-field% class implementation here</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The above functions allows us to define the cue and validation functionality and at the same time leaving the base class unspecified. A &ldquo;date input field&rdquo; can than be constructed and used in the application:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">date-input-field%</span>\n  <span class=\"p\">(</span><span class=\"n\">validating-mixin</span> <span class=\"n\">string-&gt;date</span> <span class=\"n\">date-&gt;string</span> <span class=\"p\">(</span><span class=\"n\">cue-mixin</span> <span class=\"s2\">\"DD/MM/YYYY\"</span> <span class=\"n\">text-field%</span><span class=\"p\">)))</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">input</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">date-input-field%</span>\n                   <span class=\"p\">[</span><span class=\"n\">allow-empty?</span> <span class=\"no\">#t</span><span class=\"p\">]</span>\n                   <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Enter a <a href=\"http://docs.racket-lang.org/reference/time.html#(def._((lib._racket/private/base..rkt)._date))\" style=\"color: inherit\">date</a> \"</span><span class=\"p\">]</span>\n                   <span class=\"p\">[</span><span class=\"n\">font</span> <span class=\"n\">font</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>These mixins allows for more flexible definition of various fields. For example, a field which only allows numbers can be defined easily, as <code>string-&gt;number</code> and <code>number-&gt;string</code> are already available in Racket:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">number-input-field%</span>\n  <span class=\"p\">(</span><span class=\"n\">validating-mixin</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._string-~3enumber))\" style=\"color: inherit\">string-&gt;number</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._number-~3estring))\" style=\"color: inherit\">number-&gt;string</a></span> <span class=\"p\">(</span><span class=\"n\">cue-mixin</span> <span class=\"s2\">\"number\"</span> <span class=\"n\">text-field%</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>The racket GUI controls are designed to be extended, and many interesting and useful features can be added to them this way, as shown in this article. These features are not available by default, but it is not a big effort to add them: the code to implement all these features is just above 100 lines of code. While it takes more effort (and some advanced knowledge of the Racket GUI libraries), it does provide considerable flexibility.</p>\n\n<p>You can find the complete example for the last program from this article in this <a href=\"https://gist.github.com/alex-hhh/090914500bc25ef2963024ebc366ff35\">GitHub Gist</a></p>") (u . "/img/a020/thumb.png")) ((? . 20) f post (u . "Quantifying Fatigue") (? . 20) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2017/11/quantifying-fatigue.html" . windows) (u . "/2017/11/quantifying-fatigue.html") (u . "2017-11-25T09:07:30") (? . 3) (? . 21) (c (u . "training data analysis")) (u . "\n<p>I needed a way to measure fatigue as it accumulates during a running session. There is no actual &ldquo;fatigue&rdquo; measurement that I&rsquo;m aware of, so I had to find a substitute.</p>") #t (u . "\n<p>I needed a way to measure fatigue as it accumulates during a running session. There is no actual &ldquo;fatigue&rdquo; measurement that I&rsquo;m aware of, so I had to find a substitute.</p>\n<!-- more-->\n\n<p>Intuitively, the longer one runs, the more tired he will become, but using time as a proxy for fatigue does not take into account that one hour of easy running does not produce the same fatigue as one hour of hard interval training. Instead, I decided to use the number of heart beats from the start of the session as a proxy for fatigue: the more heart beats are accumulated, the more tired you are. Since heart rate can never go negative, the heart beats value is always growing. Heart beats also accounts for the intensity of the effort, meaning that more of them are accumulated in the same amount of time during hard interval training versus an easy run.</p>\n\n<p>To show an example, below are two runs of approximately the same duration (1 hour 20 minutes), one easy run and one hard interval run:</p>\n\n<div class=\"figure\"><img src=\"/img/a004/hr-comparison.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The heart beats value accumulate at different rates for the two runs, as shown below:</p>\n\n<div class=\"figure\"><img src=\"/img/a004/hb-comparison.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>To make it easier to work with &ldquo;fatigue&rdquo; values, I decided to &ldquo;split&rdquo; the heartbeat values into ranges. I decided to split fatigue levels at 30 minute sections at 160 BPM heart rate. Why 160 BPM? For me, this is the top of &ldquo;Zone 2&rdquo;, that is the top of &ldquo;easy running&rdquo; zone. Why 30 minutes? Again, for me, I can run 30 minutes at an easy pace with no perceived fatigue at all.</p>\n\n<p>The table below summarizes the fatigue values and the heartbeat ranges for each of them. I have also added a &ldquo;Data Points&rdquo; column representing the number of data points at each fatigue value for my 2017 Marathon training season. Most of the data points are in the &ldquo;none&rdquo; fatigue level, and the least of the points are in the &ldquo;severe&rdquo; fatigue level. This is expected, since it takes more than 2 hours of easy running to get to severe fatigue, and most of my runs were less than that.</p>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td style=\"text-align: center\">Fatigue Level</td>\n    <td>Description</td>\n    <td>Time @160 BPM</td>\n    <td>Heart Beats</td>\n    <td style=\"text-align: right\">Data Points</td></tr></thead>\n  <tbody>\n   <tr>\n    <td style=\"text-align: center\">1</td>\n    <td>none</td>\n    <td>0 &ndash; 30 minutes</td>\n    <td>0 &ndash; 4800</td>\n    <td style=\"text-align: right\">179182</td></tr>\n   <tr>\n    <td style=\"text-align: center\">2</td>\n    <td>mild</td>\n    <td>30 &ndash; 60 minutes</td>\n    <td>4801 &ndash; 9600</td>\n    <td style=\"text-align: right\">139689</td></tr>\n   <tr>\n    <td style=\"text-align: center\">3</td>\n    <td>moderate</td>\n    <td>60 &ndash; 90 minutes</td>\n    <td>9601 &ndash; 14400</td>\n    <td style=\"text-align: right\">72519</td></tr>\n   <tr>\n    <td style=\"text-align: center\">4</td>\n    <td>heavy</td>\n    <td>90 &ndash; 120 minutes</td>\n    <td>14401 &ndash; 19200</td>\n    <td style=\"text-align: right\">31306</td></tr>\n   <tr>\n    <td style=\"text-align: center\">5</td>\n    <td>severe</td>\n    <td>above 120 minutes</td>\n    <td>above 19200</td>\n    <td style=\"text-align: right\">15384</td></tr></tbody></table></div>\n\n<h2 id=\"technicalities\">Technicalities</h2>\n\n<p>The function shown below will add the heart beats series to a session, which in <a href=\"https://github.com/alex-hhh/ActivityLog2\">ActivityLog2</a> is represented as a <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/doc/data-frame.md\">data-frame%</a> object. The series that already exist for a session, such as &ldquo;elapsed&rdquo; and &ldquo;hr&rdquo;, are documented <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/doc/session-df.md\">here</a>:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">add-heartbeats-series</span> <span class=\"n\">df</span><span class=\"p\">)</span>\n\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">hb</span> <span class=\"mi\">0</span><span class=\"p\">)</span>                         <span class=\"c1\">; holds accumulated heart beats</span>\n\n  <span class=\"c1\">;; Called by the `data-frame%/map` method with two adjacent data points,</span>\n  <span class=\"c1\">;; PREV and NEXT. The value returned by this function will be the data point</span>\n  <span class=\"c1\">;; in the new series at the same index as NEXT</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">accumulate-heart-beats</span> <span class=\"n\">prev</span> <span class=\"n\">next</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">prev</span>                          <span class=\"c1\">; first time PREV is #f</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/match.html#(form._((lib._racket/match..rkt)._match-let))\" style=\"color: inherit\">match-let</a></span> <span class=\"p\">(((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">e1</span> <span class=\"n\">hr1</span><span class=\"p\">)</span> <span class=\"n\">prev</span><span class=\"p\">)</span>\n                  <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">e2</span> <span class=\"n\">hr2</span><span class=\"p\">)</span> <span class=\"n\">next</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">e1</span> <span class=\"n\">hr1</span> <span class=\"n\">e2</span> <span class=\"n\">hr2</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">beats</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mf\">0.5</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">hr1</span> <span class=\"n\">hr2</span><span class=\"p\">))</span> <span class=\"mf\">60.0</span><span class=\"p\">)))</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">hb</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">hb</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">beats</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._-))\" style=\"color: inherit\">-</a></span> <span class=\"n\">e2</span> <span class=\"n\">e1</span><span class=\"p\">))))))))</span>\n    \n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-truncate))\" style=\"color: inherit\">exact-truncate</a></span> <span class=\"n\">hb</span><span class=\"p\">))</span>\n  \n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._unless))\" style=\"color: inherit\">unless</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">df</span> <span class=\"n\">contains?</span> <span class=\"s2\">\"hb\"</span><span class=\"p\">)</span>  <span class=\"c1\">; might already be present due to caching!</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">df</span> <span class=\"n\">add-derived-series</span>\n          <span class=\"s2\">\"hb\"</span>                          <span class=\"c1\">; new series name</span>\n          <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"elapsed\"</span> <span class=\"s2\">\"hr\"</span><span class=\"p\">)</span>             <span class=\"c1\">; based on these series</span>\n          <span class=\"n\">accumulate-heart-beats</span>        <span class=\"c1\">; generator function for the new series</span>\n          <span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The functions below, are used to convert a heartbeats value into a &ldquo;fatigue&rdquo; value, which is a number between 1 and 5:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">heartbeats-&gt;fatigue</span> <span class=\"n\">hb</span><span class=\"p\">)</span>\n  <span class=\"c1\">;; 30 min @ 160bpm (z2 lower limit) increments, max out at 5.</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-truncate))\" style=\"color: inherit\">exact-truncate</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._min))\" style=\"color: inherit\">min</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"mi\">1</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">hb</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"mi\">30</span> <span class=\"mi\">160</span><span class=\"p\">)))</span> <span class=\"mf\">5.0</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">fatigue-name</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span> <span class=\"n\">f</span> <span class=\"mf\">1.0</span><span class=\"p\">)</span> <span class=\"s2\">\"no fatigue\"</span><span class=\"p\">)</span>\n        <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span> <span class=\"n\">f</span> <span class=\"mf\">2.0</span><span class=\"p\">)</span> <span class=\"s2\">\"mild fatigue\"</span><span class=\"p\">)</span>\n        <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span> <span class=\"n\">f</span> <span class=\"mf\">3.0</span><span class=\"p\">)</span> <span class=\"s2\">\"moderate fatigue\"</span><span class=\"p\">)</span>\n        <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c~3d))\" style=\"color: inherit\">&lt;=</a></span> <span class=\"n\">f</span> <span class=\"mf\">4.0</span><span class=\"p\">)</span> <span class=\"s2\">\"heavy fatigue\"</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"no\">#t</span> <span class=\"s2\">\"severe fatigue\"</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The source code for generating the plots on this page is available <a href=\"https://gist.github.com/alex-hhh/204be1d29e518689c9621ec9cdb5f4f2\">here</a>.</p>") (u . "/img/a004/thumb.png")) ((? . 10) f post (u . "A Racket GUI Widget to display maps based on OpenStreetMap tiles") (? . 10) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/06/racket-map-widget.html" . windows) (u . "/2018/06/racket-map-widget.html") (u . "2018-06-12T17:06:17") (? . 9) (? . 2) (c (u . "racket")) (u . "\n<p>This is a Racket GUI Widget which can display maps based on Open Street Map tiles &mdash; it allows embedding maps in Racket GUI applications. I originally wrote this code as part of the ActivityLog2 project and, since I wanted to use it in other projects, I decided to move it onto a separate package and publish it to the Racket package server.</p>") #t (u . "\n<p>This is a Racket GUI Widget which can display maps based on Open Street Map tiles &mdash; it allows embedding maps in Racket GUI applications. I originally wrote this code as part of the ActivityLog2 project and, since I wanted to use it in other projects, I decided to move it onto a separate package and publish it to the Racket package server.</p>\n<!-- more-->\n\n<p>The map-widget is available as a Racket <a href=\"https://pkgs.racket-lang.org/package/map-widget\">package</a> and can be installed using <code>raco pkg install map-widget</code>, alternatively, the source is stored <a href=\"https://github.com/alex-hhh/map-widget\">here</a>.</p>\n\n<div class=\"figure\"><img src=\"/img/a015/map-widget.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"using-the-map-widget\">Using the map widget</h2>\n\n<p>The widget can be created, like any other widget from the Racket GUI library, by specifying a parent widget. In this case, the parent widget is a top-level <code>frame%</code> object, but it can be any type of container widget like a <code>panel%</code>, for example. The code below will display the map in a new window and the map can be panned around by clicking and dragging the mouse and the map can be zoomed in and out using the mouse wheel. The first time the code runs, the map tiles will be downloaded from the tile servers and it will take some time for the map to load, but tiles are cached locally and the map will display faster on subsequent runs.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">racket/gui</span> <span class=\"n\">map-widget</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">toplevel</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">frame%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Map Demo\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">width</span> <span class=\"mi\">600</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">height</span> <span class=\"mi\">400</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">map-widget%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">toplevel</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">toplevel</span> <span class=\"n\">show</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>A <strong>GPS Track</strong> can be overlapped on top of the map using the <code>add-track</code> method. A GPS track is simply a sequence (list or vector) of track points, where each track point is a vector with the first element being the latitude and the second element the longitude. The track point vector can have additional elements &mdash; this can be useful to record elevation and other data in the same entry.</p>\n\n<p>Once the track is loaded, it might not be inside the visible part of the map, the <code>center-map</code> method can be used to move the map to the newly added track:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">track-points</span> <span class=\"p\">(</span><span class=\"n\">gpx-load</span> <span class=\"s2\">\"tarn-shelf.gpx\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"n\">add-track</span> <span class=\"n\">track-points</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"n\">center-map</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><strong>Position markers</strong> can be added to the map using the <code>add-marker</code> method. In the example below, markers are added for every mile on the track:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">total-distance</span> <span class=\"p\">(</span><span class=\"n\">gpx-total-distance</span> <span class=\"n\">track-points</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">color</span> <span class=\"p\">(</span><span class=\"n\">make-color</span> <span class=\"mi\">0</span> <span class=\"mi\">135</span> <span class=\"mi\">36</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"n\">loop</span> <span class=\"p\">((</span><span class=\"n\">mile</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">mile</span> <span class=\"mi\">1609</span><span class=\"p\">)</span> <span class=\"n\">total-distance</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"n\">gpx-lookup-position</span> <span class=\"n\">track-points</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">mile</span> <span class=\"mi\">1609</span><span class=\"p\">))))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"n\">add-marker</span> <span class=\"n\">p</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._zero~3f))\" style=\"color: inherit\">zero?</a></span> <span class=\"n\">mile</span><span class=\"p\">)</span> <span class=\"s2\">\"Start\"</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"Mile ~a\"</span> <span class=\"n\">mile</span><span class=\"p\">))</span> <span class=\"mi\">1</span> <span class=\"n\">color</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">mile</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Finally, the map widget has the concept of a <strong>current location</strong> &mdash; this is a position marked with a circle and can be set using the <code>set-current-location</code> method. In addition, the map widget can automatically move the map so that the current location is always visible, this is done using the <code>set-track-current-location</code> method.</p>\n\n<p>In the example below, an elevation plot is displayed. The plot will display the current elevation under the cursor as well as the position on the map where this elevation point is located. For this code to work, the yet unreleased plot library is needed (see <a href=\"/2018/03/interactive-overlays-with-the-racket-plot-package-update.html\">this blog post</a> for more details):</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"c1\">;; Tell the map widget to move the map so that the current location is always</span>\n<span class=\"c1\">;; visible.</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"n\">set-track-current-location</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n  \n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">plot-callback</span> <span class=\"n\">snip</span> <span class=\"n\">event</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-event-type</span><span class=\"p\">)</span> <span class=\"o\">'</span><span class=\"ss\">motion</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">elevation</span> <span class=\"p\">(</span><span class=\"n\">gpx-lookup-elevation</span> <span class=\"n\">track-points</span> <span class=\"n\">x</span><span class=\"p\">))</span>\n          <span class=\"p\">(</span><span class=\"n\">position</span> <span class=\"p\">(</span><span class=\"n\">gpx-lookup-position</span> <span class=\"n\">track-points</span> <span class=\"n\">x</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">overlays</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list))\" style=\"color: inherit\">list</a></span> <span class=\"p\">(</span><span class=\"n\">vrule</span> <span class=\"n\">x</span> <span class=\"kd\">#:style</span> <span class=\"o\">'</span><span class=\"ss\">long-dash</span><span class=\"p\">)</span>\n              <span class=\"p\">(</span><span class=\"n\">point-label</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"~a miles, height: <a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a> meters\"</span>\n                                   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">x</span> <span class=\"mi\">1609</span><span class=\"p\">)</span> <span class=\"kd\">#:precision</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n                                   <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></span> <span class=\"n\">elevation</span> <span class=\"kd\">#:precision</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n                           <span class=\"kd\">#:anchor</span> <span class=\"o\">'</span><span class=\"ss\">auto</span><span class=\"p\">)))</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-overlay-renderers</span> <span class=\"n\">overlays</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"n\">set-current-location</span> <span class=\"n\">position</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/begin.html#(form._((quote._~23~25kernel)._begin))\" style=\"color: inherit\">begin</a></span>\n      <span class=\"c1\">;; Mouse left the plot area, clear the renderers and the current</span>\n      <span class=\"c1\">;; location</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-overlay-renderers</span> <span class=\"o\">'</span><span class=\"p\">())</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></span> <span class=\"n\">set-current-location</span> <span class=\"no\">#f</span><span class=\"p\">))))</span>\n\n<span class=\"c1\">;; Data for the elevation plot.</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">elevation</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">p</span> <span class=\"n\">track-points</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/match.html#(form._((lib._racket/match..rkt)._match-define))\" style=\"color: inherit\">match-define</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">lat</span> <span class=\"n\">lon</span> <span class=\"n\">dst</span> <span class=\"n\">ele</span> <span class=\"n\">ts</span><span class=\"p\">)</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></span> <span class=\"n\">dst</span> <span class=\"n\">ele</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">make-snip</span> <span class=\"n\">width</span> <span class=\"n\">height</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/parameters.html#(form._((lib._racket/private/more-scheme..rkt)._parameterize))\" style=\"color: inherit\">parameterize</a></span> <span class=\"p\">([</span><span class=\"n\">plot-x-label</span> <span class=\"s2\">\"Distance (miles)\"</span><span class=\"p\">]</span>\n                 <span class=\"p\">[</span><span class=\"n\">plot-y-label</span> <span class=\"s2\">\"Elevation (meters)\"</span><span class=\"p\">]</span>\n                 <span class=\"p\">[</span><span class=\"n\">plot-x-ticks</span>\n                  <span class=\"p\">(</span><span class=\"n\">ticks</span> <span class=\"p\">(</span><span class=\"n\">linear-ticks-layout</span><span class=\"p\">)</span>\n                         <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._min))\" style=\"color: inherit\">min</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._max))\" style=\"color: inherit\">max</a></span> <span class=\"n\">pre-ticks</span><span class=\"p\">)</span>\n                           <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></span> <span class=\"p\">([</span><span class=\"n\">pt</span> <span class=\"n\">pre-ticks</span><span class=\"p\">])</span>\n                             <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7ea))\" style=\"color: inherit\">~a</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-truncate))\" style=\"color: inherit\">exact-truncate</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"p\">(</span><span class=\"n\">pre-tick-value</span> <span class=\"n\">pt</span><span class=\"p\">)</span> <span class=\"mi\">1609</span><span class=\"p\">))))))])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">snip</span> <span class=\"p\">(</span><span class=\"n\">plot-snip</span> <span class=\"p\">(</span><span class=\"n\">lines</span> <span class=\"n\">elevation</span><span class=\"p\">)</span> <span class=\"kd\">#:width</span> <span class=\"n\">width</span> <span class=\"kd\">#:height</span> <span class=\"n\">height</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-mouse-event-callback</span> <span class=\"n\">plot-callback</span><span class=\"p\">)</span>\n    <span class=\"n\">snip</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">plot-frame</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">frame%</span> <span class=\"p\">[</span><span class=\"n\">label</span> <span class=\"s2\">\"Elevation Plot\"</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">width</span> <span class=\"mi\">600</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">height</span> <span class=\"mi\">300</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">canvas</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">snip-canvas%</span> <span class=\"p\">[</span><span class=\"n\">parent</span> <span class=\"n\">plot-frame</span><span class=\"p\">]</span> <span class=\"p\">[</span><span class=\"n\">make-snip</span> <span class=\"n\">make-snip</span><span class=\"p\">]))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">plot-frame</span> <span class=\"n\">show</span> <span class=\"no\">#t</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The final result can be seen in this video:</p>\n\n<div style=\"text-align:center\">\n <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/--wfpzGKa90\" frameborder=\"0\" allow=\"autoplay; encrypted-media\" allowfullscreen=\"allowfullscreen\"></iframe></div>\n\n<h2 id=\"loading-and-using-gpx-files\">Loading and using GPX files</h2>\n\n<p>When experimenting with the map widget it is useful to have some GPS data. The map widget works directly with sequences of LAT/LONG data points, however it is more convenient to be able to load GPS tracks from files. To facilitate the examples presented here, I wrote a small library to read data from <a href=\"https://en.wikipedia.org/wiki/GPS_Exchange_Format\">GPX</a> files. This is not meant to be a complete GPX file reader, but only to support the examples presented here. The library provides the following functions:</p>\n\n<ul>\n <li><code>gpx-load</code> &mdash; loads data from a GPX file. It returns a vector of track  points, each track point being a 5 element vector: latitude, longitude,  current distance, elevation and timestamp</li>\n <li><code>gpx-lookup-position</code> &mdash; returns the position (latitude/longitude) of the  point at a specified distance from the start of the track. The position is  interpolated between two points available in the track data.</li>\n <li><code>gpx-lookup-elevation</code> &mdash; returns the elevation of a point at a specified  distance from the start of the track. This elevation is interpolated  between two points available on the track data.</li>\n <li><code>gpx-total-distance</code> &mdash; returns the total distance (length of the track)</li></ul>\n\n<p>The GPX library is available <a href=\"https://gist.github.com/alex-hhh/c79921a975088f4a4d10116fcf19c34d\">in this GitHub gist</a> (it is just a single file), and the entire demo code is available <a href=\"https://gist.github.com/alex-hhh/c79921a975088f4a4d10116fcf19c34d\">in this other gist</a>. The GPX file used in the example can be downloaded from <a href=\"https://drive.google.com/open?id=1zYFtEGdT4nw8yG4Db7xHqkqo38v9Y_e5\">Google Drive</a>.</p>\n<!-- link definitions-->") (u . "/img/a015/thumb.png")) ((? . 22) f post (u . "An Overview of Common Racket Data Structures") (? . 22) 1550143227 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2019/02/racket-data-structures.html" . windows) (u . "/2019/02/racket-data-structures.html") (u . "2019-02-14T16:42:38") (? . 14) (? . 23) (c (u . "racket")) (u . "\n<p>The Racket language provides a variety of ready-to-use data structures and containers, however each such container has advantages and disadvantages when it comes to performance. The &ldquo;everything is a list&rdquo; approach makes things simple when you are learning Racket, but if you start using it for more complex programs, you need to be aware that lists are not always the best data structure to use. This guide looks at a few alternatives.</p>") #t (u . "\n<p>The Racket language provides a variety of ready-to-use data structures and containers, however each such container has advantages and disadvantages when it comes to performance. The &ldquo;everything is a list&rdquo; approach makes things simple when you are learning Racket, but if you start using it for more complex programs, you need to be aware that lists are not always the best data structure to use. This guide looks at a few alternatives.</p>\n<!-- more-->\n\n<p>There are many data structures available in Racket, but this guide looks at only three of them: lists, vectors and hash-tables. These are readily available with every Racket installation, are versatile and, used carefully, have good performance characteristics.</p>\n\n<h2 id=\"lists\">Lists</h2>\n\n<p>Lists are perhaps the most popular data structure used in Racket programs plus Lisp and Scheme too. If you learned Scheme from classics such as <a href=\"https://www.htdp.org/\">HTDP</a> or <a href=\"https://mitpress.mit.edu/sites/default/files/sicp/index.html\">SICP</a>, you have seen them used a lot. The Racket documentation provides an <a href=\"http://docs.racket-lang.org/guide/Lists__Iteration__and_Recursion.html\">overview</a>, there is also an <a href=\"http://docs.racket-lang.org/guide/Pairs__Lists__and_Racket_Syntax.html\">overview on cons and pairs</a>, plus <a href=\"http://docs.racket-lang.org/reference/pairs.htm\">reference</a> documentation for them. Lists are a very flexible data structure, and Racket has lots of functions that manipulate them: you can construct, search and reference elements in a variety of ways and for this reason you will find lists used in most example programs.</p>\n\n<p>Not all operations on lists are efficient, and using lists containing a lot of elements can quickly result in performance issues. If the size of the dataset is more than a few hundred items, you need to be aware of the following performance considerations.</p>\n\n<p><strong>Constructing lists</strong> is only efficient when it is done by adding an element to the front of the list, using <code><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></code>. If you need to construct a list by adding an element to the end of the list, it will be more efficient to construct the list in reverse first, using <code><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></code>, than reverse the list at the end. The example below constructs a list of 10 integers by accumulating the result in reverse, than reverting the result at the end to produce the final list.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">my-list</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"n\">loop</span> <span class=\"p\">([</span><span class=\"n\">accumulator</span> <span class=\"o\">'</span><span class=\"p\">()]</span>\n             <span class=\"p\">[</span><span class=\"n\">index</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3c))\" style=\"color: inherit\">&lt;</a></span> <span class=\"n\">index</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">index</span> <span class=\"n\">accumulator</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">index</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._reverse))\" style=\"color: inherit\">reverse</a></span> <span class=\"n\">accumulator</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The above pattern might be difficult to read and understand and use for complex scenarios, so consider using <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></code> or <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for*/list))\" style=\"color: inherit\">for*/list</a></code> to construct lists by iteration.</p>\n\n<p><strong>Iterating over all the elements in a list</strong>, using <code><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></code> or <code><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._for-each))\" style=\"color: inherit\">for-each</a></code> is usually efficient, however if you need to traverse a lot of large collections, a <code>vector</code> might be a better alternative. When using <a href=\"https://docs.racket-lang.org/reference/for.html\">iterations and comprehensions</a>, like <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></code> or <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/list))\" style=\"color: inherit\">for/list</a></code> to iterate over lists, consider using an <code><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-list))\" style=\"color: inherit\">in-list</a></code> sequence, as this is significantly more efficient, than just passing the list itself to the <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></code> construct. For example, use:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">element</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-list))\" style=\"color: inherit\">in-list</a></span> <span class=\"n\">my-list</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"n\">prinf</span> <span class=\"s2\">\"~a~%\"</span> <span class=\"n\">element</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><strong>Searching for an element in a list</strong> using <code><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/base..rkt)._member))\" style=\"color: inherit\">member</a></code>, <code><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._findf))\" style=\"color: inherit\">findf</a></code> and related functions takes a linear time and this can become a problem for large lists. If you need to do a lot of lookups, consider using a <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash))\" style=\"color: inherit\">hash</a></code> or <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-set))\" style=\"color: inherit\">hash-set</a></code> instead.</p>\n\n<p><strong>Referencing an element by its position</strong>, using <code><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._list-ref))\" style=\"color: inherit\">list-ref</a></code> takes a linear time and will become slower as the referenced element is further down the list. If you need to reference elements by their position, consider using a <code><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></code>.</p>\n\n<p><strong>Inserting, updating, deleting elements and appending lists</strong> are inefficient for large lists. In Racket, lists are immutable, which means that whenever you insert, delete an element from a list, an entire new list is constructed and returned and for large lists, this is very inefficient. Appending a list to another also has to create a new list, making it an inefficient operation. If you need to insert, update or delete elements in a container, consider using a <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash))\" style=\"color: inherit\">hash</a></code> or a <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-set))\" style=\"color: inherit\">hash-set</a></code> instead. A <code><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._vector))\" style=\"color: inherit\">vector</a></code> is also efficient at updating elements.</p>\n\n<h2 id=\"vectors\">Vectors</h2>\n\n<p><a href=\"http://docs.racket-lang.org/guide/vectors.html\">vectors</a> are fixed length arrays of arbitrary values and element access and update is done in a constant time. They are a versatile and efficient; in languages such a Python and C++, vectors are probably the most used container. Note that what Python calls &ldquo;lists&rdquo; are really implemented as vectors &mdash; this can be confusing if you just start out with Racket, as Python &ldquo;lists&rdquo; have different performance characteristics (they are really vectors).</p>\n\n<p>The <a href=\"http://docs.racket-lang.org/reference/vectors.html\">reference</a> documentation lists all the functions available on vectors and these are similar to the functions that operate on lists (for example the equivalent of <code><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/map..rkt)._map))\" style=\"color: inherit\">map</a></code> function for vectors is <code><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((lib._racket/vector..rkt)._vector-map))\" style=\"color: inherit\">vector-map</a></code>). In Racket, vectors can be either <strong>mutable</strong> or <strong>immutable</strong> &mdash; immutable vectors cannot have their elements changed after they are created.</p>\n\n<p>Just as with lists, some operations are provided for convenience, but they are not very efficient and you need to be aware of these.</p>\n\n<p><strong>Constructing vectors</strong> requires the size to be known in advance, and this size cannot be changed after a vector is constructed, although, Racket also provides a <code>gvector</code> which can grow. To construct a vector, you can use one of the following:</p>\n\n<ul>\n <li>\n  <p><code><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((quote._~23~25kernel)._make-vector))\" style=\"color: inherit\">make-vector</a></code> to construct a vector where all elements have the same  value</p></li>\n <li>\n  <p><code><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((lib._racket/private/list..rkt)._build-vector))\" style=\"color: inherit\">build-vector</a></code> to construct a vector with elements provided by a  user supplied function</p></li>\n <li>\n  <p>the <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/vector))\" style=\"color: inherit\">for/vector</a></code> form will construct by iterating over some  sequences. In general, this form is convenient if you need to construct a  vector without knowing the final number of elements, but it will be  inefficient. However, the form has a <code>#:length</code> keyword which can be used  to provide the length, making the construction efficient.</p></li></ul>\n\n<p><strong>Iterating over all the elements in a vector</strong> can be done using <a href=\"https://docs.racket-lang.org/reference/for.html\">iterations and comprehensions</a>, like <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></code>, however, when doing so, consider using an <code><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-vector))\" style=\"color: inherit\">in-vector</a></code> sequence, as this is significantly more efficient, than just passing the vector itself to the <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></code> construct. For example, use:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">my-vector</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((lib._racket/private/list..rkt)._build-vector))\" style=\"color: inherit\">build-vector</a></span> <span class=\"mi\">10</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/lambda.html#(form._((lib._racket/private/base..rkt)._lambda))\" style=\"color: inherit\">lambda</a></span> <span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"n\">i</span><span class=\"p\">)))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">element</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-vector))\" style=\"color: inherit\">in-vector</a></span> <span class=\"n\">my-vector</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"n\">prinf</span> <span class=\"s2\">\"~a~%\"</span> <span class=\"n\">element</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Note that the <code><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((lib._racket/vector..rkt)._vector-map))\" style=\"color: inherit\">vector-map</a></code> function will produce a new vector with the results of the map function, so it is not a good idea to use it just for simply iterating over the elements. <code><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((lib._racket/vector..rkt)._vector-map!))\" style=\"color: inherit\">vector-map!</a></code> can be used however, to update all elements in-place.</p>\n\n<p><strong>Searching for an element in a vector</strong> can be done using <code><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((lib._racket/vector..rkt)._vector-member))\" style=\"color: inherit\">vector-member</a></code> or <code><a href=\"http://docs.racket-lang.org/reference/vectors.html#(def._((lib._racket/vector..rkt)._vector-memq))\" style=\"color: inherit\">vector-memq</a></code> but, just like with lists, these functions need to scan the vector linearly and will be inefficient for large vectors. Still, a vector will be more efficient at this linear search than a list with a similar number of elements, as elements in a vector (or at least their references) are next to each other and will have better cache access characteristics in the computer memory.</p>\n\n<p><strong>Referencing an element by its position</strong>, using <code>vector-ref</code>, is an efficient operation, and if you need to do that often, vectors are the best container for this.</p>\n\n<p><strong>Updating an element</strong> in a vector using <code>vector-set!</code> is efficient, but <strong>inserting or deleting elements or appending two vectors</strong> are inefficient as they have to construct new vectors, you should avoid them in performance sensitive code, especially with vectors containing a large number of elements.</p>\n\n<p><strong>Other vector types, such as <code>gvector</code> and <code>flvector</code></strong> have better performance characteristics for some use cases. Two of the most important of these are <code>gvector</code> and <code>flvector</code>.</p>\n\n<p>A <a href=\"http://docs.racket-lang.org/data/gvector.html\">gvector</a> is a vector data type that supports efficient appending of elements at the end of the vector. It is great for constructing vectors when you don&rsquo;t know the final number of elements.</p>\n\n<p>If you need to store only floating point values in your vector, consider using a <a href=\"http://docs.racket-lang.org/reference/flonums.html?#(part._flvectors)\">flvector</a> which provides a more compact and efficient vector representation for these values. A corresponding suite of functions is available for operating on <code>flvector</code> instances, see the reference for more details.</p>\n\n<p>If the program you write has a lot of numerical calculations, consider using the [flonum][fl] library, which provides operations for floating point numbers (for example, it provides a <code>fl+</code> operation which is more efficient than the <code>+</code> operation).</p>\n\n<h2 id=\"hash-tables\">Hash Tables</h2>\n\n<p>Hash tables are containers which map keys to values and can lookup keys efficiently. The Racket manuals have <a href=\"http://docs.racket-lang.org/guide/hash-tables.html\">overview</a> and <a href=\"http://docs.racket-lang.org/reference/hashtables.html\">reference</a> sections for hash tables explaining how to use them and what functions are available. Like vectors, hash tables can be mutable or immutable, where immutable ones cannot be changed after they are created.</p>\n\n<p>Just as with lists and vectors, some operations are provided for convenience, but they are not very efficient and you need to be aware of these.</p>\n\n<p><strong>Constructing hash tables</strong> can be efficiently done by creating an empty hash table first and adding elements to it one by one. Note that the <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/hash))\" style=\"color: inherit\">for/hash</a></code>, while convenient to use will actually create an immutable hash table, so you cannot add any elements to it after it was created.</p>\n\n<p><strong>Iterating over all the elements in a hash table</strong>* can be done using <a href=\"https://docs.racket-lang.org/reference/for.html\">iterations and comprehensions</a>, but consider using <code><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-hash))\" style=\"color: inherit\">in-hash</a></code>, <code><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-hash-keys))\" style=\"color: inherit\">in-hash-keys</a></code>, or <code><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-hash-values))\" style=\"color: inherit\">in-hash-values</a></code> for these <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></code> loops. Avoid using <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((lib._racket/private/base..rkt)._hash-keys))\" style=\"color: inherit\">hash-keys</a></code> or <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((lib._racket/private/base..rkt)._hash-values))\" style=\"color: inherit\">hash-values</a></code> as these functions construct an intermediate list, which can be a performance problem. For example, to print out all elements in a hash table, you can use:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">[(</span><span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-hash))\" style=\"color: inherit\">in-hash</a></span> <span class=\"n\">h</span><span class=\"p\">)]</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"key: ~a, value ~a~%\"</span> <span class=\"n\">k</span> <span class=\"n\">v</span><span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p><strong>Searching for an element in a hash table</strong> using <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></code> is efficient. If you need to scan all elements to look for a value, this will take a linear amount of time, it will be inefficient and should be avoided. If you do need to scan all elements to look for one, at least consider using a <code><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></code> form and <code><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-hash-values))\" style=\"color: inherit\">in-hash-values</a></code> &mdash; the alternative of obtaining a list of elements and scanning them using list operations has even worse performance characteristics.</p>\n\n<p><strong>Inserting, updating, deleting elements</strong> can be done efficiently, so if you need to perform a lot of these operations, a hash table is the best container to use. Here is a summary of the available operations:</p>\n\n<ul>\n <li>\n  <p><code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></code> will find an element by a key. By default, if the  element is not found, an error is raised, but you can specify what value to  return if the key is not present. For example to return <code>#f</code> when a key is  not found, use <code>(hash-ref a-hash key #f)</code></p></li>\n <li>\n  <p><code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((lib._racket/private/more-scheme..rkt)._hash-ref!))\" style=\"color: inherit\">hash-ref!</a></code> is similar to <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></code> but it will create a  new value for the key, of one does not already exist. It will be more  efficient to use this instead of checking if a key exists and inserting it  if it does now.</p></li>\n <li>\n  <p><code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-set!))\" style=\"color: inherit\">hash-set!</a></code> will set a value for a key, possibly replacing an old  value.</p></li>\n <li>\n  <p><code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((lib._racket/private/more-scheme..rkt)._hash-update!))\" style=\"color: inherit\">hash-update!</a></code> combines can be used to update or create a new value,  it effectively combines <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-ref))\" style=\"color: inherit\">hash-ref</a></code> and <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-set!))\" style=\"color: inherit\">hash-set!</a></code> into one  operation.</p></li>\n <li>\n  <p><code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-remove!))\" style=\"color: inherit\">hash-remove!</a></code> will remove an element from the hash table</p></li>\n <li>\n  <p><code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((quote._~23~25kernel)._hash-clear!))\" style=\"color: inherit\">hash-clear!</a></code> will remove all elements in a hash table and will be  more efficient than removing them one by one using <code>hash-remove!</code>.</p></li></ul>\n\n<p><strong>Appending hash tables</strong> can be done using <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((lib._racket/hash..rkt)._hash-union))\" style=\"color: inherit\">hash-union</a></code> or <code><a href=\"http://docs.racket-lang.org/reference/hashtables.html#(def._((lib._racket/hash..rkt)._hash-union!))\" style=\"color: inherit\">hash-union!</a></code>, but these will not be very efficient for large hash tables, however, <code>hash-union!</code> can be used for efficiently appending a smaller hash table to a larger one.</p>\n\n<h2 id=\"conclusion\">Conclusion</h2>\n\n<p>One can write performance sensitive applications in Racket, but the choice of data structures and algorithms will greatly affect the final performance. This post is a high level overview of the most important data structures and provided some guidelines on how to choose between them, but ultimately, the final choice will depend on the type of processing program needs to do and what algorithms you choose.</p>") (u . "/img/a021/thumb.png")) ((? . 23) f post (u . "Writing a Simple Password Generator in Racket") (? . 23) 1553658954 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2019/03/password-generator.html" . windows) (u . "/2019/03/password-generator.html") (u . "2019-03-05T16:59:10") (? . 22) (? . 15) (c (u . "racket")) (u . "\n<p>There are many places in todays world where you need to provide a password and, since it is not recommended to reuse them, you will need to come up with many such passwords, all of them preferably secure. This blog post shows how to build a simple password generator. You may already use a password manager and may not have a need for a new one, still, this blog post might show you a few useful techniques for building Racket applications.</p>") #t (u . "\n<p>There are many places in todays world where you need to provide a password and, since it is not recommended to reuse them, you will need to come up with many such passwords, all of them preferably secure. This blog post shows how to build a simple password generator. You may already use a password manager and may not have a need for a new one, still, this blog post might show you a few useful techniques for building Racket applications.</p>\n<!-- more-->\n\n<p>Two things are needed to generate a secure password: a cryptographically secure random number and a way to convert this number in a string of letters, numbers and symbols which can be used as a password.</p>\n\n<p>To generate a secure random number, we can use the Racket <code><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/random..rkt)._crypto-random-bytes))\" style=\"color: inherit\">crypto-random-bytes</a></code> function, this function uses the underlying OS facilities to generate cryptographically secure random numbers. However, the function returns a vector of bytes, rather than a single integer. Since Racket supports arbitrarily large integers, we can write a function which converts the random bytes into a single big integer. It is more convenient to use the usual arithmetic operations even if the numbers involved have 512 or 1024 bits:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">random-bignum</span> <span class=\"n\">bits</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">num-bytes</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/math..rkt)._exact-ceiling))\" style=\"color: inherit\">exact-ceiling</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._/))\" style=\"color: inherit\">/</a></span> <span class=\"n\">bits</span> <span class=\"mi\">8</span><span class=\"p\">)))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for/fold))\" style=\"color: inherit\">for/fold</a></span> <span class=\"p\">([</span><span class=\"n\">result</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"p\">([</span><span class=\"n\">byte</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/sequences.html#(def._((lib._racket/private/base..rkt)._in-bytes))\" style=\"color: inherit\">in-bytes</a></span> <span class=\"p\">(</span><span class=\"n\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/random..rkt)._crypto-random-bytes))\" style=\"color: inherit\">crypto-random-bytes</a></span> <span class=\"n\">num-bytes</span><span class=\"p\">))])</span>\n    <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._+))\" style=\"color: inherit\">+</a></span> <span class=\"n\">byte</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._*))\" style=\"color: inherit\">*</a></span> <span class=\"n\">result</span> <span class=\"mi\">256</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>For simplicity, the function above will round up the number of bits to the nearest multiple of 8, so, when asking for a 510 bit random number, it will return a 512 bit one:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">pwgen.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">random-bignum</span> <span class=\"mi\">512</span><span class=\"p\">)</span>\n<span class=\"mi\">2149265534656356393808323702525364123006913634758130535200642</span>\n<span class=\"mi\">1529460948865291665389221928490091241418209211877685483113247</span>\n<span class=\"mi\">50742321664506075182906096005424</span>\n<span class=\"n\">pwgen.rkt&gt;</span> \n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Technically, the numbers printed out by this function can be used as passwords directly, but they are too long for practical uses. We can try printing them out in different bases, the <code><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></code> function allows specifying a base when converting a number to its string representation:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">pwgen.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">number</span> <span class=\"p\">(</span><span class=\"n\">random-bignum</span> <span class=\"mi\">128</span><span class=\"p\">))</span>\n<span class=\"n\">pwgen.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">base</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"mi\">16</span> <span class=\"mi\">32</span> <span class=\"mi\">36</span><span class=\"p\">)])</span>\n             <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">e</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></span> <span class=\"n\">number</span> <span class=\"kd\">#:base</span> <span class=\"n\">base</span><span class=\"p\">))</span>\n             <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"base ~a, length: ~a, number: ~a~%\"</span>\n                      <span class=\"n\">base</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span> <span class=\"n\">e</span><span class=\"p\">)</span> <span class=\"n\">e</span><span class=\"p\">))</span>\n<span class=\"n\">base</span> <span class=\"mi\">10</span><span class=\"o\">,</span> <span class=\"n\">length:</span> <span class=\"mi\">38</span><span class=\"o\">,</span> <span class=\"n\">number:</span> <span class=\"mi\">45179475995854230969429510001515414944</span>\n<span class=\"n\">base</span> <span class=\"mi\">16</span><span class=\"o\">,</span> <span class=\"n\">length:</span> <span class=\"mi\">32</span><span class=\"o\">,</span> <span class=\"n\">number:</span> <span class=\"n\">21fd40254dd38346ba70b7c04711c5a0</span>\n<span class=\"n\">base</span> <span class=\"mi\">32</span><span class=\"o\">,</span> <span class=\"n\">length:</span> <span class=\"mi\">26</span><span class=\"o\">,</span> <span class=\"n\">number:</span> <span class=\"n\">11vl02ajejgd3bks5no13h3hd0</span>\n<span class=\"n\">base</span> <span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"n\">length:</span> <span class=\"mi\">25</span><span class=\"o\">,</span> <span class=\"n\">number:</span> <span class=\"n\">20fvdccm8ijp6ulrxe7ppz928</span>\n<span class=\"n\">pwgen.rkt&gt;</span> \n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The higher the base, the shorter the representation of the number, this is because base 10 uses 10 symbols (the digits &lsquo;0&rsquo; to &lsquo;9&rsquo;), but base 36 uses all the letters plus the digits, for a total of 36 symbols. This means that the same random number will use 38 characters when printed in base 10, but only 25 when printed in base 36. We could use a higher base, for example base 62, if we allow upper and lower letters plus digits, but the <code><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((lib._racket/format..rkt)._~7er))\" style=\"color: inherit\">~r</a></code> function is limited to base 36, so we need to write our own encoding function:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7\n8\n9</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">encode-bignum</span> <span class=\"n\">bignum</span> <span class=\"n\">alphabet</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">base</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span> <span class=\"n\">alphabet</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"n\">loop</span> <span class=\"p\">([</span><span class=\"n\">result</span> <span class=\"o\">'</span><span class=\"p\">()]</span>\n             <span class=\"p\">[</span><span class=\"n\">bignum</span> <span class=\"n\">bignum</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">bignum</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((quote._~23~25kernel)._let-values))\" style=\"color: inherit\">let-values</a></span> <span class=\"p\">(([</span><span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._quotient/remainder))\" style=\"color: inherit\">quotient/remainder</a></span> <span class=\"n\">bignum</span> <span class=\"n\">base</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">symbol</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-ref))\" style=\"color: inherit\">string-ref</a></span> <span class=\"n\">alphabet</span> <span class=\"n\">r</span><span class=\"p\">)))</span>\n            <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">symbol</span> <span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"n\">q</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._list-~3estring))\" style=\"color: inherit\">list-&gt;string</a></span> <span class=\"n\">result</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The function takes the number to encode and an <em>alphabet</em>, which is a string containing the valid characters to use for the encoding. We can try it out with base 10 and supplying the string &ldquo;0123456789&rdquo;:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">pwgen.rkt&gt;</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">number</span> <span class=\"p\">(</span><span class=\"n\">random-bignum</span> <span class=\"mi\">128</span><span class=\"p\">))</span>\n<span class=\"n\">pwgen.rkt&gt;</span> <span class=\"n\">number</span>\n<span class=\"mi\">303402022734247877297530981670554688480</span>\n<span class=\"n\">pwgen.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">encode-bignum</span> <span class=\"n\">number</span> <span class=\"s2\">\"0123456789\"</span><span class=\"p\">)</span>\n<span class=\"s2\">\"303402022734247877297530981670554688480\"</span>\n<span class=\"n\">pwgen.rkt&gt;</span> \n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>Our function is not limited to using numbers, we can use the letters a, b, c, d, e and f to encode the same number. Since there are only 6 symbols in our encoding, the encoding is now longer, but it represents the same random 128 bit number:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"n\">pwgen.rkt&gt;</span> <span class=\"p\">(</span><span class=\"n\">encode-bignum</span> <span class=\"n\">number</span> <span class=\"s2\">\"abcdef\"</span><span class=\"p\">)</span>\n<span class=\"s2\">\"cbdacfaebbfdefadbfdadfcfdcbfffecbcdfeafdfddbbddabc\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"creating-a-command-line-application\">Creating a command-line application</h2>\n\n<p>We have all the building blocks we need to build a simple command line utility to generate passwords. To make it more interesting, the utility will accept command line arguments to select password strength, the alphabets to use for encoding, and will allow grouping of letters to make passwords easier to use.</p>\n\n<p>We will define four alphabets for encoding the passwords: the <code>full-alphabet</code> will use upper and lower-case letters, digits plus some symbols, this will produce the shortest passwords for a given bit length, but it might create passwords which are difficult to type. The <code>normal-alphabet</code> will use upper and lower-case letters plus digits, the <code>lower-case-alphabet</code> will use lower case letters plus digits and a <code>simplified-alphabet</code> will use a combination of letters and numbers which cannot be mistaken for each other (for example, it does not contain the letter <code>l</code> or the digit <code>1</code>):</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">full-alphabet</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span>\n   <span class=\"s2\">\"abcdefghijklmnopqrstuvwxyz\"</span>\n   <span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>\n   <span class=\"s2\">\"0123456789\"</span>\n   <span class=\"s2\">\"~!@#$%^&amp;*_+-=|{}[]&lt;&gt;?,./\"</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">normal-alphabet</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span> <span class=\"s2\">\"abcdefghijklmnopqrstuvwxyz\"</span>\n                 <span class=\"s2\">\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"</span>\n                 <span class=\"s2\">\"0123456789\"</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">lower-case-alphabet</span>\n  <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-append))\" style=\"color: inherit\">string-append</a></span> <span class=\"s2\">\"abcdefghijklmnopqrstuvwxyz\"</span> <span class=\"s2\">\"0123456789\"</span><span class=\"p\">))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">simplified-alphabet</span> <span class=\"s2\">\"acefghkrstwxyz23456789\"</span><span class=\"p\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>To make passwords easier to read and type, we can extend the <code>encode-bignum</code> function to insert a separator, for example a dash (<code>-</code>), between groups of characters to produce passwords such as &ldquo;xg5z&ndash;999gh-fc8z4-czfw&rdquo;. This is done by keeping track of the current position and inserting the separator if the current position is a multiple of the grouping:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">encode-bignum</span> <span class=\"n\">bignum</span> <span class=\"n\">alphabet</span> <span class=\"n\">group</span> <span class=\"n\">separator</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">base</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-length))\" style=\"color: inherit\">string-length</a></span> <span class=\"n\">alphabet</span><span class=\"p\">))</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"n\">loop</span> <span class=\"p\">([</span><span class=\"n\">position</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n             <span class=\"p\">[</span><span class=\"n\">result</span> <span class=\"o\">'</span><span class=\"p\">()]</span>\n             <span class=\"p\">[</span><span class=\"n\">bignum</span> <span class=\"n\">bignum</span><span class=\"p\">])</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">bignum</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((quote._~23~25kernel)._let-values))\" style=\"color: inherit\">let-values</a></span> <span class=\"p\">(([</span><span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"p\">]</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._quotient/remainder))\" style=\"color: inherit\">quotient/remainder</a></span> <span class=\"n\">bignum</span> <span class=\"n\">base</span><span class=\"p\">)))</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">symbol</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-ref))\" style=\"color: inherit\">string-ref</a></span> <span class=\"n\">alphabet</span> <span class=\"n\">r</span><span class=\"p\">)))</span>\n            <span class=\"c1\">;; NOTE: if `group` is 0, there is no grouping</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">group</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">position</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3d))\" style=\"color: inherit\">=</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._remainder))\" style=\"color: inherit\">remainder</a></span> <span class=\"n\">position</span> <span class=\"n\">group</span><span class=\"p\">)</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n                <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">position</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">symbol</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">separator</span> <span class=\"n\">result</span><span class=\"p\">))</span> <span class=\"n\">q</span><span class=\"p\">)</span>\n                <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._add1))\" style=\"color: inherit\">add1</a></span> <span class=\"n\">position</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">symbol</span> <span class=\"n\">result</span><span class=\"p\">)</span> <span class=\"n\">q</span><span class=\"p\">))))</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._list-~3estring))\" style=\"color: inherit\">list-&gt;string</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/private/list..rkt)._reverse))\" style=\"color: inherit\">reverse</a></span> <span class=\"n\">result</span><span class=\"p\">)))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>We also need to process the command line arguments passed in to the script to control password length, alphabet choice and grouping; this can be done using the <code><a href=\"http://docs.racket-lang.org/reference/Command-Line_Parsing.html#(form._((lib._racket/cmdline..rkt)._command-line))\" style=\"color: inherit\">command-line</a></code> macro, but since it is a macro, it interprets its arguments in a special way, which may be surprising if you expect a normal function call. See the full documentation for the macro for details, however, below is the invocation required to accept three command line arguments <code>-b</code> for the number of bits in the password, <code>-a</code> for the alphabet to use and <code>-g</code> for the grouping. Each of these arguments are optional and the syntax allows specifying a help text for them too, so the script will print out usage information if passed in the <code>-h</code> argument. Each command-line option has an argument which is a string, and the <code><a href=\"http://docs.racket-lang.org/reference/Command-Line_Parsing.html#(form._((lib._racket/cmdline..rkt)._command-line))\" style=\"color: inherit\">command-line</a></code> macro allows specifying some processing to be done on that argument. To keep the <code><a href=\"http://docs.racket-lang.org/reference/Command-Line_Parsing.html#(form._((lib._racket/cmdline..rkt)._command-line))\" style=\"color: inherit\">command-line</a></code> call simple, the <code>set-bits</code>, <code>set-alphabet</code> and <code>set-grouping</code> functions are provided separately, these functions validate the argument and set the actual values for the bits, alphabet and grouping respectively:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._require))\" style=\"color: inherit\">require</a></span> <span class=\"n\">racket/cmdline</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/Command-Line_Parsing.html#(form._((lib._racket/cmdline..rkt)._command-line))\" style=\"color: inherit\">command-line</a></span>\n <span class=\"kd\">#:program</span> <span class=\"s2\">\"pwgen\"</span>\n <span class=\"kd\">#:usage-help</span> <span class=\"s2\">\"\"</span> <span class=\"s2\">\"pwgen is a program to generate <a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/private/base..rkt)._random))\" style=\"color: inherit\">random</a> passwords\"</span> <span class=\"s2\">\"\"</span>\n <span class=\"kd\">#:once-each</span>\n <span class=\"p\">((</span><span class=\"s2\">\"-b\"</span> <span class=\"s2\">\"--bits\"</span><span class=\"p\">)</span>\n  <span class=\"n\">arg</span>\n  <span class=\"s2\">\"number of <a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((lib._racket/private/base..rkt)._random))\" style=\"color: inherit\">random</a> bits in the password\"</span>\n  <span class=\"p\">(</span><span class=\"n\">set-bits</span> <span class=\"n\">arg</span><span class=\"p\">))</span>\n \n <span class=\"p\">((</span><span class=\"s2\">\"-a\"</span> <span class=\"s2\">\"--alphabet\"</span><span class=\"p\">)</span>\n  <span class=\"n\">arg</span>\n  <span class=\"p\">(</span><span class=\"s2\">\"alphabet to use <a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a> encoding\"</span>\n   <span class=\"s2\">\"must be one of: 'full', 'normal', 'lower-case' <a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._or))\" style=\"color: inherit\">or</a> 'simplified'\"</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"n\">set-alphabet</span> <span class=\"n\">arg</span><span class=\"p\">))</span>\n \n <span class=\"p\">((</span><span class=\"s2\">\"-g\"</span> <span class=\"s2\">\"--group\"</span><span class=\"p\">)</span>\n  <span class=\"n\">arg</span>\n  <span class=\"s2\">\"group characters of &lt;arg&gt; items, use 0 <a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a> no grouping\"</span>\n  <span class=\"p\">(</span><span class=\"n\">set-grouping</span> <span class=\"n\">arg</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>For completeness, here is the definition for the <code>set-bits</code>, <code>set-alphabet</code> and <code>set-grouping</code> functions, they check that the parameter passed in as a string is a valid number or alphabet definition and signal an error if they are not. These functions also set values for the <code>bits</code>, <code>alphabet</code> and <code>grouping</code> variables which will be used to generate the password, these variables already have default values, so the script will still generate a password with default parameters if some options are missing from the command line:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">bits</span> <span class=\"mi\">128</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">alphabet</span> <span class=\"n\">simplified-alphabet</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">grouping</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">set-bits</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">value</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._string-~3enumber))\" style=\"color: inherit\">string-&gt;number</a></span> <span class=\"n\">arg</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))\" style=\"color: inherit\">number?</a></span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._integer~3f))\" style=\"color: inherit\">integer?</a></span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">value</span> <span class=\"mi\">64</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">bits</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(def._((quote._~23~25kernel)._error))\" style=\"color: inherit\">error</a></span> <span class=\"s2\">\"invalid number of bits <a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a> the password, must be at least 64\"</span><span class=\"p\">))))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">set-alphabet</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">alphabet</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-ci~3d~3f))\" style=\"color: inherit\">string-ci=?</a></span> <span class=\"n\">arg</span> <span class=\"s2\">\"full\"</span><span class=\"p\">)</span> <span class=\"n\">full-alphabet</span><span class=\"p\">)</span>\n              <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-ci~3d~3f))\" style=\"color: inherit\">string-ci=?</a></span> <span class=\"n\">arg</span> <span class=\"s2\">\"normal\"</span><span class=\"p\">)</span> <span class=\"n\">normal-alphabet</span><span class=\"p\">)</span>\n              <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-ci~3d~3f))\" style=\"color: inherit\">string-ci=?</a></span> <span class=\"n\">arg</span> <span class=\"s2\">\"lower-case\"</span><span class=\"p\">)</span> <span class=\"n\">lower-case-alphabet</span><span class=\"p\">)</span>\n              <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string-ci~3d~3f))\" style=\"color: inherit\">string-ci=?</a></span> <span class=\"n\">arg</span> <span class=\"s2\">\"simplified\"</span><span class=\"p\">)</span> <span class=\"n\">simplified-alphabet</span><span class=\"p\">)</span>\n              <span class=\"p\">(</span><span class=\"no\">#t</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(def._((quote._~23~25kernel)._error))\" style=\"color: inherit\">error</a></span> <span class=\"s2\">\"unknown alphabet type\"</span><span class=\"p\">)))))</span>\n\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">set-grouping</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">value</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._string-~3enumber))\" style=\"color: inherit\">string-&gt;number</a></span> <span class=\"n\">arg</span><span class=\"p\">)))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._number~3f))\" style=\"color: inherit\">number?</a></span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/number-types.html#(def._((quote._~23~25kernel)._integer~3f))\" style=\"color: inherit\">integer?</a></span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/generic-numbers.html#(def._((quote._~23~25kernel)._~3e))\" style=\"color: inherit\">&gt;</a></span> <span class=\"n\">value</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">grouping</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/exns.html#(def._((quote._~23~25kernel)._error))\" style=\"color: inherit\">error</a></span> <span class=\"s2\">\"invalid grouping, must be a positive integer\"</span><span class=\"p\">))))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>All that remains is to generate the password and print it out:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">n</span> <span class=\"p\">(</span><span class=\"n\">random-bignum</span> <span class=\"n\">bits</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._printf))\" style=\"color: inherit\">printf</a></span> <span class=\"s2\">\"~a~%\"</span> <span class=\"p\">(</span><span class=\"n\">encode-bignum</span> <span class=\"n\">n</span> <span class=\"n\">alphabet</span> <span class=\"n\">grouping</span> <span class=\"sc\">#\\-</span><span class=\"p\">))</span><span class=\"err\">)</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>With all these updates, the script can be run from the command line, you can also find in the entire program in this <a href=\"https://gist.github.com/alex-hhh/27286f4609ea0c989675e5c946ca39de\">GitHub Gist</a>. Here is what it looks when it runs:</p>\n\n<pre><code>$ racket pwgen.rkt -b 128 -g 4\ntkaa-krr7-82ra-w3ks-egy3-f768-t62y-c\n$ </code></pre>\n\n<h2 id=\"creating-a-racket-package-for-our-script\">Creating a racket package for our script</h2>\n\n<p>Racket packages are usually used for library functions, but our program provides none of those &mdash; we could export the <code>random-bignum</code> and <code>encode-bignum</code> functions, but these are simple functions and not worth having in a separate library. However, Racket packages can also be used to install additional <code>raco</code> programs. This can be useful for us if we want to run our script without having to remember where we stored it on disk. To create a package for our script we will need to:</p>\n\n<ul>\n <li>\n  <p>Create a directory, &ldquo;pwgen&rdquo; where the files will be placed</p></li>\n <li>\n  <p>Put the racket source file in that directory, the info file requires it to  be named &ldquo;pwgen.rkt&rdquo; &mdash; you can download it from this <a href=\"https://gist.github.com/alex-hhh/27286f4609ea0c989675e5c946ca39de\">GitHub Gist</a> if  you don&rsquo;t want to type it yourself.</p></li>\n <li>\n  <p>Add the following to an &ldquo;info.rkt&rdquo; file in the same directory:</p></li></ul>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"kn\">#lang </span><span class=\"nn\">info</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">collection</span> <span class=\"s2\">\"pwgen\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">deps</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"s2\">\"base\"</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">pkg-desc</span> <span class=\"s2\">\"pwgen -- a simple password generator\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/runtime.html#(def._((quote._~23~25kernel)._version))\" style=\"color: inherit\">version</a></span> <span class=\"s2\">\"1.0\"</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">pkg-authors</span> <span class=\"o\">'</span><span class=\"p\">(</span><span class=\"ss\">alexh</span><span class=\"p\">))</span>\n<span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">raco-commands</span> <span class=\"o\">'</span><span class=\"p\">((</span><span class=\"s2\">\"pwgen\"</span> <span class=\"p\">(</span><span class=\"ss\"><a href=\"http://docs.racket-lang.org/reference/require.html#(form._((lib._racket/private/base..rkt)._submod))\" style=\"color: inherit\">submod</a></span> <span class=\"ss\">pwgen/pwgen</span> <span class=\"ss\">main</span><span class=\"p\">)</span> <span class=\"s2\">\"run pwgen\"</span> <span class=\"no\">#f</span><span class=\"p\">)))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<ul>\n <li>Install the package by running <code>raco pkg install</code> in the &ldquo;pwgen&rdquo; directory.</li></ul>\n\n<p>Note that the &ldquo;pwgen.rkt&rdquo; copy from the <a href=\"https://gist.github.com/alex-hhh/27286f4609ea0c989675e5c946ca39de\">GitHub Gist</a> has the command line parsing and program execution is placed inside a <code><a href=\"http://docs.racket-lang.org/reference/module.html#(form._((lib._racket/private/base..rkt)._module+))\" style=\"color: inherit\">module+</a></code> section named <code>main</code>. The code inside the <code>main</code> submodule will only be executed when the program is run from the command line using the raco command, not when the file is required inside other files. Note how the &ldquo;info.rkt&rdquo; file has a <code>raco-commands</code> section which specifies to run the main submodule of the &ldquo;pwgen/pwgen&rdquo; package for its &ldquo;pwgen&rdquo; command.</p>\n\n<p>We can now run the pwgen utility as a <code>raco</code> command:</p>\n\n<pre><code>$ raco pwgen -b 128 -a full\nR^go-}[PkfljGF#|B/~E\n$ </code></pre>") (u . "/img/a023/thumb.png")) ((? . 21) f post (u . "Fatigue and Running Form") (? . 21) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2017/11/fatigue-and-running-form.html" . windows) (u . "/2017/11/fatigue-and-running-form.html") (u . "2017-11-28T19:06:57") (? . 20) (? . 4) (c (u . "training data analysis")) (u . "\n<p>My Garmin FR920 watch keeps track of <em>running form</em> related measurements: Cadence, Stride, Ground Contact Time and Vertical Oscillation. Given that I collected a lot of data during my last Marathon training, I decided to have a look at how running form changes as I get more tired during a run.</p>") #t (u . "\n<p>My Garmin FR920 watch keeps track of <em>running form</em> related measurements: Cadence, Stride, Ground Contact Time and Vertical Oscillation. Given that I collected a lot of data during my last Marathon training, I decided to have a look at how running form changes as I get more tired during a run.</p>\n<!-- more-->\n\n<p>During my last Marathon training season, my watch recorded 440179 data points from 97 running sessions for a total distance of 1347 km or 122 hours of running. Some of these are long and easy runs and some are interval training runs &mdash; there is a large variety of running paces at different fatigue levels. I wrote another <a href=\"../2017/marathon-training-2017-statistics.html\">blog post</a> about some statistics from this data, but this post focuses on fatigue and how it affects Cadence, Stride, Ground Contact Time and Vertical Oscillation.</p>\n\n<p>I wrote a separate post about how I decided to <a href=\"../2017/quantifying-fatigue.html\">quantify fatigue</a> accumulated during a run workout. The plots in this post use that method to group data points into five fatigue levels.</p>\n\n<h2 id=\"cadence--stride-vs-fatigue\">Cadence + Stride vs Fatigue</h2>\n\n<p>Running pace (how fast you run), is composed of two elements: <strong>cadence</strong> &mdash; how many steps one takes each minute and <strong>stride</strong> &mdash; how long is each step. The plot below plots the cadence vs. stride for each data point, the points being colored by fatigue. Each point also represents a running pace value, The lines on the plot represent the &ldquo;constant pace&rdquo; lines: pace is &ldquo;stride&rdquo; (the length of each step) multiplied by &ldquo;cadence&rdquo; (how many steps each minute). For example, to maintain a 4:00 min/km pace at a cadence of 90 steps/minute, the stride would have to be 1.38 meters. To maintain the same pace at a cadence of 80 steps/minute, the stride would have to increase to 1.56 meters.</p>\n\n<div class=\"figure\"><img src=\"/img/a005/cad+stride-fatigue.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p><em>A note on cadence values:</em> Originally, running cadence was measured by counting number of steps taken with one leg, either left or right. A few years ago, Garmin switched to measuring cadence by counting steps from both legs. I prefer the old style, where a cadence of 90 means &ldquo;90 steps taken with the right (or left) leg only&rdquo;. If you prefer the newer style, just multiply everything by 2. For example, an &ldquo;old style&rdquo; 90 SPM becomes 180 SPM when counting each leg.</p>\n\n<h2 id=\"density-plots-for-each-running-form-metric\">Density plots for each running form metric</h2>\n\n<p>The plots below show how the density profile (a histogram, really) for each of the running metrics. Ground Contact Time, or GCT, is the time the foot is in contact with the ground at each step. Vertical Oscillation, or VOSC, is the amount of up-down bouncing the body makes while running. It is measured in millimeters.</p>\n\n<p>The cadence, GCT and VOSC density profiles do not seem change much during the course of a run. There are some humps in the plot mainly because I did intervals at hard and severe fatigue levels and I maintain a higher cadence during these.</p>\n\n<p>Stride (the length of each step) is the only measurement that shows a clear shift towards lower values as fatigue increases.</p>\n\n<hr />\n\n<div class=\"figure\"><img src=\"/img/a005/cad-density.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td>Fatigue Level</td>\n    <td>Mean Cadence (SPM)</td>\n    <td>StdDev</td></tr></thead>\n  <tbody>\n   <tr>\n    <td>none</td>\n    <td>83.60</td>\n    <td>2.96</td></tr>\n   <tr>\n    <td>mild</td>\n    <td>83.33</td>\n    <td>3.90</td></tr>\n   <tr>\n    <td>moderate</td>\n    <td>82.96</td>\n    <td>3.31</td></tr>\n   <tr>\n    <td>heavy</td>\n    <td>82.65</td>\n    <td>2.96</td></tr>\n   <tr>\n    <td>severe</td>\n    <td>83.13</td>\n    <td>2.72</td></tr></tbody></table></div>\n\n<hr />\n\n<div class=\"figure\"><img src=\"/img/a005/stride-density.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td>Fatigue Level</td>\n    <td>Mean Stride (meters)</td>\n    <td>StdDev</td></tr></thead>\n  <tbody>\n   <tr>\n    <td>none</td>\n    <td>1.10</td>\n    <td>0.0714</td></tr>\n   <tr>\n    <td>mild</td>\n    <td>1.12</td>\n    <td>0.0808</td></tr>\n   <tr>\n    <td>moderate</td>\n    <td>1.11</td>\n    <td>0.0783</td></tr>\n   <tr>\n    <td>heavy</td>\n    <td>1.09</td>\n    <td>0.0759</td></tr>\n   <tr>\n    <td>severe</td>\n    <td>1.07</td>\n    <td>0.0767</td></tr></tbody></table></div>\n\n<hr />\n\n<div class=\"figure\"><img src=\"/img/a005/gct-density.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td>Fatigue Level</td>\n    <td>Mean GCT (ms)</td>\n    <td>StdDev</td></tr></thead>\n  <tbody>\n   <tr>\n    <td>none</td>\n    <td>284</td>\n    <td>18.42</td></tr>\n   <tr>\n    <td>mild</td>\n    <td>285</td>\n    <td>19.08</td></tr>\n   <tr>\n    <td>moderate</td>\n    <td>286</td>\n    <td>16.48</td></tr>\n   <tr>\n    <td>heavy</td>\n    <td>289</td>\n    <td>15.78</td></tr>\n   <tr>\n    <td>severe</td>\n    <td>287</td>\n    <td>15.00</td></tr></tbody></table></div>\n\n<hr />\n\n<div class=\"figure\"><img src=\"/img/a005/vosc-density.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td>Fatigue Level</td>\n    <td>Mean VOSC (mm)</td>\n    <td>StdDev</td></tr></thead>\n  <tbody>\n   <tr>\n    <td>none</td>\n    <td>67</td>\n    <td>5.13</td></tr>\n   <tr>\n    <td>mild</td>\n    <td>69</td>\n    <td>5.50</td></tr>\n   <tr>\n    <td>moderate</td>\n    <td>69</td>\n    <td>4.82</td></tr>\n   <tr>\n    <td>heavy</td>\n    <td>69</td>\n    <td>4.55</td></tr>\n   <tr>\n    <td>severe</td>\n    <td>68</td>\n    <td>4.98</td></tr></tbody></table></div>\n\n<h2 id=\"conclusions\">Conclusions</h2>\n\n<p>I&rsquo;m not sure what conclusions to draw from this data, apart from the fact that the plots look pretty. The only running form metric that seems to change as I get more tired is the stride, which gets shorter.</p>\n\n<p>The script used to generate the plots in this blog post is available <a href=\"https://gist.github.com/alex-hhh/5743eb50e792aae6c9859c50f62b5517\">here</a></p>") (u . "/img/a005/thumb.png")) ((? . 19) f post (u . "Chess Game Using Racket's Pasteboard (part 3)") (? . 19) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/10/chess-game-using-racket-s-pasteboard-part-3.html" . windows) (u . "/2018/10/chess-game-using-racket-s-pasteboard-part-3.html") (u . "2018-10-29T18:34:41") (? . 7) (? . 18) (c (u . "racket")) (u . "\n<p>The <code>pasteboard%</code>object is an editor of <code>snip%</code> objects and it implements some features that make sense for an editor: for example, you can select multiple snips and drag them around with the mouse, and you can move selected snips using the keyboard, you can also add any kind of snip, not just chess pieces to the pasteboard. Since none of these features are useful or desirable for a chess board game we will look at how to disable them.</p>") #t (u . "\n<p>The <code>pasteboard%</code>object is an editor of <code>snip%</code> objects and it implements some features that make sense for an editor: for example, you can select multiple snips and drag them around with the mouse, and you can move selected snips using the keyboard, you can also add any kind of snip, not just chess pieces to the pasteboard. Since none of these features are useful or desirable for a chess board game we will look at how to disable them.</p>\n<!-- more-->\n\n<p>This is the last post in the series about implementing a chess board game using the Racket <code>pasteboard%</code>. If you haven&rsquo;t already done so, you might want to read the <a href=\"/2018/10/chess-game-using-racket-s-pasteboard.html\">first blog post</a> and <a href=\"/2018/10/chess-game-using-racket-s-pasteboard-part-2.html\">the second one</a> before reading this one.</p>\n\n<h2 id=\"selecting-only-one-chess-piece-at-a-time\">Selecting only one chess piece at a time</h2>\n\n<p>By default, the <code>pasteboard%</code> will allow multiple snips to be selected and this can be done in two ways: dragging the mouse over a region of the canvas will select all snips in that region, and holding down shift while clicking on a snip will not remove the selection from the previous snip. This behavior is not suitable for a chess game, so we need to disable both ways of performing a multiple selection:</p>\n\n<ul>\n <li>disabling drag selection is done by calling <code>set-area-selectable</code> with an  <code>#f</code> argument</li>\n <li>disabling multiple selection with the Shift key is done by overriding the  <code>after-select</code> method and un-selecting any other snips when a snip is  selected.</li></ul>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n    <span class=\"c1\">;; rest of the chess-board% definition remains unchanged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">set-area-selectable</span> <span class=\"no\">#f</span><span class=\"p\">)</span> <span class=\"c1\">; disable drag-select for the pasteboard</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-select</span> <span class=\"n\">snip</span> <span class=\"n\">on?</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">on?</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">other-selected-snips</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"n\">loop</span> <span class=\"p\">((</span><span class=\"n\">other</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">find-next-selected-snip</span> <span class=\"no\">#f</span><span class=\"p\">))</span>\n                     <span class=\"p\">(</span><span class=\"n\">result</span> <span class=\"o\">'</span><span class=\"p\">()))</span>\n            <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">other</span>\n                <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">next</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">find-next-selected-snip</span> <span class=\"n\">other</span><span class=\"p\">)))</span>\n                  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._eq~3f))\" style=\"color: inherit\">eq?</a></span> <span class=\"n\">snip</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n                      <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"n\">next</span> <span class=\"n\">result</span><span class=\"p\">)</span>\n                      <span class=\"p\">(</span><span class=\"n\">loop</span> <span class=\"n\">next</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((quote._~23~25kernel)._cons))\" style=\"color: inherit\">cons</a></span> <span class=\"n\">other</span> <span class=\"n\">result</span><span class=\"p\">))))</span>\n                <span class=\"n\">result</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/for.html#(form._((lib._racket/private/base..rkt)._for))\" style=\"color: inherit\">for</a></span> <span class=\"p\">([</span><span class=\"n\">snip</span> <span class=\"n\">other-selected-snips</span><span class=\"p\">])</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">remove-selected</span> <span class=\"n\">snip</span><span class=\"p\">)))</span>\n      <span class=\"c1\">;; Rest of the after-select definition remains unchanged...</span>\n      <span class=\"p\">)</span>\n\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>It is worth mentioning two things about the code that un-selects snips in <code>after-select</code>:</p>\n\n<ul>\n <li>since selected snips are linked together using <code>find-next-selected-snip</code>, we  cannot immediately remove a selected snip without breaking that chain, so  the code collects all selected snips in the <code>other-selected-snips</code> list and  removes them separately. Technically, there will only be at most one other  selected snip, but the code is written such that it can un-select any number  of snips.</li>\n <li>Each time we remove a snip, the <code>after-select</code> method will be called for  that snip with the <code>on?</code> parameter set to <code>#f</code>, the code needs to be  prepared to handle these calls. Our code could be affected by this since it  sets the <code>opponent-move-locations</code> and <code>valid-move-locations</code> to the empty  list when a snip is unselected &mdash; however since we set the move locations  last for our snip, they will always be set for the selected snip.</li></ul>\n\n<h2 id=\"moving-the-snip-in-front-when-dragging-it\">Moving the snip in front when dragging it</h2>\n\n<p>The snips are stored in the <code>pasteboard%</code> in a list, in the same order as they are added and they are also drawn on the canvas in this order. This drawing order is kept even when a snip is dragged with the mouse and this means that the snip will appear to drag under chess pieces which were added to the <code>pasteboard%</code> before this snip. To drag it above all other pieces, we need to move it to the front of the snip list.</p>\n\n<p>We need to update <code>after-select</code> (again) to call <code>set-before</code> and place the selected chess piece in the front of the list. Our application does not rely on the order in which snips are stored in the <code>pasteboard%</code> so we don&rsquo;t need to do place the snip back in its place after it was moved.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n    <span class=\"c1\">;; rest of the chess-board% definition remains unchanged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-select</span> <span class=\"n\">snip</span> <span class=\"n\">on?</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">on?</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">set-before</span> <span class=\"n\">snip</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n        <span class=\"c1\">;; Rest of the after-select definition remains unchanged...</span>\n      <span class=\"p\">))</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"disable-pasteboard-edits-with-the-keyboard-and-clipboard\">Disable <code>pasteboard%</code> edits with the keyboard and clipboard</h2>\n\n<p>The <code>pasteboard%</code> is configured as an editor and, as such, it is integrated with the keyboard and the clipboard. For example, you can select a snip than move it with the arrow keys or delete it by pressing Del or Backspace. If the application would have an edit menu, you could also Cut, Copy and Paste these snips. All this is undesired behavior in a chess game and we need to disable it.</p>\n\n<p>To disable the Cut/Copy/Paste operations, we need to override the <code>can-do-edit-operation?</code> method to always return <code>#f</code>. This method is invoked to check if the pasteboard is ready to accept a CUT, COPY, PASTE or some other edit operation where the operation name is passed in as an argument. Since we won&rsquo;t support any, we will simply return <code>#f</code> in this method.</p>\n\n<p>To disable the keyboard, we need to define a new <code>keymap%</code> instance mapping the unwanted keys to an &ldquo;ignore&rdquo; function. This keymap is than installed in the <code>pasteboard%</code> before the internal keymap so it effectively overrides these keys. Note that we could have implemented the &ldquo;up&rdquo;, &ldquo;down&rdquo;, &ldquo;left&rdquo; and &ldquo;right&rdquo; keys to move the piece square by square, by this is left as an exercise to the reader, instead we map them to the &ldquo;ignore&rdquo; function which is defined as a function that displays a message informing the user that the key is disabled &mdash; in a real program, this function would simply do nothing, but displaying a message is more useful in a demo program.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n    <span class=\"c1\">;; Rest of the chess-board% definition remains unchanged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">can-do-edit-operation?</span> <span class=\"n\">op</span> <span class=\"n\">recursive?</span><span class=\"p\">)</span>\n      <span class=\"no\">#f</span><span class=\"p\">)</span>\n      \n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"p\">(</span><span class=\"n\">on-disabled-key-event</span> <span class=\"n\">data</span> <span class=\"n\">event</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/objectutils.html#(def._((lib._racket/private/class-internal..rkt)._is-a~3f))\" style=\"color: inherit\">is-a?</a></span> <span class=\"n\">event</span> <span class=\"n\">key-event%</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let*))\" style=\"color: inherit\">let*</a></span> <span class=\"p\">((</span><span class=\"n\">code</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">event</span> <span class=\"n\">get-key-code</span><span class=\"p\">))</span>\n                 <span class=\"p\">(</span><span class=\"n\">key-name</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._cond))\" style=\"color: inherit\">cond</a></span> <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol~3f))\" style=\"color: inherit\">symbol?</a></span> <span class=\"n\">code</span><span class=\"p\">)</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/symbols.html#(def._((quote._~23~25kernel)._symbol-~3estring))\" style=\"color: inherit\">symbol-&gt;string</a></span> <span class=\"n\">code</span><span class=\"p\">))</span>\n                                 <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"n\">code</span> <span class=\"sc\">#\\backspace</span><span class=\"p\">)</span> <span class=\"s2\">\"backspace\"</span><span class=\"p\">)</span>\n                                 <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"n\">code</span> <span class=\"sc\">#\\rubout</span><span class=\"p\">)</span> <span class=\"s2\">\"delete\"</span><span class=\"p\">)</span>\n                                 <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"n\">code</span> <span class=\"sc\">#\\space</span><span class=\"p\">)</span> <span class=\"s2\">\"space\"</span><span class=\"p\">)</span>\n                                 <span class=\"p\">((</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._equal~3f))\" style=\"color: inherit\">equal?</a></span> <span class=\"n\">code</span> <span class=\"sc\">#\\return</span><span class=\"p\">)</span> <span class=\"s2\">\"return\"</span><span class=\"p\">)</span>\n                                 <span class=\"p\">(</span><span class=\"no\">#t</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/strings.html#(def._((quote._~23~25kernel)._string))\" style=\"color: inherit\">string</a></span> <span class=\"n\">code</span><span class=\"p\">)))))</span>\n            <span class=\"p\">(</span><span class=\"n\">set-message</span> <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/Writing.html#(def._((quote._~23~25kernel)._format))\" style=\"color: inherit\">format</a></span> <span class=\"s2\">\"~a key is disabled\"</span> <span class=\"n\">key-name</span><span class=\"p\">)))</span>\n            <span class=\"p\">(</span><span class=\"n\">set-message</span> <span class=\"s2\">\"event is discarded\"</span><span class=\"p\">)))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">k</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/objcreation.html#(form._((lib._racket/private/class-internal..rkt)._new))\" style=\"color: inherit\">new</a></span> <span class=\"n\">keymap%</span><span class=\"p\">))</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">k</span> <span class=\"n\">add-function</span> <span class=\"s2\">\"ignore\"</span> <span class=\"n\">on-disabled-key-event</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">k</span> <span class=\"n\">map-function</span> <span class=\"s2\">\"up\"</span> <span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">k</span> <span class=\"n\">map-function</span> <span class=\"s2\">\"down\"</span> <span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">k</span> <span class=\"n\">map-function</span> <span class=\"s2\">\"left\"</span> <span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">k</span> <span class=\"n\">map-function</span> <span class=\"s2\">\"right\"</span> <span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">k</span> <span class=\"n\">map-function</span> <span class=\"s2\">\"del\"</span> <span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">k</span> <span class=\"n\">map-function</span> <span class=\"s2\">\"backspace\"</span> <span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">set-keymap</span> <span class=\"n\">k</span><span class=\"p\">)</span>\n  <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>We could have disabled the unwanted keyboard events by overriding the <code>on-char</code> method &mdash; the <code>on-default-char</code> method is not useful for this purpose, as it is invoked only if the key press is not processed by a keymap. However, the <code>on-char</code> method performs some other functions and overriding it correctly is tricky and it is easy to get it wrong and break <code>pasteboard%</code> functionality. It is simpler and safer to use keymaps for this feature.</p>\n\n<h2 id=\"changing-the-way-selected-chess-pieces-are-highlighted\">Changing the way selected chess pieces are highlighted</h2>\n\n<p>By default, the <code>pasteboard%</code> object will draw eight small squares around selected snips (you can see this selection in all the examples in this and previous blog posts), however, we can change the way selection looks.</p>\n\n<p>The drawing of the squares around selected snips can be disabled using the <code>set-selection-visible</code> method, but this will not prevent selecting snips &mdash; snips are still selected, however there is no visual cue to this. We can however change the <code>chess-piece%</code> class to know that it is selected and draw itself in a different way &mdash; to keep this simple, the code is updated to draw selected pieces in red. A new flag <code>selected?</code> is added to this class and it can be set using the <code>set-selected</code> method, than, the <code>draw</code> method is updated to change the text foreground color to red if the chess piece is selected. The <code>set-selected</code> method will also need to inform the snip administrator that this snip has changed the way it is displayed and needs to be re-drawn, this is done using the <code>needs-update</code> method:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-piece%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">snip%</span>\n    <span class=\"c1\">;; Rest of the `chess-piece%` definition remains unchanged...</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">selected?</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/public))\" style=\"color: inherit\">define/public</a></span> <span class=\"p\">(</span><span class=\"n\">set-selected</span> <span class=\"n\">on?</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/set_.html#(form._((quote._~23~25kernel)._set!))\" style=\"color: inherit\">set!</a></span> <span class=\"n\">selected?</span> <span class=\"n\">on?</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/let.html#(form._((lib._racket/private/letstx-scheme..rkt)._let))\" style=\"color: inherit\">let</a></span> <span class=\"p\">((</span><span class=\"n\">admin</span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">get-admin</span><span class=\"p\">)))</span>\n        <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/when_unless.html#(form._((lib._racket/private/letstx-scheme..rkt)._when))\" style=\"color: inherit\">when</a></span> <span class=\"n\">admin</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">admin</span> <span class=\"n\">needs-update</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"mi\">0</span> <span class=\"mi\">0</span> <span class=\"n\">size</span> <span class=\"n\">size</span><span class=\"p\">))))</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/override))\" style=\"color: inherit\">define/override</a></span> <span class=\"p\">(</span><span class=\"n\">draw</span> <span class=\"n\">dc</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">.</span> <span class=\"n\">other</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-font</span> <span class=\"n\">font</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((quote._~23~25kernel)._if))\" style=\"color: inherit\">if</a></span> <span class=\"n\">selected?</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-text-foreground</span> <span class=\"s2\">\"red\"</span><span class=\"p\">)</span>\n          <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">dc</span> <span class=\"n\">set-text-foreground</span> <span class=\"s2\">\"black\"</span><span class=\"p\">))</span>\n      <span class=\"c1\">;; Rest of the drawing code remains unchanged...</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>chess-board%</code> definition is updated to disable the visible selection by calling <code>set-selection-visible</code> with an <code>#f</code> argument, and the <code>after-select</code> method is updated to inform the chess piece snip whether it was selected or unselected.</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n    <span class=\"c1\">;; Rest of the chess-board% definition remains unchanged</span>\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"n\">set-selection-visible</span> <span class=\"no\">#f</span><span class=\"p\">)</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">after-select</span> <span class=\"n\">snip</span> <span class=\"n\">on?</span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">set-selected</span> <span class=\"n\">on?</span><span class=\"p\">)</span>\n      <span class=\"c1\">;; rest of the `after-select` definition remains unchanged...</span>\n      <span class=\"p\">)</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h2 id=\"validating-chess-pieces-as-they-are-added-to-the-board\">Validating chess pieces as they are added to the board</h2>\n\n<p>The code, as written so far, has a lot of checks to ensure that the board remains in a consistent state when the user interacts with it, however, as a programmer, one can still create inconsistencies, for example by inserting two chess pieces at the same locations, or by trying to add some snips that are not chess pieces. We can prevent that by overriding the <code>can-insert?</code> method of the <code>pasteboard%</code> which will be called to validate a snip before it is inserted: if this method returns <code>#f</code> the snip will not be inserted in the pasteboard. On our case, we will check if the snip is an instance of <code>chess-piece%</code>, if it has a valid location and if that location is available on the board:</p>\n\n<div class=\"brush: racket\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/define.html#(form._((lib._racket/private/base..rkt)._define))\" style=\"color: inherit\">define</a></span> <span class=\"n\">chess-board%</span>\n  <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._class))\" style=\"color: inherit\">class</a></span> <span class=\"n\">pasteboard%</span>\n    <span class=\"c1\">;; rest of the `chess-board%` definition remains unchanged...</span>\n\n    <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._define/augment))\" style=\"color: inherit\">define/augment</a></span> <span class=\"p\">(</span><span class=\"n\">can-insert?</span> <span class=\"n\">snip</span> <span class=\"o\">.</span> <span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/pairs.html#(def._((lib._racket/list..rkt)._rest))\" style=\"color: inherit\">rest</a></span><span class=\"p\">)</span>\n      <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/if.html#(form._((lib._racket/private/letstx-scheme..rkt)._and))\" style=\"color: inherit\">and</a></span>                             <span class=\"c1\">; We can insert a snip if...</span>\n       <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/objectutils.html#(def._((lib._racket/private/class-internal..rkt)._is-a~3f))\" style=\"color: inherit\">is-a?</a></span> <span class=\"n\">snip</span> <span class=\"n\">chess-piece%</span><span class=\"p\">)</span>       <span class=\"c1\">; ... it is an instance of chess-piece%</span>\n       <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">get-location</span><span class=\"p\">)</span>        <span class=\"c1\">; ... has a location </span>\n       <span class=\"p\">(</span><span class=\"nb\"><a href=\"http://docs.racket-lang.org/reference/booleans.html#(def._((quote._~23~25kernel)._not))\" style=\"color: inherit\">not</a></span> <span class=\"p\">(</span><span class=\"n\">piece-at-location</span> <span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/createclass.html#(form._((lib._racket/private/class-internal..rkt)._this))\" style=\"color: inherit\">this</a></span> <span class=\"p\">(</span><span class=\"k\"><a href=\"http://docs.racket-lang.org/reference/ivaraccess.html#(form._((lib._racket/private/class-internal..rkt)._send))\" style=\"color: inherit\">send</a></span> <span class=\"n\">snip</span> <span class=\"n\">get-location</span><span class=\"p\">)))))</span> <span class=\"c1\">;; ... that location is empty</span>\n    <span class=\"p\">))</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The <code>pasteboard%</code> will not report an error if the program tries to insert a snip and <code>can-insert?</code> returns false, instead, the snip is simply not added to the <code>pasteboard%</code>. To check if an insert succeed or not, you can call the <code>is-owned?</code> method on the snip itself after the insert call, the method will return <code>#t</code> of the snip was inserted, and therefore now owned by the <code>pasteboard%</code> and <code>#f</code> if the snip was not inserted.</p>\n\n<h2 id=\"the-final-chessboard-program\">The final chessboard program</h2>\n\n<p>You can find the final version of the program in this <a href=\"https://gist.github.com/alex-hhh/4817c4d0353e40b72108e7e753c3d0da\">GitHub Gist</a>, the entire program, including comments is under 800 lines of code, and it has a lot of functionality for such a small program. In addition to that, the program does not use any external libraries: you can simply install <a href=\"https://racket-lang.org/\">Racket</a> and run the program in DrRacket directly &mdash; it will also run on Linux, Mac OS and Windows without any modifications.</p>\n\n<div class=\"figure\"><img src=\"/img/a019/chess-board8low.gif\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>This is not a complete program, and it is missing several features from being a complete chess game, but it is really intended to be used for exploring Racket GUI programming and pasteboard% use in particular, so feel free to copy, extend or otherwise experiment with this program.</p>") (u . "/img/a019/thumb.png")) ((? . 17) f post (u . "Changing Built-in Racket Packages") (? . 17) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2018/01/changing-built-in-racket-packages.html" . windows) (u . "/2018/01/changing-built-in-racket-packages.html") (u . "2018-01-29T19:12:09") (? . 1) (? . 16) (c (u . "racket")) (u . "\n<p>To modify one of the Racket built in packages, a local copy of the package has to be set up first. This is a surprisingly complicated task and I spent more time on it than I would like to admit. To save future me and others some time, I wrote up a set of instructions on how to do it.</p>") #t (u . "\n<p>To modify one of the Racket built in packages, a local copy of the package has to be set up first. This is a surprisingly complicated task and I spent more time on it than I would like to admit. To save future me and others some time, I wrote up a set of instructions on how to do it.</p>\n<!-- more-->\n\n<p>In my case, I wanted to add some features to the <a href=\"https://docs.racket-lang.org/plot/index.html\">plot</a> package which ships by default with a Racket installation. I started by following the instructions in this <a href=\"https://groups.google.com/forum/#!starred/racket-users/eP6QLUD8DlA\">post</a> on the Racket Users mailing list, but it was missing some information, which must have seemed obvious to experienced Racket developers. The steps below contain a hopefully complete list of steps. They work on a Windows 10 machine, with the user having no administrator privileges.</p>\n\n<h2 id=\"switch-to-the-development-version-of-the-plot-package\">Switch to the development version of the plot package</h2>\n\n<p>The plot repository actually contains six packages: &ldquo;plot&rdquo;, &ldquo;plot-compat&rdquo;, &ldquo;plot-doc&rdquo;, &ldquo;plot-lib&rdquo;, &ldquo;plot-gui-lib&rdquo;, and &ldquo;plot-test&rdquo;. They are installed as part of the normal Racket installation, which racket calls &ldquo;installation scope&rdquo;. To modify that installation, administrator privileges are needed. Alternatively, the packages can be installed in the &ldquo;user scope&rdquo;, as shown in the commands below. Running these commands below will some time as packages and dependencies are rebuilt:</p>\n\n<pre><code>raco pkg install --force --scope user --catalog https://pkgs.racket-lang.org plot\nraco pkg install --force --scope user --catalog https://pkgs.racket-lang.org plot-lib\nraco pkg install --force --scope user --catalog https://pkgs.racket-lang.org plot-gui-lib\nraco pkg install --force --scope user --catalog https://pkgs.racket-lang.org plot-doc</code></pre>\n\n<h2 id=\"clone-the-plot-repository-from-github-and-link-the-packages\">Clone the plot repository from GitHub and link the packages</h2>\n\n<p>Next step is to clone the plot package using the command below:</p>\n\n<pre><code>git clone https://github.com/racket/plot.git\n</code></pre>\n\n<p>This will give access to the source code and we can now tell racket to use the source code inside the repository for the packages. This is done using a &ldquo;raco pkg update&rdquo; command. Note that there is a trailing slash at the end of the package names: without it, the package name will be looked up in the catalog instead of the specified directory:</p>\n\n<pre><code>cd plot\nraco pkg update plot-lib/\nraco pkg update plot-gui-lib/</code></pre>\n\n<p>Finally, we can check that the plot packages are indeed installed in a git clone and can be modified:</p>\n\n<pre><code>$ raco pkg show --all --long --rx 'plot-.*'\nInstallation-wide:\n Package[*=auto]    Checksum                                    Source\n plot-compat*       cfae0fb19a8c83d6f756cea9d9815f50bb170e05    (catalog \"plot-compat\")\n plot-doc*          74c466400fb4ece74cef869f3d02d81fb176ff7c    (catalog \"plot-doc\")\n plot-gui-lib*      7ef4b214d028877e9d0003e357d77bd7e94db967    (catalog \"plot-gui-lib\")\n plot-lib*          8408c8d63a94ee2cd57713c40fd7e68525107014    (catalog \"plot-lib\")\nUser-specific for installation \"6.11\":\n Package         Checksum    Source\n plot-gui-lib    #f          (link \"C:\\\\Users\\\\Alex\\\\rkt-libs\\\\plot\\\\plot-gui-lib\")\n plot-lib        #f          (link \"C:\\\\Users\\\\Alex\\\\rkt-libs\\\\plot\\\\plot-lib\")</code></pre>\n\n<p>The &ldquo;plot-gui-lib&rdquo; and &ldquo;plot-lib&rdquo; packages are listed twice. This is because the second installation is in &ldquo;user scope&rdquo;. These packages are also listed as being linked to a directory where we cloned the plot package. Since the user scope is searched first, racket will load these packages from the git repository. The source for these packages can now be modified and racket will pick up the changes automatically.</p>\n\n<h2 id=\"switching-git-remotes\">Switching git remotes</h2>\n\n<p>In the step above, the main plot package was cloned. Unless you have push access to that repository, it is better to switch to your own fork. Assuming the plot package is already forked on GitHub, the origin branch can be renamed to upstream:</p>\n\n<pre><code>git remote rename origin upstream\n</code></pre>\n\n<p>&hellip; and the fork added as the &ldquo;origin&rdquo; remote:</p>\n\n<pre><code>git add remote origin git@github.com:alex-hhh/plot.git\n</code></pre>") (u . "/img/a009/thumb.png")) ((? . 5) f post (u . "Running and Outdoor Temperature") (? . 5) 1542802422 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2017/12/running-and-outdoor-temperature.html" . windows) (u . "/2017/12/running-and-outdoor-temperature.html") (u . "2017-12-21T17:09:45") (? . 4) (? . 1) (c (u . "training data analysis")) (u . "\n<p>It is no surprise to anyone who tried to run in the heat that it is harder than when the outdoor temperature is more pleasant. But how much harder is it, and how can this be quantified? With summer in full swing in the southern hemisphere, I decided to take a look at how running is affected by temperature.</p>") #t (u . "\n<p>It is no surprise to anyone who tried to run in the heat that it is harder than when the outdoor temperature is more pleasant. But how much harder is it, and how can this be quantified? With summer in full swing in the southern hemisphere, I decided to take a look at how running is affected by temperature.</p>\n<!-- more-->\n\n<p>Between 2011 and today, I have recorded 741 running sessions in my <a href=\"https://github.com/alex-hhh/ActivityLog2\">ActivityLog2</a> database. Out of these sessions, some were run without my Garmin watch and for some of them either the GPS or the heart rate monitor has misbehaved, recording invalid data. This has left me with 700 sessions for which I have accurate speed, heart rate and weather data.</p>\n\n<h2 id=\"temperature\">Temperature</h2>\n\n<p>In Western Australia we have plenty of hot days, especially during summer. Whenever possible, I try to run when the temperature outside is reasonable, but this is not always possible. Below is the distribution of my running sessions with regards to outdoor temperature, as you can see I prefer to run when the temperature outside is between about 18 and 23 ℃.</p>\n\n<div class=\"figure\"><img src=\"/img/a007/temperature-hist.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Temperature does not tell the whole story about how it feels outside: humidity and barometric pressure also have an influence on the comfort level. Many weather applications can show a &ldquo;feels like&rdquo; temperature which takes into account humidity and barometric pressure. There are several formulas for calculating this &ldquo;feels like&rdquo; temperature. I experimented with several of them and I decided to use <a href=\"https://en.wikipedia.org/wiki/Humidex\">Humidex</a>, mainly because it can be simply calculated and it matched my own perceived feel for the temperature. I have been using Humidex for a while now, and every time I record a run, I check this value to see if it seems OK. So far, I have been happy with this formula. Below is a distribution of my running sessions with regards to Humidex. Compared to the temperature distribution, the entire plot is shifted to the right, indicating that the &ldquo;feels like&rdquo; temperature for my runs is a lot warmer that temperature would indicate. It seems that the &ldquo;feels like&rdquo; temperature when I prefer to run is somewhere between 21 and 26 ℃.</p>\n\n<div class=\"figure\"><img src=\"/img/a007/humidex-hist.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<h2 id=\"efficiency-factor\">Efficiency Factor</h2>\n\n<p>We need a metric to describe the efficiency of running and compare it with temperature. A good metric seems to be <a href=\"https://www.trainingpeaks.com/blog/efficiency-factor-and-decoupling/\">efficiency factor</a> which is simply the ratio of the <em>running speed</em> and <em>heart rate</em>:</p>\n\n<pre><code>EF = Running_Speed / Heart_Rate\n</code></pre>\n\n<p>This ratio ties together the <strong>effort</strong> required by the run, as measured by the <strong>heart rate</strong> and the <strong>power output</strong> of the run, as measured by the <strong>running speed</strong>. An individual EF value has no meaning, and EF values cannot be compared between two athletes, but tracking the EF for an individual athlete can show if they are improving or not: maintaining the same running speed at a lower heart rate means that the athlete has improved and will result in a higher EF. An increased EF can also result from being able to maintain a higher running speed at the same heart rate.</p>\n\n<p>The efficiency factor is a great metric, since it is independent of the type of run: a high intensity run will have a higher average heart rate than a slow easy run, but it will also have a higher speed, so the overall EF of these two running sessions should be about the same. It will never be probably identical, since heart rate is affected by other factors such as outdoor temperature and how fresh or tired the athlete is.</p>\n\n<p>Another factor that can influence EF is how hilly the running course is: when running uphill, the running speed will decrease while heart rate will increase (to put it differently, it is harder to run uphill than it is on the flat). In such a case, EF will be lower than if running on a flat course. To compensate for this, the notion of <strong>grade adjusted pace</strong> (GAP) is introduced: this takes into account the running speed and the current slope and produces an equivalent speed as if the run happened on flat ground. When running uphill, GAP will be higher than the actual pace, while running downhill it will be lower. As with \"feels like&rsquo; temperature, there are several algorithms for GAP, the one I implemented is the one from Strava, which you can find described <a href=\"https://medium.com/strava-engineering/an-improved-gap-model-8b07ae8886c3\">here</a>. When calculating EF, the speed is first adjusted for grade, this ensures that the calculated EF values take into account how hilly the running course was.</p>\n\n<h2 id=\"comparing-efficiency-factor-with-temperature\">Comparing efficiency factor with temperature</h2>\n\n<p>I calculated the efficiency factor for all my running sessions and plotted them against the &ldquo;feels like&rdquo; temperature for the run. This is the gray dot could in the plot below. There are several EF values for each temperature, except the extremes where there are only a few data points. This is because EF actually tracks fitness level and over the 6 years of data my fitness level varied quite a bit, being low at the start of a season and high at the end of the season. To smooth things out, I calculated the average EF for all sessions at a certain temperature, these re the big orange dots on the plot. It is now quite apparent that there is a correlation between the efficiency factor and temperature. I fitted a second degree polynomial over these data points to obtain a smooth line (the blue dashed line) on the plot.</p>\n\n<div class=\"figure\"><img src=\"/img/a007/humidex-ga-ef-scatter.svg\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>The fitted polynomial allows estimating the efficiency factor given a temperature value as follows:</p>\n\n<pre><code>EF = 1.8347990118 + 0.0114733678 * humidex - 0.0002975829 * (humidex ^ 2)</code></pre>\n\n<p>The above formula indicates that the maximum EF of 1.95 is at 19.28 ℃, so this is the optimal temperature for me to run &mdash; intuitively, this is about right. We can do more with this formula, for example, we can determine how much HR increases with temperature if the same running speed is maintained (EF ratio represents the percentage of EF drop when compare to the best EF at 19.28 ℃):</p>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td></td>\n    <td>19.28 ℃</td>\n    <td>20 ℃</td>\n    <td>25 ℃</td>\n    <td>30 ℃</td>\n    <td>35 ℃</td>\n    <td>40 ℃</td></tr></thead>\n  <tbody>\n   <tr>\n    <td>EF</td>\n    <td>1.95</td>\n    <td>1.95</td>\n    <td>1.94</td>\n    <td>1.91</td>\n    <td>1.87</td>\n    <td>1.82</td></tr>\n   <tr>\n    <td>EF ratio</td>\n    <td>100%</td>\n    <td>100%</td>\n    <td>99.5%</td>\n    <td>98.2%</td>\n    <td>96.2%</td>\n    <td>93.4%</td></tr>\n   <tr>\n    <td>HR</td>\n    <td>150</td>\n    <td>150</td>\n    <td>151</td>\n    <td>153</td>\n    <td>156</td>\n    <td>161</td></tr>\n   <tr>\n    <td>HR</td>\n    <td>160</td>\n    <td>160</td>\n    <td>161</td>\n    <td>163</td>\n    <td>166</td>\n    <td>171</td></tr>\n   <tr>\n    <td>HR</td>\n    <td>170</td>\n    <td>170</td>\n    <td>171</td>\n    <td>173</td>\n    <td>177</td>\n    <td>182</td></tr></tbody></table></div>\n\n<p>Alternatively, we can determine how much running speed will have to decrease to keep a constant heart rate when temperature increases:</p>\n\n<div class=\"table-responsive\">\n <table class=\"table table-striped table-hover\">\n  <thead>\n   <tr>\n    <td></td>\n    <td>19.28 ℃</td>\n    <td>20 ℃</td>\n    <td>25 ℃</td>\n    <td>30 ℃</td>\n    <td>35 ℃</td>\n    <td>40 ℃</td></tr></thead>\n  <tbody>\n   <tr>\n    <td>EF</td>\n    <td>1.95</td>\n    <td>1.95</td>\n    <td>1.94</td>\n    <td>1.91</td>\n    <td>1.87</td>\n    <td>1.82</td></tr>\n   <tr>\n    <td>EF ratio</td>\n    <td>100%</td>\n    <td>100%</td>\n    <td>99.5%</td>\n    <td>98.2%</td>\n    <td>96.2%</td>\n    <td>93.4%</td></tr>\n   <tr>\n    <td>Pace (min/km)</td>\n    <td>6:00</td>\n    <td>6:00</td>\n    <td>6:02</td>\n    <td>6:06</td>\n    <td>6:14</td>\n    <td>6:25</td></tr>\n   <tr>\n    <td>Pace (min/km)</td>\n    <td>5:00</td>\n    <td>5:00</td>\n    <td>5:02</td>\n    <td>5:05</td>\n    <td>5:12</td>\n    <td>5:21</td></tr>\n   <tr>\n    <td>Pace (min/km)</td>\n    <td>4:30</td>\n    <td>4:30</td>\n    <td>4:31</td>\n    <td>4:35</td>\n    <td>4:41</td>\n    <td>4:49</td></tr>\n   <tr>\n    <td>Pace (min/km)</td>\n    <td>4:00</td>\n    <td>4:00</td>\n    <td>4:01</td>\n    <td>4:04</td>\n    <td>4:09</td>\n    <td>4:17</td></tr></tbody></table></div>\n\n<p>So how useful is this? The above data is from a single athlete (me), and I am acclimatized to heat, as I live in a hot climate. The above values match my empirical experience on how to adjust my running as the heat increases.</p>\n\n<p>How about <strong>running in the cold</strong>? The EF values seem to decrease as temperature drops. I have much less data for running in the cold and you can also see that the average EF data points don&rsquo;t follow the fitted line as closely as they do for higher temperatures. I have no direct use for this data, so for now I didn&rsquo;t calculate any tables for cold temperatures.</p>\n\n<h2 id=\"technicalities\">Technicalities</h2>\n\n<p>The data was extracted from ab <a href=\"https://github.com/alex-hhh/ActivityLog2\">ActivityLog2</a> database, containing all my training history data, using a <a href=\"http://www.racket-lang.org/\">Racket</a> script, while the polynomial model fitting was done in <a href=\"https://www.r-project.org/\">R</a> and <a href=\"https://www.rstudio.com/\">R Studio</a>. The plots were generated using the Racket built-in plot package.</p>\n\n<p>The scripts used to generate the data can be found in this <a href=\"https://gist.github.com/alex-hhh/41b94005339724421b9832c74fe54d92\">GitHub Gist</a>.</p>\n\n<p>I tried to fit several models, but the best fit was the EF with GAP compared to humidex. If you want to check fit the parameters, you can find them <a href=\"https://gist.github.com/alex-hhh/41b94005339724421b9832c74fe54d92#file-fit-summary-txt\">here</a>.</p>") (u . "/img/a007/thumb.png")) ((? . 24) f post (u . "Build Racket Packages with Azure Pipelines") (? . 24) 1555631005 (p+ #"C:\\Users\\alexh\\Projects\\Blog\\2019/04/build-racket-packages-with-azure-pipelines.html" . windows) (u . "/2019/04/build-racket-packages-with-azure-pipelines.html") (u . "2019-04-18T16:09:34") (? . 15) #f (c (u . "racket")) (u . "\n<p>With the future of Travis uncertain, I started looking for a <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">Continuous Integration</a> alternative and since Microsoft advertised Azure DevOps everywhere I went on the web, I decided to give it a try. I now moved all my Racket packages to Azure Pipelines, plus have a Racket application built with it, so I decided to write up some notes about my experience.</p>") #t (u . "\n<p>With the future of Travis uncertain, I started looking for a <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">Continuous Integration</a> alternative and since Microsoft advertised Azure DevOps everywhere I went on the web, I decided to give it a try. I now moved all my Racket packages to Azure Pipelines, plus have a Racket application built with it, so I decided to write up some notes about my experience.</p>\n<!-- more-->\n\n<p>This blog post covers setting up an Azure Pipelines <a href=\"https://en.wikipedia.org/wiki/Continuous_integration\">CI</a> for a Racket package, but it does make any attempt to make the case that it is better or worse than the alternatives: I was looking for a Travis alternative, tried out Azure Pipelines, found it sufficient for my needs and stayed with it &mdash; at least for now.</p>\n\n<div class=\"figure\"><img src=\"/img/a025/azp.png\" alt=\"\" />\n <p class=\"caption\"></p></div>\n\n<p>Azure Pipelines does not support building Racket packages out of the box, but as was the case with <a href=\"https://github.com/greghendershott/travis-racket/\">travis-racket</a> for Travis, it turns out it is not too complex to setup build and test of a Racket package.</p>\n\n<p>Before creating the actual pipelines, I find it simpler to setup the Racket package project with the required files, and there are two of them: the <code>azure-pipelines.yml</code> file controls the build, and <code>install-racket.sh</code> which downloads and installs Racket. These files don&rsquo;t need to be in the root folder of the package, they can be anywhere (and the build YAML file can have any name). I prefer to place then (and any additional build files) in the <strong>ci</strong> sub-folder of the package. For an example setup, see the <a href=\"https://github.com/alex-hhh/plot-container\">plot-container</a>.</p>\n\n<h2 id=\"azure-pipelinesyml--the-build-file\">azure-pipelines.yml &mdash; the Build File</h2>\n\n<p>The <code>azure-pipelines.yml</code> file controls the build and test of the application, and for a basic racket package can be really simple. The example below should work for any package as long as the <code>PACKAGE_NAME</code> variable is updated to contain the actual package name:</p>\n\n<div class=\"brush: yaml\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"l l-Scalar l-Scalar-Plain\">pool</span><span class=\"p p-Indicator\">:</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">vmImage</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&#39;Ubuntu-16.04&#39;</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">variables</span><span class=\"p p-Indicator\">:</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">PACKAGE_NAME</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"plot-container\"</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">RACKET_VERSION</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">7.2</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">RACKET_DIR</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">$(Agent.BuildDirectory)/racket</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">PLTSTDERR</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&#39;error</span><span class=\"nv\"> </span><span class=\"s\">warning@optimizer&#39;</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">steps</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">script</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">bash ./ci/install-racket.sh</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">displayName</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&#39;Install</span><span class=\"nv\"> </span><span class=\"s\">Racket</span><span class=\"nv\"> </span><span class=\"s\">$(RACKET_VERSION)&#39;</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">script</span><span class=\"p p-Indicator\">:</span> <span class=\"p p-Indicator\">|</span>\n    <span class=\"no\">PATH=\"$(RACKET_DIR)/bin:$(PATH)\"</span>\n    <span class=\"no\">raco pkg install --deps search-auto  --type dir --name $(PACKAGE_NAME)</span>\n    <span class=\"no\">raco setup --check-pkg-deps --pkgs $(PACKAGE_NAME)</span>\n    <span class=\"no\">raco test --no-run-if-absent --package $(PACKAGE_NAME)</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">displayName</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">&#39;Build</span><span class=\"nv\"> </span><span class=\"s\">and</span><span class=\"nv\"> </span><span class=\"s\">Test</span><span class=\"nv\"> </span><span class=\"s\">$(PACKAGE_NAME)&#39;</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>If you are familiar with Travis, the structure of the file should be easy to understand:</p>\n\n<ul>\n <li>the <code>vmImage</code> tag selects the Virtual Machine to use &mdash; I find Linux  machines to be easiest to use, but see later in this blog post on how to use  Windows machines too.</li>\n <li>the <code>variables</code> section defines a set of variables to use in the pipeline.  In this case, the name of the package, racket version to install and where  to install it. I also prefer to set the <code>PLTSTDERR</code> variable so the Racket  compiler will output some extra warnings, which help discovering problems  early.</li>\n <li>the <code>steps</code> section contains the steps needed to build the package. There  are only two of them: installing racket and running the normal racket  package build and setup commands.</li></ul>\n\n<p>Unlike Travis, Azure Pipelines will not check out the sources in a directory the same as the package name, so the actual name of the package needs to be explicitly specified to the <code>raco pkg</code> and <code>raco setup</code> so these commands work correctly.</p>\n\n<p>To build the package using different Racket versions, you can set up matrix configurations for variables by adding a <code>strategy</code> section to the azure pipelines files and specifying which variable combinations to use for building. In the example below, the package would be built with two jobs, one for Racket 7.2 and one for Racket 7.1:</p>\n\n<div class=\"brush: yaml\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"l l-Scalar l-Scalar-Plain\">strategy</span><span class=\"p p-Indicator\">:</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">maxParallel</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">matrix</span><span class=\"p p-Indicator\">:</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">Racket_7_2</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"l l-Scalar l-Scalar-Plain\">RACKET_VERSION</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">7.2</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">Racket_7_1</span><span class=\"p p-Indicator\">:</span>\n      <span class=\"l l-Scalar l-Scalar-Plain\">RACKET_VERSION</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">7.1</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>If the Racket package uses the <code>racket/gui</code> library during running the tests (even if no GUI windows are opened), you will find that the above pipelines file will fail to build, because no X Server is running by default on the build machines. The solution is to start the X Virtual Frame Buffer server, <code>Xvfb</code>, as a separate build step early in the pipeline, than add a <code>DISPLAY</code> variable indicating which connection the server is using:</p>\n\n<div class=\"brush: yaml\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre>1\n2\n3\n4\n5\n6\n7</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"l l-Scalar l-Scalar-Plain\">variables</span><span class=\"p p-Indicator\">:</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">DISPLAY</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">:99.0</span>\n  <span class=\"c1\"># other variables follow here</span>\n<span class=\"l l-Scalar l-Scalar-Plain\">steps</span><span class=\"p p-Indicator\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">script</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">(/usr/bin/Xvfb :99 -screen 0 1280x1024x24 &amp;)</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">displayName</span><span class=\"p p-Indicator\">:</span> <span class=\"s\">\"Start</span><span class=\"nv\"> </span><span class=\"s\">Xvfb</span><span class=\"nv\"> </span><span class=\"s\">for</span><span class=\"nv\"> </span><span class=\"s\">DISPLAY=$(DISPLAY)\"</span>\n<span class=\"c1\"># other steps folow here</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<h3 id=\"installing-racket\">Installing Racket</h3>\n\n<p>Racket is not installed on any of the virtual machines used for the builds, so it has to be installed as part of the pipeline. It is the simplest to do this in a shell script which is invoked from the pipeline itself. A basic shell script is just a few lines of code, which downloads the installer file using <code>curl</code> than runs it:</p>\n\n<div class=\"brush: sh\">\n <table class=\"sourcetable\">\n  <tbody>\n   <tr>\n    <td class=\"linenos\">\n     <div class=\"linenodiv\">\n      <pre> 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13</pre></div></td>\n    <td class=\"code\">\n     <div class=\"source\">\n      <pre><span></span><span class=\"ch\">#!/bin/bash</span>\n<span class=\"nb\">set</span> -e                         <span class=\"c1\"># fail script if any of the commands in it fail</span>\n<span class=\"nv\">RACKET_DIR</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">RACKET_DIR</span><span class=\"p\">:=~/racket</span><span class=\"si\">}</span>\n<span class=\"nv\">RACKET_VERSION</span><span class=\"o\">=</span><span class=\"si\">${</span><span class=\"nv\">RACKET_VERSION</span><span class=\"p\">:=7.2</span><span class=\"si\">}</span>\n<span class=\"nv\">BASE</span><span class=\"o\">=</span><span class=\"s2\">\"https://www.cs.utah.edu/plt/installers\"</span>\n\n<span class=\"nv\">URL</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">BASE</span><span class=\"si\">}</span><span class=\"s2\">/</span><span class=\"si\">${</span><span class=\"nv\">RACKET_VERSION</span><span class=\"si\">}</span><span class=\"s2\">/racket-</span><span class=\"si\">${</span><span class=\"nv\">RACKET_VERSION</span><span class=\"si\">}</span><span class=\"s2\">-x86_64-linux.sh\"</span>\n<span class=\"nv\">DFILE</span><span class=\"o\">=</span><span class=\"k\">$(</span>mktemp <span class=\"si\">${</span><span class=\"nv\">TMP</span><span class=\"k\">:-</span><span class=\"p\">/tmp</span><span class=\"si\">}</span>/<span class=\"si\">${</span><span class=\"nv\">0</span><span class=\"p\">##**/</span><span class=\"si\">}</span>.XXXXXXXXXX<span class=\"k\">)</span>\n\n<span class=\"nb\">echo</span> <span class=\"s2\">\"Downloading </span><span class=\"nv\">$URL</span><span class=\"s2\"> ...\"</span>\ncurl --output <span class=\"nv\">$DFILE</span> <span class=\"nv\">$URL</span>\n<span class=\"nb\">echo</span> <span class=\"s2\">\"Installing Racket into </span><span class=\"nv\">$RACKET_DIR</span><span class=\"s2\"> ...\"</span>\n/bin/bash <span class=\"nv\">$DFILE</span> --in-place --dest <span class=\"s2\">\"</span><span class=\"nv\">$RACKET_DIR</span><span class=\"s2\">\"</span>\n</pre></div>\n</td></tr></tbody></table>\n</div>\n\n<p>The above script will install the latest Racket version (7.2 at the time of this writing), but it also allows controlling the actual version using the <code>RACKET_VERSION</code> environment variable and the place where Racket is installed using the <code>RACKET_DIR</code> environment variable. Values for these variables can be specified in the Azure Pipelines build files, allowing installation of different versions without modifying this script.</p>\n\n<p>The above script will work for recent Racket versions (7.0 onwards). For more complex installation shell scripts, which also handle older Racket versions, see the <a href=\"https://github.com/greghendershott/travis-racket/blob/master/install-racket.sh\">install-racket.sh</a> script that is part of the <code>travis-racket</code> repository, and I also wrote my <a href=\"https://github.com/alex-hhh/plot-container/blob/master/ci/install-racket.sh\">own version</a>, mostly as an exercise in writing terse shell scripts. Both these shell scripts can be used in Azure Pipelines but they are somewhat complex to fit in a blog post, since they handle installation of old versions plus some extra checking.</p>\n\n<p>Also, at the time of writing this post, the main Racket mirror site was down, so the download script uses the UTAH site directly. Normally, the <code>BASE</code> download URL should be set to https://mirror.racket-lang.org/installers.</p>\n\n<h2 id=\"setup-the-build-pipeline\">Setup the build pipeline</h2>\n\n<p>You&rsquo;ll need an <a href=\"https://dev.azure.com\">Azure DevOps</a> account and create a project to hold the build pipelines. A single project can hold pipelines for several GitHub projects &mdash; this is really convenient if you only want to use DevOps for the pipeline functionality, because you only need to create one project.</p>\n\n<p>There are several on-line tutorials on how to setup and create the actual build pipeline, so this is just a short bullet point list of what needs to be done:</p>\n\n<ul>\n <li>Create an Azure DevOps account, if you don&rsquo;t already have one</li>\n <li>Install Azure Pipelines from the GitHub MarketPlace and authorize it for  your GitHub accont</li>\n <li>Create a new Azure Pipelines project to hold the build pipelines</li>\n <li>Create a new build pipeline &mdash; you will be prompted to select where the  project is located and where the build YAML file is withing the project,  since the file does not have to be in the root of your project</li></ul>\n\n<h2 id=\"beyond-the-basics\">Beyond the basics</h2>\n\n<p>There are several other Azure Pipelines features which are useful in building more complex applications &mdash; for such an example, see the build pipeline for the <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/etc/scripts/azure-pipelines.yml\">ActivityLog2 project</a>. This is a pipeline which can build a Racket application on both Windows and Linux (and there is an <a href=\"https://github.com/alex-hhh/ActivityLog2/blob/master/etc/scripts/install-racket.ps1\">install-racket.ps1</a> which downloads installs Racket on Windows), download test databases from an external server, build an application with embedded API keys, which are stored as secret variables and publish the resulting installer as a build artifact. For more details about this process, see that builds <a href=\"https://github.com/alex-hhh/ActivityLog2/tree/master/etc/scripts\">README.md</a> file.</p>") (u . "/img/a025/thumb.png"))))